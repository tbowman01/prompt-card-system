a314a42cd3ed28fb775826631b42edd4
"use strict";

/* istanbul ignore next */
function cov_2kugt2zsg3() {
  var path = "/workspaces/prompt-card-system/backend/src/services/CostTracker.ts";
  var hash = "6807025c3ea93b0d4348cd74f7fd95a902bf4823";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/CostTracker.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 51
        }
      },
      "2": {
        start: {
          line: 4,
          column: 21
        },
        end: {
          line: 4,
          column: 54
        }
      },
      "3": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 38
        }
      },
      "4": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 20,
          column: 10
        }
      },
      "5": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 33
        }
      },
      "6": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 34
        }
      },
      "7": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 62
        }
      },
      "8": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 46,
          column: 7
        }
      },
      "9": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 56,
          column: 7
        }
      },
      "10": {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 70,
          column: 7
        }
      },
      "11": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 84,
          column: 7
        }
      },
      "12": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 91,
          column: 7
        }
      },
      "13": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 71
        }
      },
      "14": {
        start: {
          line: 98,
          column: 31
        },
        end: {
          line: 134,
          column: 9
        }
      },
      "15": {
        start: {
          line: 136,
          column: 30
        },
        end: {
          line: 140,
          column: 6
        }
      },
      "16": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 9
        }
      },
      "17": {
        start: {
          line: 142,
          column: 12
        },
        end: {
          line: 142,
          column: 149
        }
      },
      "18": {
        start: {
          line: 143,
          column: 12
        },
        end: {
          line: 143,
          column: 58
        }
      },
      "19": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 49
        }
      },
      "20": {
        start: {
          line: 151,
          column: 28
        },
        end: {
          line: 151,
          column: 59
        }
      },
      "21": {
        start: {
          line: 152,
          column: 21
        },
        end: {
          line: 152,
          column: 78
        }
      },
      "22": {
        start: {
          line: 153,
          column: 27
        },
        end: {
          line: 157,
          column: 6
        }
      },
      "23": {
        start: {
          line: 158,
          column: 23
        },
        end: {
          line: 158,
          column: 151
        }
      },
      "24": {
        start: {
          line: 159,
          column: 25
        },
        end: {
          line: 171,
          column: 9
        }
      },
      "25": {
        start: {
          line: 173,
          column: 8
        },
        end: {
          line: 173,
          column: 39
        }
      },
      "26": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 24
        }
      },
      "27": {
        start: {
          line: 180,
          column: 24
        },
        end: {
          line: 180,
          column: 52
        }
      },
      "28": {
        start: {
          line: 181,
          column: 8
        },
        end: {
          line: 184,
          column: 9
        }
      },
      "29": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 85
        }
      },
      "30": {
        start: {
          line: 183,
          column: 12
        },
        end: {
          line: 183,
          column: 21
        }
      },
      "31": {
        start: {
          line: 185,
          column: 27
        },
        end: {
          line: 185,
          column: 76
        }
      },
      "32": {
        start: {
          line: 186,
          column: 31
        },
        end: {
          line: 186,
          column: 88
        }
      },
      "33": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 43
        }
      },
      "34": {
        start: {
          line: 193,
          column: 20
        },
        end: {
          line: 203,
          column: 5
        }
      },
      "35": {
        start: {
          line: 204,
          column: 23
        },
        end: {
          line: 204,
          column: 25
        }
      },
      "36": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 208,
          column: 9
        }
      },
      "37": {
        start: {
          line: 206,
          column: 12
        },
        end: {
          line: 206,
          column: 44
        }
      },
      "38": {
        start: {
          line: 207,
          column: 12
        },
        end: {
          line: 207,
          column: 35
        }
      },
      "39": {
        start: {
          line: 209,
          column: 8
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "40": {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 44
        }
      },
      "41": {
        start: {
          line: 211,
          column: 12
        },
        end: {
          line: 211,
          column: 33
        }
      },
      "42": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 216,
          column: 9
        }
      },
      "43": {
        start: {
          line: 214,
          column: 12
        },
        end: {
          line: 214,
          column: 47
        }
      },
      "44": {
        start: {
          line: 215,
          column: 12
        },
        end: {
          line: 215,
          column: 38
        }
      },
      "45": {
        start: {
          line: 217,
          column: 8
        },
        end: {
          line: 217,
          column: 35
        }
      },
      "46": {
        start: {
          line: 218,
          column: 24
        },
        end: {
          line: 218,
          column: 69
        }
      },
      "47": {
        start: {
          line: 219,
          column: 28
        },
        end: {
          line: 219,
          column: 30
        }
      },
      "48": {
        start: {
          line: 220,
          column: 30
        },
        end: {
          line: 220,
          column: 32
        }
      },
      "49": {
        start: {
          line: 221,
          column: 34
        },
        end: {
          line: 221,
          column: 36
        }
      },
      "50": {
        start: {
          line: 222,
          column: 24
        },
        end: {
          line: 222,
          column: 25
        }
      },
      "51": {
        start: {
          line: 223,
          column: 26
        },
        end: {
          line: 223,
          column: 27
        }
      },
      "52": {
        start: {
          line: 224,
          column: 32
        },
        end: {
          line: 224,
          column: 33
        }
      },
      "53": {
        start: {
          line: 225,
          column: 36
        },
        end: {
          line: 225,
          column: 37
        }
      },
      "54": {
        start: {
          line: 226,
          column: 30
        },
        end: {
          line: 226,
          column: 31
        }
      },
      "55": {
        start: {
          line: 227,
          column: 8
        },
        end: {
          line: 240,
          column: 9
        }
      },
      "56": {
        start: {
          line: 228,
          column: 26
        },
        end: {
          line: 228,
          column: 38
        }
      },
      "57": {
        start: {
          line: 229,
          column: 25
        },
        end: {
          line: 229,
          column: 42
        }
      },
      "58": {
        start: {
          line: 230,
          column: 27
        },
        end: {
          line: 230,
          column: 46
        }
      },
      "59": {
        start: {
          line: 231,
          column: 31
        },
        end: {
          line: 231,
          column: 54
        }
      },
      "60": {
        start: {
          line: 232,
          column: 12
        },
        end: {
          line: 232,
          column: 38
        }
      },
      "61": {
        start: {
          line: 233,
          column: 12
        },
        end: {
          line: 233,
          column: 42
        }
      },
      "62": {
        start: {
          line: 234,
          column: 12
        },
        end: {
          line: 234,
          column: 50
        }
      },
      "63": {
        start: {
          line: 235,
          column: 12
        },
        end: {
          line: 235,
          column: 30
        }
      },
      "64": {
        start: {
          line: 236,
          column: 12
        },
        end: {
          line: 236,
          column: 34
        }
      },
      "65": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 237,
          column: 60
        }
      },
      "66": {
        start: {
          line: 238,
          column: 12
        },
        end: {
          line: 238,
          column: 68
        }
      },
      "67": {
        start: {
          line: 239,
          column: 12
        },
        end: {
          line: 239,
          column: 42
        }
      },
      "68": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 252,
          column: 10
        }
      },
      "69": {
        start: {
          line: 258,
          column: 32
        },
        end: {
          line: 258,
          column: 34
        }
      },
      "70": {
        start: {
          line: 259,
          column: 24
        },
        end: {
          line: 259,
          column: 69
        }
      },
      "71": {
        start: {
          line: 261,
          column: 29
        },
        end: {
          line: 262,
          column: 42
        }
      },
      "72": {
        start: {
          line: 262,
          column: 36
        },
        end: {
          line: 262,
          column: 41
        }
      },
      "73": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 285,
          column: 9
        }
      },
      "74": {
        start: {
          line: 264,
          column: 39
        },
        end: {
          line: 264,
          column: 57
        }
      },
      "75": {
        start: {
          line: 265,
          column: 38
        },
        end: {
          line: 265,
          column: 56
        }
      },
      "76": {
        start: {
          line: 266,
          column: 34
        },
        end: {
          line: 266,
          column: 74
        }
      },
      "77": {
        start: {
          line: 267,
          column: 33
        },
        end: {
          line: 267,
          column: 73
        }
      },
      "78": {
        start: {
          line: 268,
          column: 12
        },
        end: {
          line: 284,
          column: 13
        }
      },
      "79": {
        start: {
          line: 269,
          column: 16
        },
        end: {
          line: 283,
          column: 19
        }
      },
      "80": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 301,
          column: 9
        }
      },
      "81": {
        start: {
          line: 288,
          column: 12
        },
        end: {
          line: 300,
          column: 15
        }
      },
      "82": {
        start: {
          line: 303,
          column: 8
        },
        end: {
          line: 317,
          column: 9
        }
      },
      "83": {
        start: {
          line: 304,
          column: 12
        },
        end: {
          line: 316,
          column: 15
        }
      },
      "84": {
        start: {
          line: 318,
          column: 8
        },
        end: {
          line: 318,
          column: 31
        }
      },
      "85": {
        start: {
          line: 324,
          column: 28
        },
        end: {
          line: 327,
          column: 6
        }
      },
      "86": {
        start: {
          line: 328,
          column: 23
        },
        end: {
          line: 328,
          column: 61
        }
      },
      "87": {
        start: {
          line: 329,
          column: 8
        },
        end: {
          line: 338,
          column: 10
        }
      },
      "88": {
        start: {
          line: 344,
          column: 23
        },
        end: {
          line: 346,
          column: 12
        }
      },
      "89": {
        start: {
          line: 347,
          column: 32
        },
        end: {
          line: 347,
          column: 34
        }
      },
      "90": {
        start: {
          line: 348,
          column: 8
        },
        end: {
          line: 372,
          column: 9
        }
      },
      "91": {
        start: {
          line: 349,
          column: 34
        },
        end: {
          line: 349,
          column: 83
        }
      },
      "92": {
        start: {
          line: 350,
          column: 35
        },
        end: {
          line: 350,
          column: 74
        }
      },
      "93": {
        start: {
          line: 351,
          column: 28
        },
        end: {
          line: 351,
          column: 40
        }
      },
      "94": {
        start: {
          line: 352,
          column: 12
        },
        end: {
          line: 357,
          column: 13
        }
      },
      "95": {
        start: {
          line: 353,
          column: 16
        },
        end: {
          line: 353,
          column: 39
        }
      },
      "96": {
        start: {
          line: 355,
          column: 17
        },
        end: {
          line: 357,
          column: 13
        }
      },
      "97": {
        start: {
          line: 356,
          column: 16
        },
        end: {
          line: 356,
          column: 40
        }
      },
      "98": {
        start: {
          line: 359,
          column: 12
        },
        end: {
          line: 363,
          column: 65
        }
      },
      "99": {
        start: {
          line: 364,
          column: 12
        },
        end: {
          line: 371,
          column: 13
        }
      },
      "100": {
        start: {
          line: 365,
          column: 16
        },
        end: {
          line: 370,
          column: 19
        }
      },
      "101": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 31
        }
      },
      "102": {
        start: {
          line: 380,
          column: 20
        },
        end: {
          line: 380,
          column: 30
        }
      },
      "103": {
        start: {
          line: 381,
          column: 8
        },
        end: {
          line: 398,
          column: 9
        }
      },
      "104": {
        start: {
          line: 383,
          column: 16
        },
        end: {
          line: 383,
          column: 101
        }
      },
      "105": {
        start: {
          line: 384,
          column: 16
        },
        end: {
          line: 384,
          column: 22
        }
      },
      "106": {
        start: {
          line: 386,
          column: 34
        },
        end: {
          line: 386,
          column: 47
        }
      },
      "107": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 387,
          column: 64
        }
      },
      "108": {
        start: {
          line: 388,
          column: 16
        },
        end: {
          line: 388,
          column: 52
        }
      },
      "109": {
        start: {
          line: 389,
          column: 16
        },
        end: {
          line: 389,
          column: 22
        }
      },
      "110": {
        start: {
          line: 391,
          column: 16
        },
        end: {
          line: 391,
          column: 89
        }
      },
      "111": {
        start: {
          line: 392,
          column: 16
        },
        end: {
          line: 392,
          column: 22
        }
      },
      "112": {
        start: {
          line: 394,
          column: 16
        },
        end: {
          line: 394,
          column: 55
        }
      },
      "113": {
        start: {
          line: 395,
          column: 16
        },
        end: {
          line: 395,
          column: 22
        }
      },
      "114": {
        start: {
          line: 397,
          column: 16
        },
        end: {
          line: 397,
          column: 25
        }
      },
      "115": {
        start: {
          line: 399,
          column: 23
        },
        end: {
          line: 403,
          column: 21
        }
      },
      "116": {
        start: {
          line: 404,
          column: 8
        },
        end: {
          line: 404,
          column: 39
        }
      },
      "117": {
        start: {
          line: 410,
          column: 21
        },
        end: {
          line: 410,
          column: 75
        }
      },
      "118": {
        start: {
          line: 411,
          column: 26
        },
        end: {
          line: 411,
          column: 36
        }
      },
      "119": {
        start: {
          line: 412,
          column: 8
        },
        end: {
          line: 412,
          column: 54
        }
      },
      "120": {
        start: {
          line: 413,
          column: 31
        },
        end: {
          line: 423,
          column: 35
        }
      },
      "121": {
        start: {
          line: 424,
          column: 8
        },
        end: {
          line: 433,
          column: 9
        }
      },
      "122": {
        start: {
          line: 425,
          column: 12
        },
        end: {
          line: 432,
          column: 14
        }
      },
      "123": {
        start: {
          line: 434,
          column: 22
        },
        end: {
          line: 434,
          column: 59
        }
      },
      "124": {
        start: {
          line: 434,
          column: 46
        },
        end: {
          line: 434,
          column: 58
        }
      },
      "125": {
        start: {
          line: 435,
          column: 29
        },
        end: {
          line: 435,
          column: 76
        }
      },
      "126": {
        start: {
          line: 435,
          column: 52
        },
        end: {
          line: 435,
          column: 57
        }
      },
      "127": {
        start: {
          line: 437,
          column: 28
        },
        end: {
          line: 437,
          column: 43
        }
      },
      "128": {
        start: {
          line: 438,
          column: 29
        },
        end: {
          line: 438,
          column: 46
        }
      },
      "129": {
        start: {
          line: 439,
          column: 26
        },
        end: {
          line: 439,
          column: 85
        }
      },
      "130": {
        start: {
          line: 439,
          column: 55
        },
        end: {
          line: 439,
          column: 60
        }
      },
      "131": {
        start: {
          line: 440,
          column: 27
        },
        end: {
          line: 440,
          column: 88
        }
      },
      "132": {
        start: {
          line: 440,
          column: 57
        },
        end: {
          line: 440,
          column: 62
        }
      },
      "133": {
        start: {
          line: 441,
          column: 20
        },
        end: {
          line: 441,
          column: 28
        }
      },
      "134": {
        start: {
          line: 442,
          column: 8
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "135": {
        start: {
          line: 443,
          column: 12
        },
        end: {
          line: 443,
          column: 33
        }
      },
      "136": {
        start: {
          line: 445,
          column: 13
        },
        end: {
          line: 447,
          column: 9
        }
      },
      "137": {
        start: {
          line: 446,
          column: 12
        },
        end: {
          line: 446,
          column: 33
        }
      },
      "138": {
        start: {
          line: 448,
          column: 27
        },
        end: {
          line: 448,
          column: 80
        }
      },
      "139": {
        start: {
          line: 449,
          column: 30
        },
        end: {
          line: 449,
          column: 55
        }
      },
      "140": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 461,
          column: 10
        }
      },
      "141": {
        start: {
          line: 467,
          column: 24
        },
        end: {
          line: 467,
          column: 69
        }
      },
      "142": {
        start: {
          line: 469,
          column: 26
        },
        end: {
          line: 479,
          column: 30
        }
      },
      "143": {
        start: {
          line: 480,
          column: 25
        },
        end: {
          line: 480,
          column: 134
        }
      },
      "144": {
        start: {
          line: 482,
          column: 24
        },
        end: {
          line: 482,
          column: 159
        }
      },
      "145": {
        start: {
          line: 482,
          column: 55
        },
        end: {
          line: 482,
          column: 86
        }
      },
      "146": {
        start: {
          line: 484,
          column: 27
        },
        end: {
          line: 490,
          column: 43
        }
      },
      "147": {
        start: {
          line: 484,
          column: 87
        },
        end: {
          line: 490,
          column: 9
        }
      },
      "148": {
        start: {
          line: 490,
          column: 27
        },
        end: {
          line: 490,
          column: 42
        }
      },
      "149": {
        start: {
          line: 491,
          column: 8
        },
        end: {
          line: 511,
          column: 10
        }
      },
      "150": {
        start: {
          line: 504,
          column: 43
        },
        end: {
          line: 509,
          column: 13
        }
      },
      "151": {
        start: {
          line: 517,
          column: 24
        },
        end: {
          line: 517,
          column: 83
        }
      },
      "152": {
        start: {
          line: 519,
          column: 20
        },
        end: {
          line: 527,
          column: 5
        }
      },
      "153": {
        start: {
          line: 528,
          column: 23
        },
        end: {
          line: 528,
          column: 25
        }
      },
      "154": {
        start: {
          line: 529,
          column: 8
        },
        end: {
          line: 532,
          column: 9
        }
      },
      "155": {
        start: {
          line: 530,
          column: 12
        },
        end: {
          line: 530,
          column: 47
        }
      },
      "156": {
        start: {
          line: 531,
          column: 12
        },
        end: {
          line: 531,
          column: 35
        }
      },
      "157": {
        start: {
          line: 533,
          column: 8
        },
        end: {
          line: 536,
          column: 9
        }
      },
      "158": {
        start: {
          line: 534,
          column: 12
        },
        end: {
          line: 534,
          column: 47
        }
      },
      "159": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 535,
          column: 33
        }
      },
      "160": {
        start: {
          line: 537,
          column: 8
        },
        end: {
          line: 540,
          column: 9
        }
      },
      "161": {
        start: {
          line: 538,
          column: 12
        },
        end: {
          line: 538,
          column: 50
        }
      },
      "162": {
        start: {
          line: 539,
          column: 12
        },
        end: {
          line: 539,
          column: 38
        }
      },
      "163": {
        start: {
          line: 541,
          column: 23
        },
        end: {
          line: 541,
          column: 68
        }
      },
      "164": {
        start: {
          line: 542,
          column: 32
        },
        end: {
          line: 542,
          column: 61
        }
      },
      "165": {
        start: {
          line: 543,
          column: 37
        },
        end: {
          line: 543,
          column: 71
        }
      },
      "166": {
        start: {
          line: 544,
          column: 33
        },
        end: {
          line: 544,
          column: 63
        }
      },
      "167": {
        start: {
          line: 545,
          column: 28
        },
        end: {
          line: 545,
          column: 100
        }
      },
      "168": {
        start: {
          line: 546,
          column: 38
        },
        end: {
          line: 546,
          column: 109
        }
      },
      "169": {
        start: {
          line: 547,
          column: 31
        },
        end: {
          line: 547,
          column: 107
        }
      },
      "170": {
        start: {
          line: 548,
          column: 32
        },
        end: {
          line: 548,
          column: 98
        }
      },
      "171": {
        start: {
          line: 549,
          column: 8
        },
        end: {
          line: 558,
          column: 10
        }
      },
      "172": {
        start: {
          line: 564,
          column: 8
        },
        end: {
          line: 566,
          column: 13
        }
      },
      "173": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 82
        }
      },
      "174": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 578,
          column: 538
        }
      },
      "175": {
        start: {
          line: 584,
          column: 8
        },
        end: {
          line: 584,
          column: 41
        }
      },
      "176": {
        start: {
          line: 587,
          column: 0
        },
        end: {
          line: 587,
          column: 34
        }
      },
      "177": {
        start: {
          line: 588,
          column: 0
        },
        end: {
          line: 588,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 23,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        loc: {
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 97,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        loc: {
          start: {
            line: 97,
            column: 24
          },
          end: {
            line: 146,
            column: 5
          }
        },
        line: 97
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 5
          }
        },
        loc: {
          start: {
            line: 150,
            column: 116
          },
          end: {
            line: 175,
            column: 5
          }
        },
        line: 150
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 179,
            column: 5
          }
        },
        loc: {
          start: {
            line: 179,
            column: 57
          },
          end: {
            line: 188,
            column: 5
          }
        },
        line: 179
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 192,
            column: 4
          },
          end: {
            line: 192,
            column: 5
          }
        },
        loc: {
          start: {
            line: 192,
            column: 59
          },
          end: {
            line: 253,
            column: 5
          }
        },
        line: 192
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 257,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        loc: {
          start: {
            line: 257,
            column: 66
          },
          end: {
            line: 319,
            column: 5
          }
        },
        line: 257
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 262,
            column: 18
          },
          end: {
            line: 262,
            column: 19
          }
        },
        loc: {
          start: {
            line: 262,
            column: 36
          },
          end: {
            line: 262,
            column: 41
          }
        },
        line: 262
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 323,
            column: 4
          },
          end: {
            line: 323,
            column: 5
          }
        },
        loc: {
          start: {
            line: 323,
            column: 51
          },
          end: {
            line: 339,
            column: 5
          }
        },
        line: 323
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 343,
            column: 4
          },
          end: {
            line: 343,
            column: 5
          }
        },
        loc: {
          start: {
            line: 343,
            column: 30
          },
          end: {
            line: 374,
            column: 5
          }
        },
        line: 343
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 378,
            column: 4
          },
          end: {
            line: 378,
            column: 5
          }
        },
        loc: {
          start: {
            line: 378,
            column: 43
          },
          end: {
            line: 405,
            column: 5
          }
        },
        line: 378
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 409,
            column: 5
          }
        },
        loc: {
          start: {
            line: 409,
            column: 41
          },
          end: {
            line: 462,
            column: 5
          }
        },
        line: 409
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 434,
            column: 41
          },
          end: {
            line: 434,
            column: 42
          }
        },
        loc: {
          start: {
            line: 434,
            column: 46
          },
          end: {
            line: 434,
            column: 58
          }
        },
        line: 434
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 435,
            column: 42
          },
          end: {
            line: 435,
            column: 43
          }
        },
        loc: {
          start: {
            line: 435,
            column: 52
          },
          end: {
            line: 435,
            column: 57
          }
        },
        line: 435
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 439,
            column: 45
          },
          end: {
            line: 439,
            column: 46
          }
        },
        loc: {
          start: {
            line: 439,
            column: 55
          },
          end: {
            line: 439,
            column: 60
          }
        },
        line: 439
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 440,
            column: 47
          },
          end: {
            line: 440,
            column: 48
          }
        },
        loc: {
          start: {
            line: 440,
            column: 57
          },
          end: {
            line: 440,
            column: 62
          }
        },
        line: 440
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 466,
            column: 4
          },
          end: {
            line: 466,
            column: 5
          }
        },
        loc: {
          start: {
            line: 466,
            column: 48
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 466
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 482,
            column: 41
          },
          end: {
            line: 482,
            column: 42
          }
        },
        loc: {
          start: {
            line: 482,
            column: 55
          },
          end: {
            line: 482,
            column: 86
          }
        },
        line: 482
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 484,
            column: 67
          },
          end: {
            line: 484,
            column: 68
          }
        },
        loc: {
          start: {
            line: 484,
            column: 87
          },
          end: {
            line: 490,
            column: 9
          }
        },
        line: 484
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 490,
            column: 17
          },
          end: {
            line: 490,
            column: 18
          }
        },
        loc: {
          start: {
            line: 490,
            column: 27
          },
          end: {
            line: 490,
            column: 42
          }
        },
        line: 490
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 504,
            column: 37
          },
          end: {
            line: 504,
            column: 38
          }
        },
        loc: {
          start: {
            line: 504,
            column: 43
          },
          end: {
            line: 509,
            column: 13
          }
        },
        line: 504
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 516,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        loc: {
          start: {
            line: 516,
            column: 57
          },
          end: {
            line: 559,
            column: 5
          }
        },
        line: 516
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 563,
            column: 4
          },
          end: {
            line: 563,
            column: 5
          }
        },
        loc: {
          start: {
            line: 563,
            column: 28
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 563
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 571,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        },
        loc: {
          start: {
            line: 571,
            column: 47
          },
          end: {
            line: 579,
            column: 5
          }
        },
        line: 571
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 583,
            column: 4
          },
          end: {
            line: 583,
            column: 5
          }
        },
        loc: {
          start: {
            line: 583,
            column: 30
          },
          end: {
            line: 585,
            column: 5
          }
        },
        line: 583
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 8
          },
          end: {
            line: 184,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "1": {
        loc: {
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 8
          },
          end: {
            line: 208,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "2": {
        loc: {
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 209,
            column: 8
          },
          end: {
            line: 212,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 209
      },
      "3": {
        loc: {
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 213,
            column: 8
          },
          end: {
            line: 216,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 213
      },
      "4": {
        loc: {
          start: {
            line: 247,
            column: 37
          },
          end: {
            line: 247,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 247,
            column: 59
          },
          end: {
            line: 247,
            column: 86
          }
        }, {
          start: {
            line: 247,
            column: 89
          },
          end: {
            line: 247,
            column: 90
          }
        }],
        line: 247
      },
      "5": {
        loc: {
          start: {
            line: 248,
            column: 39
          },
          end: {
            line: 248,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 61
          },
          end: {
            line: 248,
            column: 90
          }
        }, {
          start: {
            line: 248,
            column: 93
          },
          end: {
            line: 248,
            column: 94
          }
        }],
        line: 248
      },
      "6": {
        loc: {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 285,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "7": {
        loc: {
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 12
          },
          end: {
            line: 284,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "8": {
        loc: {
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 287,
            column: 8
          },
          end: {
            line: 301,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 287
      },
      "9": {
        loc: {
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 303,
            column: 8
          },
          end: {
            line: 317,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 303
      },
      "10": {
        loc: {
          start: {
            line: 352,
            column: 12
          },
          end: {
            line: 357,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 12
          },
          end: {
            line: 357,
            column: 13
          }
        }, {
          start: {
            line: 355,
            column: 17
          },
          end: {
            line: 357,
            column: 13
          }
        }],
        line: 352
      },
      "11": {
        loc: {
          start: {
            line: 355,
            column: 17
          },
          end: {
            line: 357,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 17
          },
          end: {
            line: 357,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "12": {
        loc: {
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 371,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 364,
            column: 12
          },
          end: {
            line: 371,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 364
      },
      "13": {
        loc: {
          start: {
            line: 381,
            column: 8
          },
          end: {
            line: 398,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 382,
            column: 12
          },
          end: {
            line: 384,
            column: 22
          }
        }, {
          start: {
            line: 385,
            column: 12
          },
          end: {
            line: 389,
            column: 22
          }
        }, {
          start: {
            line: 390,
            column: 12
          },
          end: {
            line: 392,
            column: 22
          }
        }, {
          start: {
            line: 393,
            column: 12
          },
          end: {
            line: 395,
            column: 22
          }
        }, {
          start: {
            line: 396,
            column: 12
          },
          end: {
            line: 397,
            column: 25
          }
        }],
        line: 381
      },
      "14": {
        loc: {
          start: {
            line: 404,
            column: 15
          },
          end: {
            line: 404,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 404,
            column: 15
          },
          end: {
            line: 404,
            column: 33
          }
        }, {
          start: {
            line: 404,
            column: 37
          },
          end: {
            line: 404,
            column: 38
          }
        }],
        line: 404
      },
      "15": {
        loc: {
          start: {
            line: 410,
            column: 21
          },
          end: {
            line: 410,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 410,
            column: 42
          },
          end: {
            line: 410,
            column: 43
          }
        }, {
          start: {
            line: 410,
            column: 46
          },
          end: {
            line: 410,
            column: 75
          }
        }],
        line: 410
      },
      "16": {
        loc: {
          start: {
            line: 410,
            column: 46
          },
          end: {
            line: 410,
            column: 75
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 410,
            column: 68
          },
          end: {
            line: 410,
            column: 70
          }
        }, {
          start: {
            line: 410,
            column: 73
          },
          end: {
            line: 410,
            column: 75
          }
        }],
        line: 410
      },
      "17": {
        loc: {
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 424,
            column: 8
          },
          end: {
            line: 433,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 424
      },
      "18": {
        loc: {
          start: {
            line: 442,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 442,
            column: 8
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: 445,
            column: 13
          },
          end: {
            line: 447,
            column: 9
          }
        }],
        line: 442
      },
      "19": {
        loc: {
          start: {
            line: 445,
            column: 13
          },
          end: {
            line: 447,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 445,
            column: 13
          },
          end: {
            line: 447,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 445
      },
      "20": {
        loc: {
          start: {
            line: 448,
            column: 27
          },
          end: {
            line: 448,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 448,
            column: 48
          },
          end: {
            line: 448,
            column: 49
          }
        }, {
          start: {
            line: 448,
            column: 52
          },
          end: {
            line: 448,
            column: 80
          }
        }],
        line: 448
      },
      "21": {
        loc: {
          start: {
            line: 448,
            column: 52
          },
          end: {
            line: 448,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 448,
            column: 74
          },
          end: {
            line: 448,
            column: 75
          }
        }, {
          start: {
            line: 448,
            column: 78
          },
          end: {
            line: 448,
            column: 80
          }
        }],
        line: 448
      },
      "22": {
        loc: {
          start: {
            line: 482,
            column: 55
          },
          end: {
            line: 482,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 482,
            column: 77
          },
          end: {
            line: 482,
            column: 80
          }
        }, {
          start: {
            line: 482,
            column: 83
          },
          end: {
            line: 482,
            column: 86
          }
        }],
        line: 482
      },
      "23": {
        loc: {
          start: {
            line: 482,
            column: 88
          },
          end: {
            line: 482,
            column: 158
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 482,
            column: 88
          },
          end: {
            line: 482,
            column: 100
          }
        }, {
          start: {
            line: 482,
            column: 104
          },
          end: {
            line: 482,
            column: 158
          }
        }],
        line: 482
      },
      "24": {
        loc: {
          start: {
            line: 487,
            column: 20
          },
          end: {
            line: 487,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 487,
            column: 20
          },
          end: {
            line: 487,
            column: 48
          }
        }, {
          start: {
            line: 487,
            column: 52
          },
          end: {
            line: 487,
            column: 53
          }
        }],
        line: 487
      },
      "25": {
        loc: {
          start: {
            line: 488,
            column: 24
          },
          end: {
            line: 488,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 488,
            column: 24
          },
          end: {
            line: 488,
            column: 56
          }
        }, {
          start: {
            line: 488,
            column: 60
          },
          end: {
            line: 488,
            column: 61
          }
        }],
        line: 488
      },
      "26": {
        loc: {
          start: {
            line: 529,
            column: 8
          },
          end: {
            line: 532,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 529,
            column: 8
          },
          end: {
            line: 532,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 529
      },
      "27": {
        loc: {
          start: {
            line: 533,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 533,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 533
      },
      "28": {
        loc: {
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 540,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 537,
            column: 8
          },
          end: {
            line: 540,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 537
      },
      "29": {
        loc: {
          start: {
            line: 542,
            column: 32
          },
          end: {
            line: 542,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 542,
            column: 32
          },
          end: {
            line: 542,
            column: 56
          }
        }, {
          start: {
            line: 542,
            column: 60
          },
          end: {
            line: 542,
            column: 61
          }
        }],
        line: 542
      },
      "30": {
        loc: {
          start: {
            line: 543,
            column: 37
          },
          end: {
            line: 543,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 543,
            column: 37
          },
          end: {
            line: 543,
            column: 66
          }
        }, {
          start: {
            line: 543,
            column: 70
          },
          end: {
            line: 543,
            column: 71
          }
        }],
        line: 543
      },
      "31": {
        loc: {
          start: {
            line: 544,
            column: 33
          },
          end: {
            line: 544,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 544,
            column: 33
          },
          end: {
            line: 544,
            column: 58
          }
        }, {
          start: {
            line: 544,
            column: 62
          },
          end: {
            line: 544,
            column: 63
          }
        }],
        line: 544
      },
      "32": {
        loc: {
          start: {
            line: 545,
            column: 28
          },
          end: {
            line: 545,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 545,
            column: 50
          },
          end: {
            line: 545,
            column: 96
          }
        }, {
          start: {
            line: 545,
            column: 99
          },
          end: {
            line: 545,
            column: 100
          }
        }],
        line: 545
      },
      "33": {
        loc: {
          start: {
            line: 546,
            column: 38
          },
          end: {
            line: 546,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 546,
            column: 65
          },
          end: {
            line: 546,
            column: 105
          }
        }, {
          start: {
            line: 546,
            column: 108
          },
          end: {
            line: 546,
            column: 109
          }
        }],
        line: 546
      },
      "34": {
        loc: {
          start: {
            line: 547,
            column: 31
          },
          end: {
            line: 547,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 547,
            column: 55
          },
          end: {
            line: 547,
            column: 103
          }
        }, {
          start: {
            line: 547,
            column: 106
          },
          end: {
            line: 547,
            column: 107
          }
        }],
        line: 547
      },
      "35": {
        loc: {
          start: {
            line: 578,
            column: 11
          },
          end: {
            line: 578,
            column: 94
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 578,
            column: 11
          },
          end: {
            line: 578,
            column: 42
          }
        }, {
          start: {
            line: 578,
            column: 46
          },
          end: {
            line: 578,
            column: 94
          }
        }],
        line: 578
      },
      "36": {
        loc: {
          start: {
            line: 578,
            column: 96
          },
          end: {
            line: 578,
            column: 161
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 578,
            column: 96
          },
          end: {
            line: 578,
            column: 118
          }
        }, {
          start: {
            line: 578,
            column: 122
          },
          end: {
            line: 578,
            column: 161
          }
        }],
        line: 578
      },
      "37": {
        loc: {
          start: {
            line: 578,
            column: 163
          },
          end: {
            line: 578,
            column: 230
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 578,
            column: 163
          },
          end: {
            line: 578,
            column: 186
          }
        }, {
          start: {
            line: 578,
            column: 190
          },
          end: {
            line: 578,
            column: 230
          }
        }],
        line: 578
      },
      "38": {
        loc: {
          start: {
            line: 578,
            column: 247
          },
          end: {
            line: 578,
            column: 318
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 578,
            column: 247
          },
          end: {
            line: 578,
            column: 272
          }
        }, {
          start: {
            line: 578,
            column: 276
          },
          end: {
            line: 578,
            column: 318
          }
        }],
        line: 578
      },
      "39": {
        loc: {
          start: {
            line: 578,
            column: 321
          },
          end: {
            line: 578,
            column: 396
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 578,
            column: 321
          },
          end: {
            line: 578,
            column: 348
          }
        }, {
          start: {
            line: 578,
            column: 352
          },
          end: {
            line: 578,
            column: 396
          }
        }],
        line: 578
      },
      "40": {
        loc: {
          start: {
            line: 578,
            column: 398
          },
          end: {
            line: 578,
            column: 467
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 578,
            column: 398
          },
          end: {
            line: 578,
            column: 422
          }
        }, {
          start: {
            line: 578,
            column: 426
          },
          end: {
            line: 578,
            column: 467
          }
        }],
        line: 578
      },
      "41": {
        loc: {
          start: {
            line: 578,
            column: 469
          },
          end: {
            line: 578,
            column: 536
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 578,
            column: 469
          },
          end: {
            line: 578,
            column: 492
          }
        }, {
          start: {
            line: 578,
            column: 496
          },
          end: {
            line: 578,
            column: 536
          }
        }],
        line: 578
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/CostTracker.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/CostTracker.ts"],
      sourcesContent: ["import { db } from '../database/connection';\nimport {\n  CostData,\n  ModelPricing,\n  CostSummary,\n  CostOptimizationRecommendation,\n  BudgetAlert,\n  CostPrediction,\n  UsageAnalytics,\n  CostOptimizationSettings,\n  ROICalculation\n} from '../types/costTracking';\n\n/**\n * Comprehensive Cost Tracking Service\n * Tracks token usage, calculates costs, provides optimization recommendations\n */\nexport class CostTracker {\n  private modelPricing: Map<string, ModelPricing> = new Map();\n  private optimizationSettings: CostOptimizationSettings;\n\n  constructor() {\n    this.optimizationSettings = {\n      enableAutoOptimization: true,\n      costThreshold: 10.0, // $10 threshold\n      tokenThreshold: 100000, // 100k tokens\n      modelPreferences: ['gpt-3.5-turbo', 'llama3'], // Preferred models for cost optimization\n      promptOptimization: true,\n      batchingEnabled: true,\n      cachingEnabled: true\n    };\n    \n    this.initializePricing();\n    this.initializeDatabase();\n  }\n\n  /**\n   * Initialize database tables for cost tracking\n   */\n  private initializeDatabase(): void {\n    console.log('Initializing cost tracking database...');\n    \n    // Cost tracking data table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS cost_tracking (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        execution_id TEXT NOT NULL,\n        model TEXT NOT NULL,\n        prompt_tokens INTEGER NOT NULL DEFAULT 0,\n        completion_tokens INTEGER NOT NULL DEFAULT 0,\n        total_tokens INTEGER NOT NULL DEFAULT 0,\n        cost_usd REAL NOT NULL DEFAULT 0,\n        execution_time_ms INTEGER NOT NULL DEFAULT 0,\n        test_case_id INTEGER,\n        prompt_card_id INTEGER,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Model pricing table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS model_pricing (\n        model TEXT PRIMARY KEY,\n        prompt_token_cost REAL NOT NULL,\n        completion_token_cost REAL NOT NULL,\n        context_window INTEGER NOT NULL,\n        last_updated DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Budget alerts table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS budget_alerts (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        type TEXT NOT NULL CHECK (type IN ('daily', 'weekly', 'monthly', 'total')),\n        threshold REAL NOT NULL,\n        current_amount REAL DEFAULT 0,\n        percentage_used REAL DEFAULT 0,\n        status TEXT DEFAULT 'active' CHECK (status IN ('active', 'triggered', 'exceeded')),\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        triggered_at DATETIME\n      )\n    `);\n\n    // Cost optimization settings table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS cost_optimization_settings (\n        id INTEGER PRIMARY KEY CHECK (id = 1),\n        enable_auto_optimization BOOLEAN DEFAULT 1,\n        cost_threshold REAL DEFAULT 10.0,\n        token_threshold INTEGER DEFAULT 100000,\n        model_preferences TEXT DEFAULT '[]',\n        prompt_optimization BOOLEAN DEFAULT 1,\n        batching_enabled BOOLEAN DEFAULT 1,\n        caching_enabled BOOLEAN DEFAULT 1,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create indexes for better performance\n    db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_execution_id ON cost_tracking(execution_id);\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_model ON cost_tracking(model);\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_created_at ON cost_tracking(created_at);\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_prompt_card_id ON cost_tracking(prompt_card_id);\n    `);\n\n    console.log('Cost tracking database initialized successfully');\n  }\n\n  /**\n   * Initialize model pricing data\n   */\n  private initializePricing(): void {\n    const defaultPricing: ModelPricing[] = [\n      {\n        model: 'gpt-4',\n        prompt_token_cost: 0.03, // $0.03 per 1k tokens\n        completion_token_cost: 0.06, // $0.06 per 1k tokens\n        context_window: 8192,\n        last_updated: new Date().toISOString()\n      },\n      {\n        model: 'gpt-4-turbo',\n        prompt_token_cost: 0.01, // $0.01 per 1k tokens\n        completion_token_cost: 0.03, // $0.03 per 1k tokens\n        context_window: 128000,\n        last_updated: new Date().toISOString()\n      },\n      {\n        model: 'gpt-3.5-turbo',\n        prompt_token_cost: 0.0015, // $0.0015 per 1k tokens\n        completion_token_cost: 0.002, // $0.002 per 1k tokens\n        context_window: 16385,\n        last_updated: new Date().toISOString()\n      },\n      {\n        model: 'llama3',\n        prompt_token_cost: 0.0, // Open source - no cost\n        completion_token_cost: 0.0,\n        context_window: 8192,\n        last_updated: new Date().toISOString()\n      },\n      {\n        model: 'claude-3-sonnet',\n        prompt_token_cost: 0.003, // $0.003 per 1k tokens\n        completion_token_cost: 0.015, // $0.015 per 1k tokens\n        context_window: 200000,\n        last_updated: new Date().toISOString()\n      }\n    ];\n\n    // Insert default pricing into database\n    const insertPricing = db.prepare(`\n      INSERT OR REPLACE INTO model_pricing \n      (model, prompt_token_cost, completion_token_cost, context_window, last_updated)\n      VALUES (?, ?, ?, ?, ?)\n    `);\n\n    for (const pricing of defaultPricing) {\n      insertPricing.run(\n        pricing.model,\n        pricing.prompt_token_cost,\n        pricing.completion_token_cost,\n        pricing.context_window,\n        pricing.last_updated\n      );\n      this.modelPricing.set(pricing.model, pricing);\n    }\n\n    console.log('Model pricing initialized');\n  }\n\n  /**\n   * Track token usage and calculate cost for an execution\n   */\n  public async trackUsage(\n    executionId: string,\n    model: string,\n    promptTokens: number,\n    completionTokens: number,\n    executionTimeMs: number,\n    testCaseId?: number,\n    promptCardId?: number\n  ): Promise<CostData> {\n    const totalTokens = promptTokens + completionTokens;\n    const cost = this.calculateCost(model, promptTokens, completionTokens);\n\n    const insertCost = db.prepare(`\n      INSERT INTO cost_tracking \n      (execution_id, model, prompt_tokens, completion_tokens, total_tokens, cost_usd, execution_time_ms, test_case_id, prompt_card_id)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const result = insertCost.run(\n      executionId,\n      model,\n      promptTokens,\n      completionTokens,\n      totalTokens,\n      cost,\n      executionTimeMs,\n      testCaseId,\n      promptCardId\n    );\n\n    const costData: CostData = {\n      id: result.lastInsertRowid as number,\n      execution_id: executionId,\n      model,\n      prompt_tokens: promptTokens,\n      completion_tokens: completionTokens,\n      total_tokens: totalTokens,\n      cost_usd: cost,\n      execution_time_ms: executionTimeMs,\n      test_case_id: testCaseId,\n      prompt_card_id: promptCardId,\n      created_at: new Date().toISOString()\n    };\n\n    // Check budget alerts\n    await this.checkBudgetAlerts();\n\n    return costData;\n  }\n\n  /**\n   * Calculate cost for given token usage\n   */\n  private calculateCost(model: string, promptTokens: number, completionTokens: number): number {\n    const pricing = this.modelPricing.get(model);\n    if (!pricing) {\n      console.warn(`No pricing found for model: ${model}, assuming zero cost`);\n      return 0;\n    }\n\n    const promptCost = (promptTokens / 1000) * pricing.prompt_token_cost;\n    const completionCost = (completionTokens / 1000) * pricing.completion_token_cost;\n    return promptCost + completionCost;\n  }\n\n  /**\n   * Get cost summary for a given time period\n   */\n  public async getCostSummary(\n    startDate?: string,\n    endDate?: string,\n    promptCardId?: number\n  ): Promise<CostSummary> {\n    let query = `\n      SELECT \n        model,\n        SUM(cost_usd) as total_cost,\n        SUM(total_tokens) as total_tokens,\n        SUM(prompt_tokens) as total_prompt_tokens,\n        SUM(completion_tokens) as total_completion_tokens,\n        COUNT(*) as total_executions\n      FROM cost_tracking\n      WHERE 1=1\n    `;\n\n    const params: any[] = [];\n\n    if (startDate) {\n      query += ` AND created_at >= ?`;\n      params.push(startDate);\n    }\n\n    if (endDate) {\n      query += ` AND created_at <= ?`;\n      params.push(endDate);\n    }\n\n    if (promptCardId) {\n      query += ` AND prompt_card_id = ?`;\n      params.push(promptCardId);\n    }\n\n    query += ` GROUP BY model`;\n\n    const results = db.prepare(query).all(...params);\n\n    const costByModel: Record<string, number> = {};\n    const tokensByModel: Record<string, number> = {};\n    const executionsByModel: Record<string, number> = {};\n\n    let totalCost = 0;\n    let totalTokens = 0;\n    let totalPromptTokens = 0;\n    let totalCompletionTokens = 0;\n    let totalExecutions = 0;\n\n    for (const result of results) {\n      const model = result.model;\n      const cost = result.total_cost;\n      const tokens = result.total_tokens;\n      const executions = result.total_executions;\n\n      costByModel[model] = cost;\n      tokensByModel[model] = tokens;\n      executionsByModel[model] = executions;\n\n      totalCost += cost;\n      totalTokens += tokens;\n      totalPromptTokens += result.total_prompt_tokens;\n      totalCompletionTokens += result.total_completion_tokens;\n      totalExecutions += executions;\n    }\n\n    return {\n      totalCost,\n      totalTokens,\n      totalPromptTokens,\n      totalCompletionTokens,\n      totalExecutions,\n      averageCostPerExecution: totalExecutions > 0 ? totalCost / totalExecutions : 0,\n      averageTokensPerExecution: totalExecutions > 0 ? totalTokens / totalExecutions : 0,\n      costByModel,\n      tokensByModel,\n      executionsByModel\n    };\n  }\n\n  /**\n   * Generate cost optimization recommendations\n   */\n  public async generateOptimizationRecommendations(\n    startDate?: string,\n    endDate?: string\n  ): Promise<CostOptimizationRecommendation[]> {\n    const recommendations: CostOptimizationRecommendation[] = [];\n    const summary = await this.getCostSummary(startDate, endDate);\n\n    // Model optimization recommendations\n    const sortedModels = Object.entries(summary.costByModel)\n      .sort(([,a], [,b]) => b - a);\n\n    if (sortedModels.length > 1) {\n      const mostExpensiveModel = sortedModels[0][0];\n      const mostExpensiveCost = sortedModels[0][1];\n      const cheapestModel = sortedModels[sortedModels.length - 1][0];\n      const cheapestCost = sortedModels[sortedModels.length - 1][1];\n\n      if (mostExpensiveCost > cheapestCost * 2) {\n        recommendations.push({\n          type: 'model_suggestion',\n          title: `Consider switching from ${mostExpensiveModel} to ${cheapestModel}`,\n          description: `${mostExpensiveModel} accounts for $${mostExpensiveCost.toFixed(2)} of your costs. Consider using ${cheapestModel} for appropriate tasks.`,\n          estimatedSavings: mostExpensiveCost - cheapestCost,\n          estimatedSavingsPercentage: ((mostExpensiveCost - cheapestCost) / mostExpensiveCost) * 100,\n          priority: 'high',\n          actionRequired: `Review test cases using ${mostExpensiveModel} and evaluate if ${cheapestModel} would be sufficient.`,\n          metadata: {\n            currentModel: mostExpensiveModel,\n            suggestedModel: cheapestModel,\n            currentCost: mostExpensiveCost,\n            suggestedCost: cheapestCost\n          }\n        });\n      }\n    }\n\n    // High token usage recommendations\n    if (summary.averageTokensPerExecution > 2000) {\n      recommendations.push({\n        type: 'token_reduction',\n        title: 'High token usage detected',\n        description: `Average token usage is ${summary.averageTokensPerExecution.toFixed(0)} tokens per execution. Consider optimizing prompts.`,\n        estimatedSavings: summary.totalCost * 0.3, // Estimate 30% savings\n        estimatedSavingsPercentage: 30,\n        priority: 'medium',\n        actionRequired: 'Review and optimize prompt templates to reduce token usage.',\n        metadata: {\n          averageTokens: summary.averageTokensPerExecution,\n          totalTokens: summary.totalTokens\n        }\n      });\n    }\n\n    // Execution frequency recommendations\n    if (summary.totalExecutions > 1000) {\n      recommendations.push({\n        type: 'execution_reduction',\n        title: 'High execution frequency',\n        description: `${summary.totalExecutions} executions recorded. Consider implementing caching or batching.`,\n        estimatedSavings: summary.totalCost * 0.2, // Estimate 20% savings\n        estimatedSavingsPercentage: 20,\n        priority: 'low',\n        actionRequired: 'Implement result caching and batch processing for similar test cases.',\n        metadata: {\n          totalExecutions: summary.totalExecutions,\n          avgCostPerExecution: summary.averageCostPerExecution\n        }\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Create or update budget alert\n   */\n  public async createBudgetAlert(\n    name: string,\n    type: 'daily' | 'weekly' | 'monthly' | 'total',\n    threshold: number\n  ): Promise<BudgetAlert> {\n    const insertAlert = db.prepare(`\n      INSERT INTO budget_alerts (name, type, threshold)\n      VALUES (?, ?, ?)\n    `);\n\n    const result = insertAlert.run(name, type, threshold);\n    \n    return {\n      id: result.lastInsertRowid as number,\n      name,\n      type,\n      threshold,\n      current_amount: 0,\n      percentage_used: 0,\n      status: 'active',\n      created_at: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Check budget alerts and update their status\n   */\n  public async checkBudgetAlerts(): Promise<BudgetAlert[]> {\n    const alerts = db.prepare(`\n      SELECT * FROM budget_alerts WHERE status IN ('active', 'triggered')\n    `).all();\n\n    const triggeredAlerts: BudgetAlert[] = [];\n\n    for (const alert of alerts) {\n      const currentAmount = await this.getCurrentSpendingForAlert(alert.type);\n      const percentageUsed = (currentAmount / alert.threshold) * 100;\n\n      let newStatus = alert.status;\n      if (percentageUsed >= 100) {\n        newStatus = 'exceeded';\n      } else if (percentageUsed >= 80) {\n        newStatus = 'triggered';\n      }\n\n      // Update alert with current amounts\n      db.prepare(`\n        UPDATE budget_alerts \n        SET current_amount = ?, percentage_used = ?, status = ?\n        WHERE id = ?\n      `).run(currentAmount, percentageUsed, newStatus, alert.id);\n\n      if (newStatus !== alert.status) {\n        triggeredAlerts.push({\n          ...alert,\n          current_amount: currentAmount,\n          percentage_used: percentageUsed,\n          status: newStatus as any\n        });\n      }\n    }\n\n    return triggeredAlerts;\n  }\n\n  /**\n   * Get current spending for alert period\n   */\n  private async getCurrentSpendingForAlert(type: string): Promise<number> {\n    let startDate: string;\n    const now = new Date();\n\n    switch (type) {\n      case 'daily':\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate()).toISOString();\n        break;\n      case 'weekly':\n        const weekStart = new Date(now);\n        weekStart.setDate(now.getDate() - now.getDay());\n        startDate = weekStart.toISOString();\n        break;\n      case 'monthly':\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\n        break;\n      case 'total':\n        startDate = '1970-01-01T00:00:00.000Z';\n        break;\n      default:\n        return 0;\n    }\n\n    const result = db.prepare(`\n      SELECT SUM(cost_usd) as total_cost \n      FROM cost_tracking \n      WHERE created_at >= ?\n    `).get(startDate);\n\n    return result?.total_cost || 0;\n  }\n\n  /**\n   * Generate cost predictions based on historical data\n   */\n  public async generateCostPrediction(\n    period: 'daily' | 'weekly' | 'monthly'\n  ): Promise<CostPrediction> {\n    const days = period === 'daily' ? 7 : period === 'weekly' ? 28 : 90;\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const historicalData = db.prepare(`\n      SELECT \n        DATE(created_at) as date,\n        SUM(cost_usd) as daily_cost,\n        SUM(total_tokens) as daily_tokens,\n        COUNT(*) as daily_executions\n      FROM cost_tracking\n      WHERE created_at >= ?\n      GROUP BY DATE(created_at)\n      ORDER BY date\n    `).all(startDate.toISOString());\n\n    if (historicalData.length < 3) {\n      return {\n        period,\n        predictedCost: 0,\n        confidence: 0,\n        basedOnDays: historicalData.length,\n        trend: 'stable',\n        factors: ['Insufficient historical data']\n      };\n    }\n\n    const costs = historicalData.map(d => d.daily_cost);\n    const avgDailyCost = costs.reduce((a, b) => a + b, 0) / costs.length;\n    \n    // Simple trend analysis\n    const recentCosts = costs.slice(-7);\n    const earlierCosts = costs.slice(0, 7);\n    const recentAvg = recentCosts.reduce((a, b) => a + b, 0) / recentCosts.length;\n    const earlierAvg = earlierCosts.reduce((a, b) => a + b, 0) / earlierCosts.length;\n\n    let trend: 'increasing' | 'decreasing' | 'stable' = 'stable';\n    if (recentAvg > earlierAvg * 1.1) {\n      trend = 'increasing';\n    } else if (recentAvg < earlierAvg * 0.9) {\n      trend = 'decreasing';\n    }\n\n    const multiplier = period === 'daily' ? 1 : period === 'weekly' ? 7 : 30;\n    const predictedCost = avgDailyCost * multiplier;\n\n    return {\n      period,\n      predictedCost,\n      confidence: Math.min(historicalData.length / 30, 1), // Higher confidence with more data\n      basedOnDays: historicalData.length,\n      trend,\n      factors: [\n        `Based on ${historicalData.length} days of historical data`,\n        `Average daily cost: $${avgDailyCost.toFixed(2)}`,\n        `Trend: ${trend}`\n      ]\n    };\n  }\n\n  /**\n   * Get usage analytics for a time period\n   */\n  public async getUsageAnalytics(\n    startDate: string,\n    endDate: string\n  ): Promise<UsageAnalytics> {\n    const summary = await this.getCostSummary(startDate, endDate);\n    \n    // Get daily trend data\n    const trendData = db.prepare(`\n      SELECT \n        DATE(created_at) as date,\n        SUM(cost_usd) as cost,\n        SUM(total_tokens) as tokens,\n        COUNT(*) as executions\n      FROM cost_tracking\n      WHERE created_at >= ? AND created_at <= ?\n      GROUP BY DATE(created_at)\n      ORDER BY date\n    `).all(startDate, endDate);\n\n    const dayCount = Math.max(1, Math.ceil((new Date(endDate).getTime() - new Date(startDate).getTime()) / (24 * 60 * 60 * 1000)));\n    \n    // Find peak usage day\n    const peakDay = trendData.reduce((max, day) => \n      day.cost > max.cost ? day : max, \n      trendData[0] || { date: startDate, cost: 0, tokens: 0, executions: 0 }\n    );\n\n    // Model usage breakdown\n    const modelUsage = Object.entries(summary.costByModel).map(([model, cost]) => ({\n      model,\n      cost,\n      tokens: summary.tokensByModel[model] || 0,\n      executions: summary.executionsByModel[model] || 0,\n      percentage: (cost / summary.totalCost) * 100\n    })).sort((a, b) => b.cost - a.cost);\n\n    return {\n      period: {\n        start: startDate,\n        end: endDate\n      },\n      totalCost: summary.totalCost,\n      totalTokens: summary.totalTokens,\n      totalExecutions: summary.totalExecutions,\n      averageCostPerDay: summary.totalCost / dayCount,\n      averageTokensPerDay: summary.totalTokens / dayCount,\n      averageExecutionsPerDay: summary.totalExecutions / dayCount,\n      peakUsageDay: peakDay.date,\n      peakUsageCost: peakDay.cost,\n      costTrend: trendData.map(d => ({\n        date: d.date,\n        cost: d.cost,\n        tokens: d.tokens,\n        executions: d.executions\n      })),\n      modelUsage\n    };\n  }\n\n  /**\n   * Calculate ROI for test executions\n   */\n  public async calculateROI(\n    startDate?: string,\n    endDate?: string,\n    promptCardId?: number\n  ): Promise<ROICalculation> {\n    const summary = await this.getCostSummary(startDate, endDate, promptCardId);\n    \n    // Get success/failure statistics\n    let query = `\n      SELECT \n        COUNT(*) as total_executions,\n        SUM(CASE WHEN passed = 1 THEN 1 ELSE 0 END) as successful_executions,\n        SUM(CASE WHEN passed = 0 THEN 1 ELSE 0 END) as failed_executions\n      FROM test_results tr\n      JOIN cost_tracking ct ON tr.execution_id = ct.execution_id\n      WHERE 1=1\n    `;\n\n    const params: any[] = [];\n\n    if (startDate) {\n      query += ` AND ct.created_at >= ?`;\n      params.push(startDate);\n    }\n\n    if (endDate) {\n      query += ` AND ct.created_at <= ?`;\n      params.push(endDate);\n    }\n\n    if (promptCardId) {\n      query += ` AND ct.prompt_card_id = ?`;\n      params.push(promptCardId);\n    }\n\n    const result = db.prepare(query).get(...params);\n    \n    const totalExecutions = result?.total_executions || 0;\n    const successfulExecutions = result?.successful_executions || 0;\n    const failedExecutions = result?.failed_executions || 0;\n    const successRate = totalExecutions > 0 ? (successfulExecutions / totalExecutions) * 100 : 0;\n    const averageCostPerSuccess = successfulExecutions > 0 ? summary.totalCost / successfulExecutions : 0;\n    const costEfficiency = summary.totalCost > 0 ? (successfulExecutions / summary.totalCost) * 100 : 0;\n\n    const recommendations = await this.generateOptimizationRecommendations(startDate, endDate);\n\n    return {\n      totalCost: summary.totalCost,\n      totalExecutions,\n      successfulExecutions,\n      failedExecutions,\n      averageCostPerSuccess,\n      successRate,\n      costEfficiency,\n      recommendations\n    };\n  }\n\n  /**\n   * Get all budget alerts\n   */\n  public async getBudgetAlerts(): Promise<BudgetAlert[]> {\n    return db.prepare(`\n      SELECT * FROM budget_alerts ORDER BY created_at DESC\n    `).all();\n  }\n\n  /**\n   * Update optimization settings\n   */\n  public async updateOptimizationSettings(settings: Partial<CostOptimizationSettings>): Promise<void> {\n    this.optimizationSettings = { ...this.optimizationSettings, ...settings };\n    \n    db.prepare(`\n      INSERT OR REPLACE INTO cost_optimization_settings \n      (id, enable_auto_optimization, cost_threshold, token_threshold, model_preferences, \n       prompt_optimization, batching_enabled, caching_enabled, updated_at)\n      VALUES (1, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n    `).run(\n      settings.enableAutoOptimization ?? this.optimizationSettings.enableAutoOptimization,\n      settings.costThreshold ?? this.optimizationSettings.costThreshold,\n      settings.tokenThreshold ?? this.optimizationSettings.tokenThreshold,\n      JSON.stringify(settings.modelPreferences ?? this.optimizationSettings.modelPreferences),\n      settings.promptOptimization ?? this.optimizationSettings.promptOptimization,\n      settings.batchingEnabled ?? this.optimizationSettings.batchingEnabled,\n      settings.cachingEnabled ?? this.optimizationSettings.cachingEnabled\n    );\n  }\n\n  /**\n   * Get optimization settings\n   */\n  public getOptimizationSettings(): CostOptimizationSettings {\n    return this.optimizationSettings;\n  }\n}\n\nexport const costTracker = new CostTracker();"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "6807025c3ea93b0d4348cd74f7fd95a902bf4823"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2kugt2zsg3 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2kugt2zsg3();
cov_2kugt2zsg3().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2kugt2zsg3().s[1]++;
exports.costTracker = exports.CostTracker = void 0;
const connection_1 =
/* istanbul ignore next */
(cov_2kugt2zsg3().s[2]++, require("../database/connection"));
/**
 * Comprehensive Cost Tracking Service
 * Tracks token usage, calculates costs, provides optimization recommendations
 */
class CostTracker {
  constructor() {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[0]++;
    cov_2kugt2zsg3().s[3]++;
    this.modelPricing = new Map();
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[4]++;
    this.optimizationSettings = {
      enableAutoOptimization: true,
      costThreshold: 10.0,
      // $10 threshold
      tokenThreshold: 100000,
      // 100k tokens
      modelPreferences: ['gpt-3.5-turbo', 'llama3'],
      // Preferred models for cost optimization
      promptOptimization: true,
      batchingEnabled: true,
      cachingEnabled: true
    };
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[5]++;
    this.initializePricing();
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[6]++;
    this.initializeDatabase();
  }
  /**
   * Initialize database tables for cost tracking
   */
  initializeDatabase() {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[1]++;
    cov_2kugt2zsg3().s[7]++;
    console.log('Initializing cost tracking database...');
    // Cost tracking data table
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[8]++;
    connection_1.db.exec(`
      CREATE TABLE IF NOT EXISTS cost_tracking (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        execution_id TEXT NOT NULL,
        model TEXT NOT NULL,
        prompt_tokens INTEGER NOT NULL DEFAULT 0,
        completion_tokens INTEGER NOT NULL DEFAULT 0,
        total_tokens INTEGER NOT NULL DEFAULT 0,
        cost_usd REAL NOT NULL DEFAULT 0,
        execution_time_ms INTEGER NOT NULL DEFAULT 0,
        test_case_id INTEGER,
        prompt_card_id INTEGER,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE,
        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE
      )
    `);
    // Model pricing table
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[9]++;
    connection_1.db.exec(`
      CREATE TABLE IF NOT EXISTS model_pricing (
        model TEXT PRIMARY KEY,
        prompt_token_cost REAL NOT NULL,
        completion_token_cost REAL NOT NULL,
        context_window INTEGER NOT NULL,
        last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    // Budget alerts table
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[10]++;
    connection_1.db.exec(`
      CREATE TABLE IF NOT EXISTS budget_alerts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        type TEXT NOT NULL CHECK (type IN ('daily', 'weekly', 'monthly', 'total')),
        threshold REAL NOT NULL,
        current_amount REAL DEFAULT 0,
        percentage_used REAL DEFAULT 0,
        status TEXT DEFAULT 'active' CHECK (status IN ('active', 'triggered', 'exceeded')),
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        triggered_at DATETIME
      )
    `);
    // Cost optimization settings table
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[11]++;
    connection_1.db.exec(`
      CREATE TABLE IF NOT EXISTS cost_optimization_settings (
        id INTEGER PRIMARY KEY CHECK (id = 1),
        enable_auto_optimization BOOLEAN DEFAULT 1,
        cost_threshold REAL DEFAULT 10.0,
        token_threshold INTEGER DEFAULT 100000,
        model_preferences TEXT DEFAULT '[]',
        prompt_optimization BOOLEAN DEFAULT 1,
        batching_enabled BOOLEAN DEFAULT 1,
        caching_enabled BOOLEAN DEFAULT 1,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    // Create indexes for better performance
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[12]++;
    connection_1.db.exec(`
      CREATE INDEX IF NOT EXISTS idx_cost_tracking_execution_id ON cost_tracking(execution_id);
      CREATE INDEX IF NOT EXISTS idx_cost_tracking_model ON cost_tracking(model);
      CREATE INDEX IF NOT EXISTS idx_cost_tracking_created_at ON cost_tracking(created_at);
      CREATE INDEX IF NOT EXISTS idx_cost_tracking_prompt_card_id ON cost_tracking(prompt_card_id);
    `);
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[13]++;
    console.log('Cost tracking database initialized successfully');
  }
  /**
   * Initialize model pricing data
   */
  initializePricing() {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[2]++;
    const defaultPricing =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[14]++, [{
      model: 'gpt-4',
      prompt_token_cost: 0.03,
      // $0.03 per 1k tokens
      completion_token_cost: 0.06,
      // $0.06 per 1k tokens
      context_window: 8192,
      last_updated: new Date().toISOString()
    }, {
      model: 'gpt-4-turbo',
      prompt_token_cost: 0.01,
      // $0.01 per 1k tokens
      completion_token_cost: 0.03,
      // $0.03 per 1k tokens
      context_window: 128000,
      last_updated: new Date().toISOString()
    }, {
      model: 'gpt-3.5-turbo',
      prompt_token_cost: 0.0015,
      // $0.0015 per 1k tokens
      completion_token_cost: 0.002,
      // $0.002 per 1k tokens
      context_window: 16385,
      last_updated: new Date().toISOString()
    }, {
      model: 'llama3',
      prompt_token_cost: 0.0,
      // Open source - no cost
      completion_token_cost: 0.0,
      context_window: 8192,
      last_updated: new Date().toISOString()
    }, {
      model: 'claude-3-sonnet',
      prompt_token_cost: 0.003,
      // $0.003 per 1k tokens
      completion_token_cost: 0.015,
      // $0.015 per 1k tokens
      context_window: 200000,
      last_updated: new Date().toISOString()
    }]);
    // Insert default pricing into database
    const insertPricing =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[15]++, connection_1.db.prepare(`
      INSERT OR REPLACE INTO model_pricing 
      (model, prompt_token_cost, completion_token_cost, context_window, last_updated)
      VALUES (?, ?, ?, ?, ?)
    `));
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[16]++;
    for (const pricing of defaultPricing) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[17]++;
      insertPricing.run(pricing.model, pricing.prompt_token_cost, pricing.completion_token_cost, pricing.context_window, pricing.last_updated);
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[18]++;
      this.modelPricing.set(pricing.model, pricing);
    }
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[19]++;
    console.log('Model pricing initialized');
  }
  /**
   * Track token usage and calculate cost for an execution
   */
  async trackUsage(executionId, model, promptTokens, completionTokens, executionTimeMs, testCaseId, promptCardId) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[3]++;
    const totalTokens =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[20]++, promptTokens + completionTokens);
    const cost =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[21]++, this.calculateCost(model, promptTokens, completionTokens));
    const insertCost =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[22]++, connection_1.db.prepare(`
      INSERT INTO cost_tracking 
      (execution_id, model, prompt_tokens, completion_tokens, total_tokens, cost_usd, execution_time_ms, test_case_id, prompt_card_id)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `));
    const result =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[23]++, insertCost.run(executionId, model, promptTokens, completionTokens, totalTokens, cost, executionTimeMs, testCaseId, promptCardId));
    const costData =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[24]++, {
      id: result.lastInsertRowid,
      execution_id: executionId,
      model,
      prompt_tokens: promptTokens,
      completion_tokens: completionTokens,
      total_tokens: totalTokens,
      cost_usd: cost,
      execution_time_ms: executionTimeMs,
      test_case_id: testCaseId,
      prompt_card_id: promptCardId,
      created_at: new Date().toISOString()
    });
    // Check budget alerts
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[25]++;
    await this.checkBudgetAlerts();
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[26]++;
    return costData;
  }
  /**
   * Calculate cost for given token usage
   */
  calculateCost(model, promptTokens, completionTokens) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[4]++;
    const pricing =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[27]++, this.modelPricing.get(model));
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[28]++;
    if (!pricing) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[0][0]++;
      cov_2kugt2zsg3().s[29]++;
      console.warn(`No pricing found for model: ${model}, assuming zero cost`);
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[30]++;
      return 0;
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[0][1]++;
    }
    const promptCost =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[31]++, promptTokens / 1000 * pricing.prompt_token_cost);
    const completionCost =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[32]++, completionTokens / 1000 * pricing.completion_token_cost);
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[33]++;
    return promptCost + completionCost;
  }
  /**
   * Get cost summary for a given time period
   */
  async getCostSummary(startDate, endDate, promptCardId) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[5]++;
    let query =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[34]++, `
      SELECT 
        model,
        SUM(cost_usd) as total_cost,
        SUM(total_tokens) as total_tokens,
        SUM(prompt_tokens) as total_prompt_tokens,
        SUM(completion_tokens) as total_completion_tokens,
        COUNT(*) as total_executions
      FROM cost_tracking
      WHERE 1=1
    `);
    const params =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[35]++, []);
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[36]++;
    if (startDate) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[1][0]++;
      cov_2kugt2zsg3().s[37]++;
      query += ` AND created_at >= ?`;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[38]++;
      params.push(startDate);
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[1][1]++;
    }
    cov_2kugt2zsg3().s[39]++;
    if (endDate) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[2][0]++;
      cov_2kugt2zsg3().s[40]++;
      query += ` AND created_at <= ?`;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[41]++;
      params.push(endDate);
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[2][1]++;
    }
    cov_2kugt2zsg3().s[42]++;
    if (promptCardId) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[3][0]++;
      cov_2kugt2zsg3().s[43]++;
      query += ` AND prompt_card_id = ?`;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[44]++;
      params.push(promptCardId);
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[3][1]++;
    }
    cov_2kugt2zsg3().s[45]++;
    query += ` GROUP BY model`;
    const results =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[46]++, connection_1.db.prepare(query).all(...params));
    const costByModel =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[47]++, {});
    const tokensByModel =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[48]++, {});
    const executionsByModel =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[49]++, {});
    let totalCost =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[50]++, 0);
    let totalTokens =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[51]++, 0);
    let totalPromptTokens =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[52]++, 0);
    let totalCompletionTokens =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[53]++, 0);
    let totalExecutions =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[54]++, 0);
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[55]++;
    for (const result of results) {
      const model =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[56]++, result.model);
      const cost =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[57]++, result.total_cost);
      const tokens =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[58]++, result.total_tokens);
      const executions =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[59]++, result.total_executions);
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[60]++;
      costByModel[model] = cost;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[61]++;
      tokensByModel[model] = tokens;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[62]++;
      executionsByModel[model] = executions;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[63]++;
      totalCost += cost;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[64]++;
      totalTokens += tokens;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[65]++;
      totalPromptTokens += result.total_prompt_tokens;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[66]++;
      totalCompletionTokens += result.total_completion_tokens;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[67]++;
      totalExecutions += executions;
    }
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[68]++;
    return {
      totalCost,
      totalTokens,
      totalPromptTokens,
      totalCompletionTokens,
      totalExecutions,
      averageCostPerExecution: totalExecutions > 0 ?
      /* istanbul ignore next */
      (cov_2kugt2zsg3().b[4][0]++, totalCost / totalExecutions) :
      /* istanbul ignore next */
      (cov_2kugt2zsg3().b[4][1]++, 0),
      averageTokensPerExecution: totalExecutions > 0 ?
      /* istanbul ignore next */
      (cov_2kugt2zsg3().b[5][0]++, totalTokens / totalExecutions) :
      /* istanbul ignore next */
      (cov_2kugt2zsg3().b[5][1]++, 0),
      costByModel,
      tokensByModel,
      executionsByModel
    };
  }
  /**
   * Generate cost optimization recommendations
   */
  async generateOptimizationRecommendations(startDate, endDate) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[6]++;
    const recommendations =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[69]++, []);
    const summary =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[70]++, await this.getCostSummary(startDate, endDate));
    // Model optimization recommendations
    const sortedModels =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[71]++, Object.entries(summary.costByModel).sort(([, a], [, b]) => {
      /* istanbul ignore next */
      cov_2kugt2zsg3().f[7]++;
      cov_2kugt2zsg3().s[72]++;
      return b - a;
    }));
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[73]++;
    if (sortedModels.length > 1) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[6][0]++;
      const mostExpensiveModel =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[74]++, sortedModels[0][0]);
      const mostExpensiveCost =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[75]++, sortedModels[0][1]);
      const cheapestModel =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[76]++, sortedModels[sortedModels.length - 1][0]);
      const cheapestCost =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[77]++, sortedModels[sortedModels.length - 1][1]);
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[78]++;
      if (mostExpensiveCost > cheapestCost * 2) {
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[7][0]++;
        cov_2kugt2zsg3().s[79]++;
        recommendations.push({
          type: 'model_suggestion',
          title: `Consider switching from ${mostExpensiveModel} to ${cheapestModel}`,
          description: `${mostExpensiveModel} accounts for $${mostExpensiveCost.toFixed(2)} of your costs. Consider using ${cheapestModel} for appropriate tasks.`,
          estimatedSavings: mostExpensiveCost - cheapestCost,
          estimatedSavingsPercentage: (mostExpensiveCost - cheapestCost) / mostExpensiveCost * 100,
          priority: 'high',
          actionRequired: `Review test cases using ${mostExpensiveModel} and evaluate if ${cheapestModel} would be sufficient.`,
          metadata: {
            currentModel: mostExpensiveModel,
            suggestedModel: cheapestModel,
            currentCost: mostExpensiveCost,
            suggestedCost: cheapestCost
          }
        });
      } else
      /* istanbul ignore next */
      {
        cov_2kugt2zsg3().b[7][1]++;
      }
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[6][1]++;
    }
    // High token usage recommendations
    cov_2kugt2zsg3().s[80]++;
    if (summary.averageTokensPerExecution > 2000) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[8][0]++;
      cov_2kugt2zsg3().s[81]++;
      recommendations.push({
        type: 'token_reduction',
        title: 'High token usage detected',
        description: `Average token usage is ${summary.averageTokensPerExecution.toFixed(0)} tokens per execution. Consider optimizing prompts.`,
        estimatedSavings: summary.totalCost * 0.3,
        // Estimate 30% savings
        estimatedSavingsPercentage: 30,
        priority: 'medium',
        actionRequired: 'Review and optimize prompt templates to reduce token usage.',
        metadata: {
          averageTokens: summary.averageTokensPerExecution,
          totalTokens: summary.totalTokens
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[8][1]++;
    }
    // Execution frequency recommendations
    cov_2kugt2zsg3().s[82]++;
    if (summary.totalExecutions > 1000) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[9][0]++;
      cov_2kugt2zsg3().s[83]++;
      recommendations.push({
        type: 'execution_reduction',
        title: 'High execution frequency',
        description: `${summary.totalExecutions} executions recorded. Consider implementing caching or batching.`,
        estimatedSavings: summary.totalCost * 0.2,
        // Estimate 20% savings
        estimatedSavingsPercentage: 20,
        priority: 'low',
        actionRequired: 'Implement result caching and batch processing for similar test cases.',
        metadata: {
          totalExecutions: summary.totalExecutions,
          avgCostPerExecution: summary.averageCostPerExecution
        }
      });
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[9][1]++;
    }
    cov_2kugt2zsg3().s[84]++;
    return recommendations;
  }
  /**
   * Create or update budget alert
   */
  async createBudgetAlert(name, type, threshold) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[8]++;
    const insertAlert =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[85]++, connection_1.db.prepare(`
      INSERT INTO budget_alerts (name, type, threshold)
      VALUES (?, ?, ?)
    `));
    const result =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[86]++, insertAlert.run(name, type, threshold));
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[87]++;
    return {
      id: result.lastInsertRowid,
      name,
      type,
      threshold,
      current_amount: 0,
      percentage_used: 0,
      status: 'active',
      created_at: new Date().toISOString()
    };
  }
  /**
   * Check budget alerts and update their status
   */
  async checkBudgetAlerts() {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[9]++;
    const alerts =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[88]++, connection_1.db.prepare(`
      SELECT * FROM budget_alerts WHERE status IN ('active', 'triggered')
    `).all());
    const triggeredAlerts =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[89]++, []);
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[90]++;
    for (const alert of alerts) {
      const currentAmount =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[91]++, await this.getCurrentSpendingForAlert(alert.type));
      const percentageUsed =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[92]++, currentAmount / alert.threshold * 100);
      let newStatus =
      /* istanbul ignore next */
      (cov_2kugt2zsg3().s[93]++, alert.status);
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[94]++;
      if (percentageUsed >= 100) {
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[10][0]++;
        cov_2kugt2zsg3().s[95]++;
        newStatus = 'exceeded';
      } else {
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[10][1]++;
        cov_2kugt2zsg3().s[96]++;
        if (percentageUsed >= 80) {
          /* istanbul ignore next */
          cov_2kugt2zsg3().b[11][0]++;
          cov_2kugt2zsg3().s[97]++;
          newStatus = 'triggered';
        } else
        /* istanbul ignore next */
        {
          cov_2kugt2zsg3().b[11][1]++;
        }
      }
      // Update alert with current amounts
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[98]++;
      connection_1.db.prepare(`
        UPDATE budget_alerts 
        SET current_amount = ?, percentage_used = ?, status = ?
        WHERE id = ?
      `).run(currentAmount, percentageUsed, newStatus, alert.id);
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[99]++;
      if (newStatus !== alert.status) {
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[12][0]++;
        cov_2kugt2zsg3().s[100]++;
        triggeredAlerts.push({
          ...alert,
          current_amount: currentAmount,
          percentage_used: percentageUsed,
          status: newStatus
        });
      } else
      /* istanbul ignore next */
      {
        cov_2kugt2zsg3().b[12][1]++;
      }
    }
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[101]++;
    return triggeredAlerts;
  }
  /**
   * Get current spending for alert period
   */
  async getCurrentSpendingForAlert(type) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[10]++;
    let startDate;
    const now =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[102]++, new Date());
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[103]++;
    switch (type) {
      case 'daily':
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[13][0]++;
        cov_2kugt2zsg3().s[104]++;
        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate()).toISOString();
        /* istanbul ignore next */
        cov_2kugt2zsg3().s[105]++;
        break;
      case 'weekly':
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[13][1]++;
        const weekStart =
        /* istanbul ignore next */
        (cov_2kugt2zsg3().s[106]++, new Date(now));
        /* istanbul ignore next */
        cov_2kugt2zsg3().s[107]++;
        weekStart.setDate(now.getDate() - now.getDay());
        /* istanbul ignore next */
        cov_2kugt2zsg3().s[108]++;
        startDate = weekStart.toISOString();
        /* istanbul ignore next */
        cov_2kugt2zsg3().s[109]++;
        break;
      case 'monthly':
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[13][2]++;
        cov_2kugt2zsg3().s[110]++;
        startDate = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();
        /* istanbul ignore next */
        cov_2kugt2zsg3().s[111]++;
        break;
      case 'total':
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[13][3]++;
        cov_2kugt2zsg3().s[112]++;
        startDate = '1970-01-01T00:00:00.000Z';
        /* istanbul ignore next */
        cov_2kugt2zsg3().s[113]++;
        break;
      default:
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[13][4]++;
        cov_2kugt2zsg3().s[114]++;
        return 0;
    }
    const result =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[115]++, connection_1.db.prepare(`
      SELECT SUM(cost_usd) as total_cost 
      FROM cost_tracking 
      WHERE created_at >= ?
    `).get(startDate));
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[116]++;
    return /* istanbul ignore next */(cov_2kugt2zsg3().b[14][0]++, result?.total_cost) ||
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[14][1]++, 0);
  }
  /**
   * Generate cost predictions based on historical data
   */
  async generateCostPrediction(period) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[11]++;
    const days =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[117]++, period === 'daily' ?
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[15][0]++, 7) :
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[15][1]++, period === 'weekly' ?
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[16][0]++, 28) :
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[16][1]++, 90)));
    const startDate =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[118]++, new Date());
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[119]++;
    startDate.setDate(startDate.getDate() - days);
    const historicalData =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[120]++, connection_1.db.prepare(`
      SELECT 
        DATE(created_at) as date,
        SUM(cost_usd) as daily_cost,
        SUM(total_tokens) as daily_tokens,
        COUNT(*) as daily_executions
      FROM cost_tracking
      WHERE created_at >= ?
      GROUP BY DATE(created_at)
      ORDER BY date
    `).all(startDate.toISOString()));
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[121]++;
    if (historicalData.length < 3) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[17][0]++;
      cov_2kugt2zsg3().s[122]++;
      return {
        period,
        predictedCost: 0,
        confidence: 0,
        basedOnDays: historicalData.length,
        trend: 'stable',
        factors: ['Insufficient historical data']
      };
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[17][1]++;
    }
    const costs =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[123]++, historicalData.map(d => {
      /* istanbul ignore next */
      cov_2kugt2zsg3().f[12]++;
      cov_2kugt2zsg3().s[124]++;
      return d.daily_cost;
    }));
    const avgDailyCost =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[125]++, costs.reduce((a, b) => {
      /* istanbul ignore next */
      cov_2kugt2zsg3().f[13]++;
      cov_2kugt2zsg3().s[126]++;
      return a + b;
    }, 0) / costs.length);
    // Simple trend analysis
    const recentCosts =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[127]++, costs.slice(-7));
    const earlierCosts =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[128]++, costs.slice(0, 7));
    const recentAvg =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[129]++, recentCosts.reduce((a, b) => {
      /* istanbul ignore next */
      cov_2kugt2zsg3().f[14]++;
      cov_2kugt2zsg3().s[130]++;
      return a + b;
    }, 0) / recentCosts.length);
    const earlierAvg =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[131]++, earlierCosts.reduce((a, b) => {
      /* istanbul ignore next */
      cov_2kugt2zsg3().f[15]++;
      cov_2kugt2zsg3().s[132]++;
      return a + b;
    }, 0) / earlierCosts.length);
    let trend =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[133]++, 'stable');
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[134]++;
    if (recentAvg > earlierAvg * 1.1) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[18][0]++;
      cov_2kugt2zsg3().s[135]++;
      trend = 'increasing';
    } else {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[18][1]++;
      cov_2kugt2zsg3().s[136]++;
      if (recentAvg < earlierAvg * 0.9) {
        /* istanbul ignore next */
        cov_2kugt2zsg3().b[19][0]++;
        cov_2kugt2zsg3().s[137]++;
        trend = 'decreasing';
      } else
      /* istanbul ignore next */
      {
        cov_2kugt2zsg3().b[19][1]++;
      }
    }
    const multiplier =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[138]++, period === 'daily' ?
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[20][0]++, 1) :
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[20][1]++, period === 'weekly' ?
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[21][0]++, 7) :
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[21][1]++, 30)));
    const predictedCost =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[139]++, avgDailyCost * multiplier);
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[140]++;
    return {
      period,
      predictedCost,
      confidence: Math.min(historicalData.length / 30, 1),
      // Higher confidence with more data
      basedOnDays: historicalData.length,
      trend,
      factors: [`Based on ${historicalData.length} days of historical data`, `Average daily cost: $${avgDailyCost.toFixed(2)}`, `Trend: ${trend}`]
    };
  }
  /**
   * Get usage analytics for a time period
   */
  async getUsageAnalytics(startDate, endDate) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[16]++;
    const summary =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[141]++, await this.getCostSummary(startDate, endDate));
    // Get daily trend data
    const trendData =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[142]++, connection_1.db.prepare(`
      SELECT 
        DATE(created_at) as date,
        SUM(cost_usd) as cost,
        SUM(total_tokens) as tokens,
        COUNT(*) as executions
      FROM cost_tracking
      WHERE created_at >= ? AND created_at <= ?
      GROUP BY DATE(created_at)
      ORDER BY date
    `).all(startDate, endDate));
    const dayCount =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[143]++, Math.max(1, Math.ceil((new Date(endDate).getTime() - new Date(startDate).getTime()) / (24 * 60 * 60 * 1000))));
    // Find peak usage day
    const peakDay =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[144]++, trendData.reduce((max, day) => {
      /* istanbul ignore next */
      cov_2kugt2zsg3().f[17]++;
      cov_2kugt2zsg3().s[145]++;
      return day.cost > max.cost ?
      /* istanbul ignore next */
      (cov_2kugt2zsg3().b[22][0]++, day) :
      /* istanbul ignore next */
      (cov_2kugt2zsg3().b[22][1]++, max);
    },
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[23][0]++, trendData[0]) ||
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[23][1]++, {
      date: startDate,
      cost: 0,
      tokens: 0,
      executions: 0
    })));
    // Model usage breakdown
    const modelUsage =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[146]++, Object.entries(summary.costByModel).map(([model, cost]) => {
      /* istanbul ignore next */
      cov_2kugt2zsg3().f[18]++;
      cov_2kugt2zsg3().s[147]++;
      return {
        model,
        cost,
        tokens:
        /* istanbul ignore next */
        (cov_2kugt2zsg3().b[24][0]++, summary.tokensByModel[model]) ||
        /* istanbul ignore next */
        (cov_2kugt2zsg3().b[24][1]++, 0),
        executions:
        /* istanbul ignore next */
        (cov_2kugt2zsg3().b[25][0]++, summary.executionsByModel[model]) ||
        /* istanbul ignore next */
        (cov_2kugt2zsg3().b[25][1]++, 0),
        percentage: cost / summary.totalCost * 100
      };
    }).sort((a, b) => {
      /* istanbul ignore next */
      cov_2kugt2zsg3().f[19]++;
      cov_2kugt2zsg3().s[148]++;
      return b.cost - a.cost;
    }));
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[149]++;
    return {
      period: {
        start: startDate,
        end: endDate
      },
      totalCost: summary.totalCost,
      totalTokens: summary.totalTokens,
      totalExecutions: summary.totalExecutions,
      averageCostPerDay: summary.totalCost / dayCount,
      averageTokensPerDay: summary.totalTokens / dayCount,
      averageExecutionsPerDay: summary.totalExecutions / dayCount,
      peakUsageDay: peakDay.date,
      peakUsageCost: peakDay.cost,
      costTrend: trendData.map(d => {
        /* istanbul ignore next */
        cov_2kugt2zsg3().f[20]++;
        cov_2kugt2zsg3().s[150]++;
        return {
          date: d.date,
          cost: d.cost,
          tokens: d.tokens,
          executions: d.executions
        };
      }),
      modelUsage
    };
  }
  /**
   * Calculate ROI for test executions
   */
  async calculateROI(startDate, endDate, promptCardId) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[21]++;
    const summary =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[151]++, await this.getCostSummary(startDate, endDate, promptCardId));
    // Get success/failure statistics
    let query =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[152]++, `
      SELECT 
        COUNT(*) as total_executions,
        SUM(CASE WHEN passed = 1 THEN 1 ELSE 0 END) as successful_executions,
        SUM(CASE WHEN passed = 0 THEN 1 ELSE 0 END) as failed_executions
      FROM test_results tr
      JOIN cost_tracking ct ON tr.execution_id = ct.execution_id
      WHERE 1=1
    `);
    const params =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[153]++, []);
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[154]++;
    if (startDate) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[26][0]++;
      cov_2kugt2zsg3().s[155]++;
      query += ` AND ct.created_at >= ?`;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[156]++;
      params.push(startDate);
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[26][1]++;
    }
    cov_2kugt2zsg3().s[157]++;
    if (endDate) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[27][0]++;
      cov_2kugt2zsg3().s[158]++;
      query += ` AND ct.created_at <= ?`;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[159]++;
      params.push(endDate);
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[27][1]++;
    }
    cov_2kugt2zsg3().s[160]++;
    if (promptCardId) {
      /* istanbul ignore next */
      cov_2kugt2zsg3().b[28][0]++;
      cov_2kugt2zsg3().s[161]++;
      query += ` AND ct.prompt_card_id = ?`;
      /* istanbul ignore next */
      cov_2kugt2zsg3().s[162]++;
      params.push(promptCardId);
    } else
    /* istanbul ignore next */
    {
      cov_2kugt2zsg3().b[28][1]++;
    }
    const result =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[163]++, connection_1.db.prepare(query).get(...params));
    const totalExecutions =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[164]++,
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[29][0]++, result?.total_executions) ||
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[29][1]++, 0));
    const successfulExecutions =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[165]++,
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[30][0]++, result?.successful_executions) ||
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[30][1]++, 0));
    const failedExecutions =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[166]++,
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[31][0]++, result?.failed_executions) ||
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[31][1]++, 0));
    const successRate =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[167]++, totalExecutions > 0 ?
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[32][0]++, successfulExecutions / totalExecutions * 100) :
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[32][1]++, 0));
    const averageCostPerSuccess =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[168]++, successfulExecutions > 0 ?
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[33][0]++, summary.totalCost / successfulExecutions) :
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[33][1]++, 0));
    const costEfficiency =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[169]++, summary.totalCost > 0 ?
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[34][0]++, successfulExecutions / summary.totalCost * 100) :
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[34][1]++, 0));
    const recommendations =
    /* istanbul ignore next */
    (cov_2kugt2zsg3().s[170]++, await this.generateOptimizationRecommendations(startDate, endDate));
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[171]++;
    return {
      totalCost: summary.totalCost,
      totalExecutions,
      successfulExecutions,
      failedExecutions,
      averageCostPerSuccess,
      successRate,
      costEfficiency,
      recommendations
    };
  }
  /**
   * Get all budget alerts
   */
  async getBudgetAlerts() {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[22]++;
    cov_2kugt2zsg3().s[172]++;
    return connection_1.db.prepare(`
      SELECT * FROM budget_alerts ORDER BY created_at DESC
    `).all();
  }
  /**
   * Update optimization settings
   */
  async updateOptimizationSettings(settings) {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[23]++;
    cov_2kugt2zsg3().s[173]++;
    this.optimizationSettings = {
      ...this.optimizationSettings,
      ...settings
    };
    /* istanbul ignore next */
    cov_2kugt2zsg3().s[174]++;
    connection_1.db.prepare(`
      INSERT OR REPLACE INTO cost_optimization_settings 
      (id, enable_auto_optimization, cost_threshold, token_threshold, model_preferences, 
       prompt_optimization, batching_enabled, caching_enabled, updated_at)
      VALUES (1, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
    `).run(
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[35][0]++, settings.enableAutoOptimization) ??
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[35][1]++, this.optimizationSettings.enableAutoOptimization),
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[36][0]++, settings.costThreshold) ??
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[36][1]++, this.optimizationSettings.costThreshold),
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[37][0]++, settings.tokenThreshold) ??
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[37][1]++, this.optimizationSettings.tokenThreshold), JSON.stringify(
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[38][0]++, settings.modelPreferences) ??
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[38][1]++, this.optimizationSettings.modelPreferences)),
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[39][0]++, settings.promptOptimization) ??
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[39][1]++, this.optimizationSettings.promptOptimization),
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[40][0]++, settings.batchingEnabled) ??
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[40][1]++, this.optimizationSettings.batchingEnabled),
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[41][0]++, settings.cachingEnabled) ??
    /* istanbul ignore next */
    (cov_2kugt2zsg3().b[41][1]++, this.optimizationSettings.cachingEnabled));
  }
  /**
   * Get optimization settings
   */
  getOptimizationSettings() {
    /* istanbul ignore next */
    cov_2kugt2zsg3().f[24]++;
    cov_2kugt2zsg3().s[175]++;
    return this.optimizationSettings;
  }
}
/* istanbul ignore next */
cov_2kugt2zsg3().s[176]++;
exports.CostTracker = CostTracker;
/* istanbul ignore next */
cov_2kugt2zsg3().s[177]++;
exports.costTracker = new CostTracker();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,