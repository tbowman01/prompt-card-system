{"version":3,"names":["cov_2kugt2zsg3","actualCoverage","s","connection_1","require","CostTracker","constructor","f","modelPricing","Map","optimizationSettings","enableAutoOptimization","costThreshold","tokenThreshold","modelPreferences","promptOptimization","batchingEnabled","cachingEnabled","initializePricing","initializeDatabase","console","log","db","exec","defaultPricing","model","prompt_token_cost","completion_token_cost","context_window","last_updated","Date","toISOString","insertPricing","prepare","pricing","run","set","trackUsage","executionId","promptTokens","completionTokens","executionTimeMs","testCaseId","promptCardId","totalTokens","cost","calculateCost","insertCost","result","costData","id","lastInsertRowid","execution_id","prompt_tokens","completion_tokens","total_tokens","cost_usd","execution_time_ms","test_case_id","prompt_card_id","created_at","checkBudgetAlerts","get","b","warn","promptCost","completionCost","getCostSummary","startDate","endDate","query","params","push","results","all","costByModel","tokensByModel","executionsByModel","totalCost","totalPromptTokens","totalCompletionTokens","totalExecutions","total_cost","tokens","executions","total_executions","total_prompt_tokens","total_completion_tokens","averageCostPerExecution","averageTokensPerExecution","generateOptimizationRecommendations","recommendations","summary","sortedModels","Object","entries","sort","a","length","mostExpensiveModel","mostExpensiveCost","cheapestModel","cheapestCost","type","title","description","toFixed","estimatedSavings","estimatedSavingsPercentage","priority","actionRequired","metadata","currentModel","suggestedModel","currentCost","suggestedCost","averageTokens","avgCostPerExecution","createBudgetAlert","name","threshold","insertAlert","current_amount","percentage_used","status","alerts","triggeredAlerts","alert","currentAmount","getCurrentSpendingForAlert","percentageUsed","newStatus","now","getFullYear","getMonth","getDate","weekStart","setDate","getDay","generateCostPrediction","period","days","historicalData","predictedCost","confidence","basedOnDays","trend","factors","costs","map","d","daily_cost","avgDailyCost","reduce","recentCosts","slice","earlierCosts","recentAvg","earlierAvg","multiplier","Math","min","getUsageAnalytics","trendData","dayCount","max","ceil","getTime","peakDay","day","date","modelUsage","percentage","start","end","averageCostPerDay","averageTokensPerDay","averageExecutionsPerDay","peakUsageDay","peakUsageCost","costTrend","calculateROI","successfulExecutions","successful_executions","failedExecutions","failed_executions","successRate","averageCostPerSuccess","costEfficiency","getBudgetAlerts","updateOptimizationSettings","settings","JSON","stringify","getOptimizationSettings","exports","costTracker"],"sources":["/workspaces/prompt-card-system/backend/src/services/CostTracker.ts"],"sourcesContent":["import { db } from '../database/connection';\nimport {\n  CostData,\n  ModelPricing,\n  CostSummary,\n  CostOptimizationRecommendation,\n  BudgetAlert,\n  CostPrediction,\n  UsageAnalytics,\n  CostOptimizationSettings,\n  ROICalculation\n} from '../types/costTracking';\n\n/**\n * Comprehensive Cost Tracking Service\n * Tracks token usage, calculates costs, provides optimization recommendations\n */\nexport class CostTracker {\n  private modelPricing: Map<string, ModelPricing> = new Map();\n  private optimizationSettings: CostOptimizationSettings;\n\n  constructor() {\n    this.optimizationSettings = {\n      enableAutoOptimization: true,\n      costThreshold: 10.0, // $10 threshold\n      tokenThreshold: 100000, // 100k tokens\n      modelPreferences: ['gpt-3.5-turbo', 'llama3'], // Preferred models for cost optimization\n      promptOptimization: true,\n      batchingEnabled: true,\n      cachingEnabled: true\n    };\n    \n    this.initializePricing();\n    this.initializeDatabase();\n  }\n\n  /**\n   * Initialize database tables for cost tracking\n   */\n  private initializeDatabase(): void {\n    console.log('Initializing cost tracking database...');\n    \n    // Cost tracking data table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS cost_tracking (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        execution_id TEXT NOT NULL,\n        model TEXT NOT NULL,\n        prompt_tokens INTEGER NOT NULL DEFAULT 0,\n        completion_tokens INTEGER NOT NULL DEFAULT 0,\n        total_tokens INTEGER NOT NULL DEFAULT 0,\n        cost_usd REAL NOT NULL DEFAULT 0,\n        execution_time_ms INTEGER NOT NULL DEFAULT 0,\n        test_case_id INTEGER,\n        prompt_card_id INTEGER,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Model pricing table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS model_pricing (\n        model TEXT PRIMARY KEY,\n        prompt_token_cost REAL NOT NULL,\n        completion_token_cost REAL NOT NULL,\n        context_window INTEGER NOT NULL,\n        last_updated DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Budget alerts table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS budget_alerts (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT NOT NULL,\n        type TEXT NOT NULL CHECK (type IN ('daily', 'weekly', 'monthly', 'total')),\n        threshold REAL NOT NULL,\n        current_amount REAL DEFAULT 0,\n        percentage_used REAL DEFAULT 0,\n        status TEXT DEFAULT 'active' CHECK (status IN ('active', 'triggered', 'exceeded')),\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        triggered_at DATETIME\n      )\n    `);\n\n    // Cost optimization settings table\n    db.exec(`\n      CREATE TABLE IF NOT EXISTS cost_optimization_settings (\n        id INTEGER PRIMARY KEY CHECK (id = 1),\n        enable_auto_optimization BOOLEAN DEFAULT 1,\n        cost_threshold REAL DEFAULT 10.0,\n        token_threshold INTEGER DEFAULT 100000,\n        model_preferences TEXT DEFAULT '[]',\n        prompt_optimization BOOLEAN DEFAULT 1,\n        batching_enabled BOOLEAN DEFAULT 1,\n        caching_enabled BOOLEAN DEFAULT 1,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create indexes for better performance\n    db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_execution_id ON cost_tracking(execution_id);\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_model ON cost_tracking(model);\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_created_at ON cost_tracking(created_at);\n      CREATE INDEX IF NOT EXISTS idx_cost_tracking_prompt_card_id ON cost_tracking(prompt_card_id);\n    `);\n\n    console.log('Cost tracking database initialized successfully');\n  }\n\n  /**\n   * Initialize model pricing data\n   */\n  private initializePricing(): void {\n    const defaultPricing: ModelPricing[] = [\n      {\n        model: 'gpt-4',\n        prompt_token_cost: 0.03, // $0.03 per 1k tokens\n        completion_token_cost: 0.06, // $0.06 per 1k tokens\n        context_window: 8192,\n        last_updated: new Date().toISOString()\n      },\n      {\n        model: 'gpt-4-turbo',\n        prompt_token_cost: 0.01, // $0.01 per 1k tokens\n        completion_token_cost: 0.03, // $0.03 per 1k tokens\n        context_window: 128000,\n        last_updated: new Date().toISOString()\n      },\n      {\n        model: 'gpt-3.5-turbo',\n        prompt_token_cost: 0.0015, // $0.0015 per 1k tokens\n        completion_token_cost: 0.002, // $0.002 per 1k tokens\n        context_window: 16385,\n        last_updated: new Date().toISOString()\n      },\n      {\n        model: 'llama3',\n        prompt_token_cost: 0.0, // Open source - no cost\n        completion_token_cost: 0.0,\n        context_window: 8192,\n        last_updated: new Date().toISOString()\n      },\n      {\n        model: 'claude-3-sonnet',\n        prompt_token_cost: 0.003, // $0.003 per 1k tokens\n        completion_token_cost: 0.015, // $0.015 per 1k tokens\n        context_window: 200000,\n        last_updated: new Date().toISOString()\n      }\n    ];\n\n    // Insert default pricing into database\n    const insertPricing = db.prepare(`\n      INSERT OR REPLACE INTO model_pricing \n      (model, prompt_token_cost, completion_token_cost, context_window, last_updated)\n      VALUES (?, ?, ?, ?, ?)\n    `);\n\n    for (const pricing of defaultPricing) {\n      insertPricing.run(\n        pricing.model,\n        pricing.prompt_token_cost,\n        pricing.completion_token_cost,\n        pricing.context_window,\n        pricing.last_updated\n      );\n      this.modelPricing.set(pricing.model, pricing);\n    }\n\n    console.log('Model pricing initialized');\n  }\n\n  /**\n   * Track token usage and calculate cost for an execution\n   */\n  public async trackUsage(\n    executionId: string,\n    model: string,\n    promptTokens: number,\n    completionTokens: number,\n    executionTimeMs: number,\n    testCaseId?: number,\n    promptCardId?: number\n  ): Promise<CostData> {\n    const totalTokens = promptTokens + completionTokens;\n    const cost = this.calculateCost(model, promptTokens, completionTokens);\n\n    const insertCost = db.prepare(`\n      INSERT INTO cost_tracking \n      (execution_id, model, prompt_tokens, completion_tokens, total_tokens, cost_usd, execution_time_ms, test_case_id, prompt_card_id)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    const result = insertCost.run(\n      executionId,\n      model,\n      promptTokens,\n      completionTokens,\n      totalTokens,\n      cost,\n      executionTimeMs,\n      testCaseId,\n      promptCardId\n    );\n\n    const costData: CostData = {\n      id: result.lastInsertRowid as number,\n      execution_id: executionId,\n      model,\n      prompt_tokens: promptTokens,\n      completion_tokens: completionTokens,\n      total_tokens: totalTokens,\n      cost_usd: cost,\n      execution_time_ms: executionTimeMs,\n      test_case_id: testCaseId,\n      prompt_card_id: promptCardId,\n      created_at: new Date().toISOString()\n    };\n\n    // Check budget alerts\n    await this.checkBudgetAlerts();\n\n    return costData;\n  }\n\n  /**\n   * Calculate cost for given token usage\n   */\n  private calculateCost(model: string, promptTokens: number, completionTokens: number): number {\n    const pricing = this.modelPricing.get(model);\n    if (!pricing) {\n      console.warn(`No pricing found for model: ${model}, assuming zero cost`);\n      return 0;\n    }\n\n    const promptCost = (promptTokens / 1000) * pricing.prompt_token_cost;\n    const completionCost = (completionTokens / 1000) * pricing.completion_token_cost;\n    return promptCost + completionCost;\n  }\n\n  /**\n   * Get cost summary for a given time period\n   */\n  public async getCostSummary(\n    startDate?: string,\n    endDate?: string,\n    promptCardId?: number\n  ): Promise<CostSummary> {\n    let query = `\n      SELECT \n        model,\n        SUM(cost_usd) as total_cost,\n        SUM(total_tokens) as total_tokens,\n        SUM(prompt_tokens) as total_prompt_tokens,\n        SUM(completion_tokens) as total_completion_tokens,\n        COUNT(*) as total_executions\n      FROM cost_tracking\n      WHERE 1=1\n    `;\n\n    const params: any[] = [];\n\n    if (startDate) {\n      query += ` AND created_at >= ?`;\n      params.push(startDate);\n    }\n\n    if (endDate) {\n      query += ` AND created_at <= ?`;\n      params.push(endDate);\n    }\n\n    if (promptCardId) {\n      query += ` AND prompt_card_id = ?`;\n      params.push(promptCardId);\n    }\n\n    query += ` GROUP BY model`;\n\n    const results = db.prepare(query).all(...params);\n\n    const costByModel: Record<string, number> = {};\n    const tokensByModel: Record<string, number> = {};\n    const executionsByModel: Record<string, number> = {};\n\n    let totalCost = 0;\n    let totalTokens = 0;\n    let totalPromptTokens = 0;\n    let totalCompletionTokens = 0;\n    let totalExecutions = 0;\n\n    for (const result of results) {\n      const model = result.model;\n      const cost = result.total_cost;\n      const tokens = result.total_tokens;\n      const executions = result.total_executions;\n\n      costByModel[model] = cost;\n      tokensByModel[model] = tokens;\n      executionsByModel[model] = executions;\n\n      totalCost += cost;\n      totalTokens += tokens;\n      totalPromptTokens += result.total_prompt_tokens;\n      totalCompletionTokens += result.total_completion_tokens;\n      totalExecutions += executions;\n    }\n\n    return {\n      totalCost,\n      totalTokens,\n      totalPromptTokens,\n      totalCompletionTokens,\n      totalExecutions,\n      averageCostPerExecution: totalExecutions > 0 ? totalCost / totalExecutions : 0,\n      averageTokensPerExecution: totalExecutions > 0 ? totalTokens / totalExecutions : 0,\n      costByModel,\n      tokensByModel,\n      executionsByModel\n    };\n  }\n\n  /**\n   * Generate cost optimization recommendations\n   */\n  public async generateOptimizationRecommendations(\n    startDate?: string,\n    endDate?: string\n  ): Promise<CostOptimizationRecommendation[]> {\n    const recommendations: CostOptimizationRecommendation[] = [];\n    const summary = await this.getCostSummary(startDate, endDate);\n\n    // Model optimization recommendations\n    const sortedModels = Object.entries(summary.costByModel)\n      .sort(([,a], [,b]) => b - a);\n\n    if (sortedModels.length > 1) {\n      const mostExpensiveModel = sortedModels[0][0];\n      const mostExpensiveCost = sortedModels[0][1];\n      const cheapestModel = sortedModels[sortedModels.length - 1][0];\n      const cheapestCost = sortedModels[sortedModels.length - 1][1];\n\n      if (mostExpensiveCost > cheapestCost * 2) {\n        recommendations.push({\n          type: 'model_suggestion',\n          title: `Consider switching from ${mostExpensiveModel} to ${cheapestModel}`,\n          description: `${mostExpensiveModel} accounts for $${mostExpensiveCost.toFixed(2)} of your costs. Consider using ${cheapestModel} for appropriate tasks.`,\n          estimatedSavings: mostExpensiveCost - cheapestCost,\n          estimatedSavingsPercentage: ((mostExpensiveCost - cheapestCost) / mostExpensiveCost) * 100,\n          priority: 'high',\n          actionRequired: `Review test cases using ${mostExpensiveModel} and evaluate if ${cheapestModel} would be sufficient.`,\n          metadata: {\n            currentModel: mostExpensiveModel,\n            suggestedModel: cheapestModel,\n            currentCost: mostExpensiveCost,\n            suggestedCost: cheapestCost\n          }\n        });\n      }\n    }\n\n    // High token usage recommendations\n    if (summary.averageTokensPerExecution > 2000) {\n      recommendations.push({\n        type: 'token_reduction',\n        title: 'High token usage detected',\n        description: `Average token usage is ${summary.averageTokensPerExecution.toFixed(0)} tokens per execution. Consider optimizing prompts.`,\n        estimatedSavings: summary.totalCost * 0.3, // Estimate 30% savings\n        estimatedSavingsPercentage: 30,\n        priority: 'medium',\n        actionRequired: 'Review and optimize prompt templates to reduce token usage.',\n        metadata: {\n          averageTokens: summary.averageTokensPerExecution,\n          totalTokens: summary.totalTokens\n        }\n      });\n    }\n\n    // Execution frequency recommendations\n    if (summary.totalExecutions > 1000) {\n      recommendations.push({\n        type: 'execution_reduction',\n        title: 'High execution frequency',\n        description: `${summary.totalExecutions} executions recorded. Consider implementing caching or batching.`,\n        estimatedSavings: summary.totalCost * 0.2, // Estimate 20% savings\n        estimatedSavingsPercentage: 20,\n        priority: 'low',\n        actionRequired: 'Implement result caching and batch processing for similar test cases.',\n        metadata: {\n          totalExecutions: summary.totalExecutions,\n          avgCostPerExecution: summary.averageCostPerExecution\n        }\n      });\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Create or update budget alert\n   */\n  public async createBudgetAlert(\n    name: string,\n    type: 'daily' | 'weekly' | 'monthly' | 'total',\n    threshold: number\n  ): Promise<BudgetAlert> {\n    const insertAlert = db.prepare(`\n      INSERT INTO budget_alerts (name, type, threshold)\n      VALUES (?, ?, ?)\n    `);\n\n    const result = insertAlert.run(name, type, threshold);\n    \n    return {\n      id: result.lastInsertRowid as number,\n      name,\n      type,\n      threshold,\n      current_amount: 0,\n      percentage_used: 0,\n      status: 'active',\n      created_at: new Date().toISOString()\n    };\n  }\n\n  /**\n   * Check budget alerts and update their status\n   */\n  public async checkBudgetAlerts(): Promise<BudgetAlert[]> {\n    const alerts = db.prepare(`\n      SELECT * FROM budget_alerts WHERE status IN ('active', 'triggered')\n    `).all();\n\n    const triggeredAlerts: BudgetAlert[] = [];\n\n    for (const alert of alerts) {\n      const currentAmount = await this.getCurrentSpendingForAlert(alert.type);\n      const percentageUsed = (currentAmount / alert.threshold) * 100;\n\n      let newStatus = alert.status;\n      if (percentageUsed >= 100) {\n        newStatus = 'exceeded';\n      } else if (percentageUsed >= 80) {\n        newStatus = 'triggered';\n      }\n\n      // Update alert with current amounts\n      db.prepare(`\n        UPDATE budget_alerts \n        SET current_amount = ?, percentage_used = ?, status = ?\n        WHERE id = ?\n      `).run(currentAmount, percentageUsed, newStatus, alert.id);\n\n      if (newStatus !== alert.status) {\n        triggeredAlerts.push({\n          ...alert,\n          current_amount: currentAmount,\n          percentage_used: percentageUsed,\n          status: newStatus as any\n        });\n      }\n    }\n\n    return triggeredAlerts;\n  }\n\n  /**\n   * Get current spending for alert period\n   */\n  private async getCurrentSpendingForAlert(type: string): Promise<number> {\n    let startDate: string;\n    const now = new Date();\n\n    switch (type) {\n      case 'daily':\n        startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate()).toISOString();\n        break;\n      case 'weekly':\n        const weekStart = new Date(now);\n        weekStart.setDate(now.getDate() - now.getDay());\n        startDate = weekStart.toISOString();\n        break;\n      case 'monthly':\n        startDate = new Date(now.getFullYear(), now.getMonth(), 1).toISOString();\n        break;\n      case 'total':\n        startDate = '1970-01-01T00:00:00.000Z';\n        break;\n      default:\n        return 0;\n    }\n\n    const result = db.prepare(`\n      SELECT SUM(cost_usd) as total_cost \n      FROM cost_tracking \n      WHERE created_at >= ?\n    `).get(startDate);\n\n    return result?.total_cost || 0;\n  }\n\n  /**\n   * Generate cost predictions based on historical data\n   */\n  public async generateCostPrediction(\n    period: 'daily' | 'weekly' | 'monthly'\n  ): Promise<CostPrediction> {\n    const days = period === 'daily' ? 7 : period === 'weekly' ? 28 : 90;\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const historicalData = db.prepare(`\n      SELECT \n        DATE(created_at) as date,\n        SUM(cost_usd) as daily_cost,\n        SUM(total_tokens) as daily_tokens,\n        COUNT(*) as daily_executions\n      FROM cost_tracking\n      WHERE created_at >= ?\n      GROUP BY DATE(created_at)\n      ORDER BY date\n    `).all(startDate.toISOString());\n\n    if (historicalData.length < 3) {\n      return {\n        period,\n        predictedCost: 0,\n        confidence: 0,\n        basedOnDays: historicalData.length,\n        trend: 'stable',\n        factors: ['Insufficient historical data']\n      };\n    }\n\n    const costs = historicalData.map(d => d.daily_cost);\n    const avgDailyCost = costs.reduce((a, b) => a + b, 0) / costs.length;\n    \n    // Simple trend analysis\n    const recentCosts = costs.slice(-7);\n    const earlierCosts = costs.slice(0, 7);\n    const recentAvg = recentCosts.reduce((a, b) => a + b, 0) / recentCosts.length;\n    const earlierAvg = earlierCosts.reduce((a, b) => a + b, 0) / earlierCosts.length;\n\n    let trend: 'increasing' | 'decreasing' | 'stable' = 'stable';\n    if (recentAvg > earlierAvg * 1.1) {\n      trend = 'increasing';\n    } else if (recentAvg < earlierAvg * 0.9) {\n      trend = 'decreasing';\n    }\n\n    const multiplier = period === 'daily' ? 1 : period === 'weekly' ? 7 : 30;\n    const predictedCost = avgDailyCost * multiplier;\n\n    return {\n      period,\n      predictedCost,\n      confidence: Math.min(historicalData.length / 30, 1), // Higher confidence with more data\n      basedOnDays: historicalData.length,\n      trend,\n      factors: [\n        `Based on ${historicalData.length} days of historical data`,\n        `Average daily cost: $${avgDailyCost.toFixed(2)}`,\n        `Trend: ${trend}`\n      ]\n    };\n  }\n\n  /**\n   * Get usage analytics for a time period\n   */\n  public async getUsageAnalytics(\n    startDate: string,\n    endDate: string\n  ): Promise<UsageAnalytics> {\n    const summary = await this.getCostSummary(startDate, endDate);\n    \n    // Get daily trend data\n    const trendData = db.prepare(`\n      SELECT \n        DATE(created_at) as date,\n        SUM(cost_usd) as cost,\n        SUM(total_tokens) as tokens,\n        COUNT(*) as executions\n      FROM cost_tracking\n      WHERE created_at >= ? AND created_at <= ?\n      GROUP BY DATE(created_at)\n      ORDER BY date\n    `).all(startDate, endDate);\n\n    const dayCount = Math.max(1, Math.ceil((new Date(endDate).getTime() - new Date(startDate).getTime()) / (24 * 60 * 60 * 1000)));\n    \n    // Find peak usage day\n    const peakDay = trendData.reduce((max, day) => \n      day.cost > max.cost ? day : max, \n      trendData[0] || { date: startDate, cost: 0, tokens: 0, executions: 0 }\n    );\n\n    // Model usage breakdown\n    const modelUsage = Object.entries(summary.costByModel).map(([model, cost]) => ({\n      model,\n      cost,\n      tokens: summary.tokensByModel[model] || 0,\n      executions: summary.executionsByModel[model] || 0,\n      percentage: (cost / summary.totalCost) * 100\n    })).sort((a, b) => b.cost - a.cost);\n\n    return {\n      period: {\n        start: startDate,\n        end: endDate\n      },\n      totalCost: summary.totalCost,\n      totalTokens: summary.totalTokens,\n      totalExecutions: summary.totalExecutions,\n      averageCostPerDay: summary.totalCost / dayCount,\n      averageTokensPerDay: summary.totalTokens / dayCount,\n      averageExecutionsPerDay: summary.totalExecutions / dayCount,\n      peakUsageDay: peakDay.date,\n      peakUsageCost: peakDay.cost,\n      costTrend: trendData.map(d => ({\n        date: d.date,\n        cost: d.cost,\n        tokens: d.tokens,\n        executions: d.executions\n      })),\n      modelUsage\n    };\n  }\n\n  /**\n   * Calculate ROI for test executions\n   */\n  public async calculateROI(\n    startDate?: string,\n    endDate?: string,\n    promptCardId?: number\n  ): Promise<ROICalculation> {\n    const summary = await this.getCostSummary(startDate, endDate, promptCardId);\n    \n    // Get success/failure statistics\n    let query = `\n      SELECT \n        COUNT(*) as total_executions,\n        SUM(CASE WHEN passed = 1 THEN 1 ELSE 0 END) as successful_executions,\n        SUM(CASE WHEN passed = 0 THEN 1 ELSE 0 END) as failed_executions\n      FROM test_results tr\n      JOIN cost_tracking ct ON tr.execution_id = ct.execution_id\n      WHERE 1=1\n    `;\n\n    const params: any[] = [];\n\n    if (startDate) {\n      query += ` AND ct.created_at >= ?`;\n      params.push(startDate);\n    }\n\n    if (endDate) {\n      query += ` AND ct.created_at <= ?`;\n      params.push(endDate);\n    }\n\n    if (promptCardId) {\n      query += ` AND ct.prompt_card_id = ?`;\n      params.push(promptCardId);\n    }\n\n    const result = db.prepare(query).get(...params);\n    \n    const totalExecutions = result?.total_executions || 0;\n    const successfulExecutions = result?.successful_executions || 0;\n    const failedExecutions = result?.failed_executions || 0;\n    const successRate = totalExecutions > 0 ? (successfulExecutions / totalExecutions) * 100 : 0;\n    const averageCostPerSuccess = successfulExecutions > 0 ? summary.totalCost / successfulExecutions : 0;\n    const costEfficiency = summary.totalCost > 0 ? (successfulExecutions / summary.totalCost) * 100 : 0;\n\n    const recommendations = await this.generateOptimizationRecommendations(startDate, endDate);\n\n    return {\n      totalCost: summary.totalCost,\n      totalExecutions,\n      successfulExecutions,\n      failedExecutions,\n      averageCostPerSuccess,\n      successRate,\n      costEfficiency,\n      recommendations\n    };\n  }\n\n  /**\n   * Get all budget alerts\n   */\n  public async getBudgetAlerts(): Promise<BudgetAlert[]> {\n    return db.prepare(`\n      SELECT * FROM budget_alerts ORDER BY created_at DESC\n    `).all();\n  }\n\n  /**\n   * Update optimization settings\n   */\n  public async updateOptimizationSettings(settings: Partial<CostOptimizationSettings>): Promise<void> {\n    this.optimizationSettings = { ...this.optimizationSettings, ...settings };\n    \n    db.prepare(`\n      INSERT OR REPLACE INTO cost_optimization_settings \n      (id, enable_auto_optimization, cost_threshold, token_threshold, model_preferences, \n       prompt_optimization, batching_enabled, caching_enabled, updated_at)\n      VALUES (1, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)\n    `).run(\n      settings.enableAutoOptimization ?? this.optimizationSettings.enableAutoOptimization,\n      settings.costThreshold ?? this.optimizationSettings.costThreshold,\n      settings.tokenThreshold ?? this.optimizationSettings.tokenThreshold,\n      JSON.stringify(settings.modelPreferences ?? this.optimizationSettings.modelPreferences),\n      settings.promptOptimization ?? this.optimizationSettings.promptOptimization,\n      settings.batchingEnabled ?? this.optimizationSettings.batchingEnabled,\n      settings.cachingEnabled ?? this.optimizationSettings.cachingEnabled\n    );\n  }\n\n  /**\n   * Get optimization settings\n   */\n  public getOptimizationSettings(): CostOptimizationSettings {\n    return this.optimizationSettings;\n  }\n}\n\nexport const costTracker = new CostTracker();"],"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","ignoreList":[]}