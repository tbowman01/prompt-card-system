cb2753d96aafbc3167d20eab75164a55
"use strict";

/* istanbul ignore next */
function cov_1ioig6gd0g() {
  var path = "/workspaces/prompt-card-system/backend/src/services/reports/generators/ReportGenerator.ts";
  var hash = "4ca514a8aba324ea4d2084050fd631f26ec31585";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/services/reports/generators/ReportGenerator.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 33
        }
      },
      "2": {
        start: {
          line: 4,
          column: 26
        },
        end: {
          line: 4,
          column: 68
        }
      },
      "3": {
        start: {
          line: 5,
          column: 22
        },
        end: {
          line: 5,
          column: 50
        }
      },
      "4": {
        start: {
          line: 6,
          column: 26
        },
        end: {
          line: 6,
          column: 65
        }
      },
      "5": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 60
        }
      },
      "6": {
        start: {
          line: 8,
          column: 20
        },
        end: {
          line: 8,
          column: 40
        }
      },
      "7": {
        start: {
          line: 11,
          column: 8
        },
        end: {
          line: 11,
          column: 79
        }
      },
      "8": {
        start: {
          line: 12,
          column: 8
        },
        end: {
          line: 12,
          column: 59
        }
      },
      "9": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 28
        }
      },
      "10": {
        start: {
          line: 14,
          column: 8
        },
        end: {
          line: 14,
          column: 43
        }
      },
      "11": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 11
        }
      },
      "12": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 23,
          column: 11
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 44
        }
      },
      "14": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 63
        }
      },
      "15": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 36
        }
      },
      "16": {
        start: {
          line: 31,
          column: 25
        },
        end: {
          line: 31,
          column: 90
        }
      },
      "17": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "18": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 67
        }
      },
      "19": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 82,
          column: 9
        }
      },
      "20": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 86
        }
      },
      "21": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 40,
          column: 13
        }
      },
      "22": {
        start: {
          line: 39,
          column: 16
        },
        end: {
          line: 39,
          column: 69
        }
      },
      "23": {
        start: {
          line: 41,
          column: 12
        },
        end: {
          line: 41,
          column: 95
        }
      },
      "24": {
        start: {
          line: 43,
          column: 29
        },
        end: {
          line: 43,
          column: 31
        }
      },
      "25": {
        start: {
          line: 44,
          column: 30
        },
        end: {
          line: 44,
          column: 31
        }
      },
      "26": {
        start: {
          line: 45,
          column: 12
        },
        end: {
          line: 52,
          column: 13
        }
      },
      "27": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 142
        }
      },
      "28": {
        start: {
          line: 47,
          column: 32
        },
        end: {
          line: 47,
          column: 89
        }
      },
      "29": {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 50,
          column: 17
        }
      },
      "30": {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 43
        }
      },
      "31": {
        start: {
          line: 51,
          column: 16
        },
        end: {
          line: 51,
          column: 30
        }
      },
      "32": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 85
        }
      },
      "33": {
        start: {
          line: 55,
          column: 28
        },
        end: {
          line: 55,
          column: 73
        }
      },
      "34": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 84
        }
      },
      "35": {
        start: {
          line: 58,
          column: 29
        },
        end: {
          line: 58,
          column: 66
        }
      },
      "36": {
        start: {
          line: 59,
          column: 27
        },
        end: {
          line: 72,
          column: 13
        }
      },
      "37": {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 94
        }
      },
      "38": {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 26
        }
      },
      "39": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 104
        }
      },
      "40": {
        start: {
          line: 78,
          column: 12
        },
        end: {
          line: 78,
          column: 24
        }
      },
      "41": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 52
        }
      },
      "42": {
        start: {
          line: 85,
          column: 26
        },
        end: {
          line: 85,
          column: 62
        }
      },
      "43": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "44": {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 95,
          column: 18
        }
      },
      "45": {
        start: {
          line: 97,
          column: 16
        },
        end: {
          line: 104,
          column: 18
        }
      },
      "46": {
        start: {
          line: 106,
          column: 16
        },
        end: {
          line: 113,
          column: 18
        }
      },
      "47": {
        start: {
          line: 115,
          column: 16
        },
        end: {
          line: 122,
          column: 18
        }
      },
      "48": {
        start: {
          line: 124,
          column: 16
        },
        end: {
          line: 124,
          column: 28
        }
      },
      "49": {
        start: {
          line: 128,
          column: 24
        },
        end: {
          line: 128,
          column: 26
        }
      },
      "50": {
        start: {
          line: 130,
          column: 33
        },
        end: {
          line: 130,
          column: 81
        }
      },
      "51": {
        start: {
          line: 131,
          column: 28
        },
        end: {
          line: 131,
          column: 101
        }
      },
      "52": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "53": {
        start: {
          line: 135,
          column: 16
        },
        end: {
          line: 155,
          column: 19
        }
      },
      "54": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 22
        }
      },
      "55": {
        start: {
          line: 158,
          column: 16
        },
        end: {
          line: 178,
          column: 19
        }
      },
      "56": {
        start: {
          line: 179,
          column: 16
        },
        end: {
          line: 179,
          column: 22
        }
      },
      "57": {
        start: {
          line: 181,
          column: 16
        },
        end: {
          line: 201,
          column: 19
        }
      },
      "58": {
        start: {
          line: 202,
          column: 16
        },
        end: {
          line: 202,
          column: 22
        }
      },
      "59": {
        start: {
          line: 204,
          column: 28
        },
        end: {
          line: 204,
          column: 99
        }
      },
      "60": {
        start: {
          line: 205,
          column: 16
        },
        end: {
          line: 220,
          column: 19
        }
      },
      "61": {
        start: {
          line: 221,
          column: 16
        },
        end: {
          line: 221,
          column: 22
        }
      },
      "62": {
        start: {
          line: 224,
          column: 16
        },
        end: {
          line: 229,
          column: 19
        }
      },
      "63": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 23
        }
      },
      "64": {
        start: {
          line: 234,
          column: 33
        },
        end: {
          line: 234,
          column: 81
        }
      },
      "65": {
        start: {
          line: 235,
          column: 28
        },
        end: {
          line: 235,
          column: 101
        }
      },
      "66": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 290,
          column: 9
        }
      },
      "67": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 249,
          column: 18
        }
      },
      "68": {
        start: {
          line: 251,
          column: 16
        },
        end: {
          line: 259,
          column: 18
        }
      },
      "69": {
        start: {
          line: 252,
          column: 75
        },
        end: {
          line: 252,
          column: 117
        }
      },
      "70": {
        start: {
          line: 255,
          column: 81
        },
        end: {
          line: 255,
          column: 88
        }
      },
      "71": {
        start: {
          line: 261,
          column: 39
        },
        end: {
          line: 261,
          column: 208
        }
      },
      "72": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 270,
          column: 18
        }
      },
      "73": {
        start: {
          line: 263,
          column: 62
        },
        end: {
          line: 263,
          column: 99
        }
      },
      "74": {
        start: {
          line: 266,
          column: 68
        },
        end: {
          line: 266,
          column: 74
        }
      },
      "75": {
        start: {
          line: 272,
          column: 16
        },
        end: {
          line: 280,
          column: 18
        }
      },
      "76": {
        start: {
          line: 273,
          column: 81
        },
        end: {
          line: 273,
          column: 123
        }
      },
      "77": {
        start: {
          line: 276,
          column: 87
        },
        end: {
          line: 276,
          column: 96
        }
      },
      "78": {
        start: {
          line: 282,
          column: 16
        },
        end: {
          line: 289,
          column: 18
        }
      },
      "79": {
        start: {
          line: 293,
          column: 33
        },
        end: {
          line: 293,
          column: 81
        }
      },
      "80": {
        start: {
          line: 294,
          column: 28
        },
        end: {
          line: 294,
          column: 101
        }
      },
      "81": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 369,
          column: 9
        }
      },
      "82": {
        start: {
          line: 297,
          column: 34
        },
        end: {
          line: 303,
          column: 18
        }
      },
      "83": {
        start: {
          line: 297,
          column: 90
        },
        end: {
          line: 303,
          column: 17
        }
      },
      "84": {
        start: {
          line: 304,
          column: 16
        },
        end: {
          line: 309,
          column: 18
        }
      },
      "85": {
        start: {
          line: 311,
          column: 34
        },
        end: {
          line: 317,
          column: 18
        }
      },
      "86": {
        start: {
          line: 311,
          column: 97
        },
        end: {
          line: 317,
          column: 17
        }
      },
      "87": {
        start: {
          line: 318,
          column: 16
        },
        end: {
          line: 323,
          column: 18
        }
      },
      "88": {
        start: {
          line: 326,
          column: 38
        },
        end: {
          line: 341,
          column: 93
        }
      },
      "89": {
        start: {
          line: 342,
          column: 35
        },
        end: {
          line: 350,
          column: 18
        }
      },
      "90": {
        start: {
          line: 342,
          column: 63
        },
        end: {
          line: 350,
          column: 17
        }
      },
      "91": {
        start: {
          line: 351,
          column: 16
        },
        end: {
          line: 361,
          column: 18
        }
      },
      "92": {
        start: {
          line: 363,
          column: 16
        },
        end: {
          line: 368,
          column: 18
        }
      },
      "93": {
        start: {
          line: 372,
          column: 25
        },
        end: {
          line: 372,
          column: 70
        }
      },
      "94": {
        start: {
          line: 373,
          column: 36
        },
        end: {
          line: 373,
          column: 130
        }
      },
      "95": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 410,
          column: 9
        }
      },
      "96": {
        start: {
          line: 376,
          column: 16
        },
        end: {
          line: 385,
          column: 18
        }
      },
      "97": {
        start: {
          line: 377,
          column: 55
        },
        end: {
          line: 382,
          column: 21
        }
      },
      "98": {
        start: {
          line: 384,
          column: 59
        },
        end: {
          line: 384,
          column: 84
        }
      },
      "99": {
        start: {
          line: 387,
          column: 16
        },
        end: {
          line: 397,
          column: 18
        }
      },
      "100": {
        start: {
          line: 388,
          column: 69
        },
        end: {
          line: 394,
          column: 21
        }
      },
      "101": {
        start: {
          line: 396,
          column: 84
        },
        end: {
          line: 396,
          column: 110
        }
      },
      "102": {
        start: {
          line: 399,
          column: 16
        },
        end: {
          line: 403,
          column: 18
        }
      },
      "103": {
        start: {
          line: 400,
          column: 54
        },
        end: {
          line: 400,
          column: 99
        }
      },
      "104": {
        start: {
          line: 401,
          column: 58
        },
        end: {
          line: 401,
          column: 79
        }
      },
      "105": {
        start: {
          line: 402,
          column: 50
        },
        end: {
          line: 402,
          column: 96
        }
      },
      "106": {
        start: {
          line: 405,
          column: 16
        },
        end: {
          line: 409,
          column: 18
        }
      },
      "107": {
        start: {
          line: 413,
          column: 33
        },
        end: {
          line: 413,
          column: 81
        }
      },
      "108": {
        start: {
          line: 414,
          column: 28
        },
        end: {
          line: 414,
          column: 101
        }
      },
      "109": {
        start: {
          line: 415,
          column: 27
        },
        end: {
          line: 436,
          column: 9
        }
      },
      "110": {
        start: {
          line: 437,
          column: 25
        },
        end: {
          line: 437,
          column: 70
        }
      },
      "111": {
        start: {
          line: 438,
          column: 32
        },
        end: {
          line: 443,
          column: 11
        }
      },
      "112": {
        start: {
          line: 438,
          column: 57
        },
        end: {
          line: 443,
          column: 9
        }
      },
      "113": {
        start: {
          line: 444,
          column: 8
        },
        end: {
          line: 448,
          column: 10
        }
      },
      "114": {
        start: {
          line: 451,
          column: 33
        },
        end: {
          line: 451,
          column: 81
        }
      },
      "115": {
        start: {
          line: 452,
          column: 28
        },
        end: {
          line: 452,
          column: 101
        }
      },
      "116": {
        start: {
          line: 453,
          column: 8
        },
        end: {
          line: 458,
          column: 10
        }
      },
      "117": {
        start: {
          line: 461,
          column: 25
        },
        end: {
          line: 461,
          column: 55
        }
      },
      "118": {
        start: {
          line: 462,
          column: 8
        },
        end: {
          line: 471,
          column: 9
        }
      },
      "119": {
        start: {
          line: 463,
          column: 12
        },
        end: {
          line: 470,
          column: 15
        }
      },
      "120": {
        start: {
          line: 477,
          column: 23
        },
        end: {
          line: 477,
          column: 57
        }
      },
      "121": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 480,
          column: 9
        }
      },
      "122": {
        start: {
          line: 479,
          column: 12
        },
        end: {
          line: 479,
          column: 26
        }
      },
      "123": {
        start: {
          line: 481,
          column: 25
        },
        end: {
          line: 481,
          column: 82
        }
      },
      "124": {
        start: {
          line: 482,
          column: 8
        },
        end: {
          line: 484,
          column: 9
        }
      },
      "125": {
        start: {
          line: 483,
          column: 12
        },
        end: {
          line: 483,
          column: 57
        }
      },
      "126": {
        start: {
          line: 485,
          column: 8
        },
        end: {
          line: 485,
          column: 24
        }
      },
      "127": {
        start: {
          line: 491,
          column: 25
        },
        end: {
          line: 491,
          column: 63
        }
      },
      "128": {
        start: {
          line: 492,
          column: 23
        },
        end: {
          line: 492,
          column: 51
        }
      },
      "129": {
        start: {
          line: 493,
          column: 8
        },
        end: {
          line: 495,
          column: 9
        }
      },
      "130": {
        start: {
          line: 494,
          column: 12
        },
        end: {
          line: 494,
          column: 26
        }
      },
      "131": {
        start: {
          line: 496,
          column: 21
        },
        end: {
          line: 496,
          column: 69
        }
      },
      "132": {
        start: {
          line: 497,
          column: 8
        },
        end: {
          line: 497,
          column: 67
        }
      },
      "133": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 498,
          column: 20
        }
      },
      "134": {
        start: {
          line: 504,
          column: 25
        },
        end: {
          line: 504,
          column: 58
        }
      },
      "135": {
        start: {
          line: 505,
          column: 23
        },
        end: {
          line: 505,
          column: 51
        }
      },
      "136": {
        start: {
          line: 506,
          column: 8
        },
        end: {
          line: 508,
          column: 9
        }
      },
      "137": {
        start: {
          line: 507,
          column: 12
        },
        end: {
          line: 507,
          column: 26
        }
      },
      "138": {
        start: {
          line: 509,
          column: 21
        },
        end: {
          line: 509,
          column: 94
        }
      },
      "139": {
        start: {
          line: 510,
          column: 8
        },
        end: {
          line: 510,
          column: 67
        }
      },
      "140": {
        start: {
          line: 511,
          column: 8
        },
        end: {
          line: 511,
          column: 20
        }
      },
      "141": {
        start: {
          line: 517,
          column: 8
        },
        end: {
          line: 528,
          column: 9
        }
      },
      "142": {
        start: {
          line: 519,
          column: 37
        },
        end: {
          line: 519,
          column: 85
        }
      },
      "143": {
        start: {
          line: 520,
          column: 12
        },
        end: {
          line: 520,
          column: 94
        }
      },
      "144": {
        start: {
          line: 522,
          column: 32
        },
        end: {
          line: 522,
          column: 71
        }
      },
      "145": {
        start: {
          line: 523,
          column: 12
        },
        end: {
          line: 523,
          column: 84
        }
      },
      "146": {
        start: {
          line: 524,
          column: 12
        },
        end: {
          line: 524,
          column: 70
        }
      },
      "147": {
        start: {
          line: 527,
          column: 12
        },
        end: {
          line: 527,
          column: 75
        }
      },
      "148": {
        start: {
          line: 534,
          column: 8
        },
        end: {
          line: 536,
          column: 9
        }
      },
      "149": {
        start: {
          line: 535,
          column: 12
        },
        end: {
          line: 535,
          column: 55
        }
      },
      "150": {
        start: {
          line: 537,
          column: 24
        },
        end: {
          line: 537,
          column: 62
        }
      },
      "151": {
        start: {
          line: 538,
          column: 8
        },
        end: {
          line: 538,
          column: 31
        }
      },
      "152": {
        start: {
          line: 540,
          column: 8
        },
        end: {
          line: 542,
          column: 9
        }
      },
      "153": {
        start: {
          line: 541,
          column: 12
        },
        end: {
          line: 541,
          column: 28
        }
      },
      "154": {
        start: {
          line: 544,
          column: 8
        },
        end: {
          line: 546,
          column: 9
        }
      },
      "155": {
        start: {
          line: 545,
          column: 12
        },
        end: {
          line: 545,
          column: 94
        }
      },
      "156": {
        start: {
          line: 552,
          column: 22
        },
        end: {
          line: 552,
          column: 24
        }
      },
      "157": {
        start: {
          line: 553,
          column: 8
        },
        end: {
          line: 565,
          column: 9
        }
      },
      "158": {
        start: {
          line: 554,
          column: 12
        },
        end: {
          line: 564,
          column: 13
        }
      },
      "159": {
        start: {
          line: 555,
          column: 28
        },
        end: {
          line: 555,
          column: 89
        }
      },
      "160": {
        start: {
          line: 555,
          column: 58
        },
        end: {
          line: 555,
          column: 68
        }
      },
      "161": {
        start: {
          line: 556,
          column: 28
        },
        end: {
          line: 556,
          column: 48
        }
      },
      "162": {
        start: {
          line: 557,
          column: 28
        },
        end: {
          line: 557,
          column: 48
        }
      },
      "163": {
        start: {
          line: 558,
          column: 16
        },
        end: {
          line: 563,
          column: 18
        }
      },
      "164": {
        start: {
          line: 566,
          column: 8
        },
        end: {
          line: 566,
          column: 21
        }
      },
      "165": {
        start: {
          line: 572,
          column: 8
        },
        end: {
          line: 572,
          column: 35
        }
      },
      "166": {
        start: {
          line: 573,
          column: 8
        },
        end: {
          line: 573,
          column: 31
        }
      },
      "167": {
        start: {
          line: 574,
          column: 8
        },
        end: {
          line: 574,
          column: 40
        }
      },
      "168": {
        start: {
          line: 575,
          column: 8
        },
        end: {
          line: 575,
          column: 55
        }
      },
      "169": {
        start: {
          line: 578,
          column: 0
        },
        end: {
          line: 578,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        loc: {
          start: {
            line: 10,
            column: 18
          },
          end: {
            line: 25,
            column: 5
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 5
          }
        },
        loc: {
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 26
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 69
          },
          end: {
            line: 83,
            column: 5
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 5
          }
        },
        loc: {
          start: {
            line: 84,
            column: 56
          },
          end: {
            line: 126,
            column: 5
          }
        },
        line: 84
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 127,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        loc: {
          start: {
            line: 127,
            column: 48
          },
          end: {
            line: 232,
            column: 5
          }
        },
        line: 127
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 233,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        loc: {
          start: {
            line: 233,
            column: 47
          },
          end: {
            line: 291,
            column: 5
          }
        },
        line: 233
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 252,
            column: 70
          },
          end: {
            line: 252,
            column: 71
          }
        },
        loc: {
          start: {
            line: 252,
            column: 75
          },
          end: {
            line: 252,
            column: 117
          }
        },
        line: 252
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 255,
            column: 76
          },
          end: {
            line: 255,
            column: 77
          }
        },
        loc: {
          start: {
            line: 255,
            column: 81
          },
          end: {
            line: 255,
            column: 88
          }
        },
        line: 255
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 263,
            column: 57
          },
          end: {
            line: 263,
            column: 58
          }
        },
        loc: {
          start: {
            line: 263,
            column: 62
          },
          end: {
            line: 263,
            column: 99
          }
        },
        line: 263
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 266,
            column: 63
          },
          end: {
            line: 266,
            column: 64
          }
        },
        loc: {
          start: {
            line: 266,
            column: 68
          },
          end: {
            line: 266,
            column: 74
          }
        },
        line: 266
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 273,
            column: 76
          },
          end: {
            line: 273,
            column: 77
          }
        },
        loc: {
          start: {
            line: 273,
            column: 81
          },
          end: {
            line: 273,
            column: 123
          }
        },
        line: 273
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 276,
            column: 82
          },
          end: {
            line: 276,
            column: 83
          }
        },
        loc: {
          start: {
            line: 276,
            column: 87
          },
          end: {
            line: 276,
            column: 96
          }
        },
        line: 276
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 292,
            column: 4
          },
          end: {
            line: 292,
            column: 5
          }
        },
        loc: {
          start: {
            line: 292,
            column: 47
          },
          end: {
            line: 370,
            column: 5
          }
        },
        line: 292
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 297,
            column: 81
          },
          end: {
            line: 297,
            column: 82
          }
        },
        loc: {
          start: {
            line: 297,
            column: 90
          },
          end: {
            line: 303,
            column: 17
          }
        },
        line: 297
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 311,
            column: 78
          },
          end: {
            line: 311,
            column: 79
          }
        },
        loc: {
          start: {
            line: 311,
            column: 97
          },
          end: {
            line: 317,
            column: 17
          }
        },
        line: 311
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 342,
            column: 53
          },
          end: {
            line: 342,
            column: 54
          }
        },
        loc: {
          start: {
            line: 342,
            column: 63
          },
          end: {
            line: 350,
            column: 17
          }
        },
        line: 342
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 371,
            column: 4
          },
          end: {
            line: 371,
            column: 5
          }
        },
        loc: {
          start: {
            line: 371,
            column: 49
          },
          end: {
            line: 411,
            column: 5
          }
        },
        line: 371
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 377,
            column: 43
          },
          end: {
            line: 377,
            column: 44
          }
        },
        loc: {
          start: {
            line: 377,
            column: 55
          },
          end: {
            line: 382,
            column: 21
          }
        },
        line: 377
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 384,
            column: 54
          },
          end: {
            line: 384,
            column: 55
          }
        },
        loc: {
          start: {
            line: 384,
            column: 59
          },
          end: {
            line: 384,
            column: 84
          }
        },
        line: 384
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 388,
            column: 61
          },
          end: {
            line: 388,
            column: 62
          }
        },
        loc: {
          start: {
            line: 388,
            column: 69
          },
          end: {
            line: 394,
            column: 21
          }
        },
        line: 388
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 396,
            column: 70
          },
          end: {
            line: 396,
            column: 71
          }
        },
        loc: {
          start: {
            line: 396,
            column: 84
          },
          end: {
            line: 396,
            column: 110
          }
        },
        line: 396
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 400,
            column: 49
          },
          end: {
            line: 400,
            column: 50
          }
        },
        loc: {
          start: {
            line: 400,
            column: 54
          },
          end: {
            line: 400,
            column: 99
          }
        },
        line: 400
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 401,
            column: 53
          },
          end: {
            line: 401,
            column: 54
          }
        },
        loc: {
          start: {
            line: 401,
            column: 58
          },
          end: {
            line: 401,
            column: 79
          }
        },
        line: 401
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 402,
            column: 45
          },
          end: {
            line: 402,
            column: 46
          }
        },
        loc: {
          start: {
            line: 402,
            column: 50
          },
          end: {
            line: 402,
            column: 96
          }
        },
        line: 402
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 412,
            column: 4
          },
          end: {
            line: 412,
            column: 5
          }
        },
        loc: {
          start: {
            line: 412,
            column: 45
          },
          end: {
            line: 449,
            column: 5
          }
        },
        line: 412
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 438,
            column: 45
          },
          end: {
            line: 438,
            column: 46
          }
        },
        loc: {
          start: {
            line: 438,
            column: 57
          },
          end: {
            line: 443,
            column: 9
          }
        },
        line: 438
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 450,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        loc: {
          start: {
            line: 450,
            column: 37
          },
          end: {
            line: 459,
            column: 5
          }
        },
        line: 450
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 460,
            column: 4
          },
          end: {
            line: 460,
            column: 5
          }
        },
        loc: {
          start: {
            line: 460,
            column: 66
          },
          end: {
            line: 472,
            column: 5
          }
        },
        line: 460
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 476,
            column: 4
          },
          end: {
            line: 476,
            column: 5
          }
        },
        loc: {
          start: {
            line: 476,
            column: 40
          },
          end: {
            line: 486,
            column: 5
          }
        },
        line: 476
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 490,
            column: 4
          },
          end: {
            line: 490,
            column: 5
          }
        },
        loc: {
          start: {
            line: 490,
            column: 42
          },
          end: {
            line: 499,
            column: 5
          }
        },
        line: 490
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 37
          },
          end: {
            line: 512,
            column: 5
          }
        },
        line: 503
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 516,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        loc: {
          start: {
            line: 516,
            column: 30
          },
          end: {
            line: 529,
            column: 5
          }
        },
        line: 516
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 533,
            column: 4
          },
          end: {
            line: 533,
            column: 5
          }
        },
        loc: {
          start: {
            line: 533,
            column: 42
          },
          end: {
            line: 547,
            column: 5
          }
        },
        line: 533
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 551,
            column: 4
          },
          end: {
            line: 551,
            column: 5
          }
        },
        loc: {
          start: {
            line: 551,
            column: 26
          },
          end: {
            line: 567,
            column: 5
          }
        },
        line: 551
      },
      "34": {
        name: "(anonymous_34)",
        decl: {
          start: {
            line: 555,
            column: 43
          },
          end: {
            line: 555,
            column: 44
          }
        },
        loc: {
          start: {
            line: 555,
            column: 58
          },
          end: {
            line: 555,
            column: 68
          }
        },
        line: 555
      },
      "35": {
        name: "(anonymous_35)",
        decl: {
          start: {
            line: 571,
            column: 4
          },
          end: {
            line: 571,
            column: 5
          }
        },
        loc: {
          start: {
            line: 571,
            column: 18
          },
          end: {
            line: 576,
            column: 5
          }
        },
        line: 571
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 29,
            column: 37
          },
          end: {
            line: 29,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 29,
            column: 47
          },
          end: {
            line: 29,
            column: 49
          }
        }],
        line: 29
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 12
          },
          end: {
            line: 40,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "3": {
        loc: {
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 16
          },
          end: {
            line: 50,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "4": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 87,
            column: 12
          },
          end: {
            line: 95,
            column: 18
          }
        }, {
          start: {
            line: 96,
            column: 12
          },
          end: {
            line: 104,
            column: 18
          }
        }, {
          start: {
            line: 105,
            column: 12
          },
          end: {
            line: 113,
            column: 18
          }
        }, {
          start: {
            line: 114,
            column: 12
          },
          end: {
            line: 122,
            column: 18
          }
        }, {
          start: {
            line: 123,
            column: 12
          },
          end: {
            line: 124,
            column: 28
          }
        }],
        line: 86
      },
      "5": {
        loc: {
          start: {
            line: 133,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 134,
            column: 12
          },
          end: {
            line: 156,
            column: 22
          }
        }, {
          start: {
            line: 157,
            column: 12
          },
          end: {
            line: 179,
            column: 22
          }
        }, {
          start: {
            line: 180,
            column: 12
          },
          end: {
            line: 202,
            column: 22
          }
        }, {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 221,
            column: 22
          }
        }, {
          start: {
            line: 222,
            column: 12
          },
          end: {
            line: 229,
            column: 19
          }
        }],
        line: 133
      },
      "6": {
        loc: {
          start: {
            line: 144,
            column: 28
          },
          end: {
            line: 144,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 144,
            column: 83
          },
          end: {
            line: 144,
            column: 89
          }
        }, {
          start: {
            line: 144,
            column: 92
          },
          end: {
            line: 144,
            column: 101
          }
        }],
        line: 144
      },
      "7": {
        loc: {
          start: {
            line: 154,
            column: 28
          },
          end: {
            line: 154,
            column: 104
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 154,
            column: 86
          },
          end: {
            line: 154,
            column: 92
          }
        }, {
          start: {
            line: 154,
            column: 95
          },
          end: {
            line: 154,
            column: 104
          }
        }],
        line: 154
      },
      "8": {
        loc: {
          start: {
            line: 190,
            column: 28
          },
          end: {
            line: 190,
            column: 101
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 190,
            column: 83
          },
          end: {
            line: 190,
            column: 89
          }
        }, {
          start: {
            line: 190,
            column: 92
          },
          end: {
            line: 190,
            column: 101
          }
        }],
        line: 190
      },
      "9": {
        loc: {
          start: {
            line: 195,
            column: 28
          },
          end: {
            line: 195,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 195,
            column: 72
          },
          end: {
            line: 195,
            column: 78
          }
        }, {
          start: {
            line: 195,
            column: 81
          },
          end: {
            line: 195,
            column: 90
          }
        }],
        line: 195
      },
      "10": {
        loc: {
          start: {
            line: 209,
            column: 28
          },
          end: {
            line: 209,
            column: 69
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 51
          },
          end: {
            line: 209,
            column: 57
          }
        }, {
          start: {
            line: 209,
            column: 60
          },
          end: {
            line: 209,
            column: 69
          }
        }],
        line: 209
      },
      "11": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 290,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 237,
            column: 12
          },
          end: {
            line: 237,
            column: 32
          }
        }, {
          start: {
            line: 238,
            column: 12
          },
          end: {
            line: 249,
            column: 18
          }
        }, {
          start: {
            line: 250,
            column: 12
          },
          end: {
            line: 259,
            column: 18
          }
        }, {
          start: {
            line: 260,
            column: 12
          },
          end: {
            line: 270,
            column: 18
          }
        }, {
          start: {
            line: 271,
            column: 12
          },
          end: {
            line: 280,
            column: 18
          }
        }, {
          start: {
            line: 281,
            column: 12
          },
          end: {
            line: 289,
            column: 18
          }
        }],
        line: 236
      },
      "12": {
        loc: {
          start: {
            line: 261,
            column: 80
          },
          end: {
            line: 261,
            column: 162
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 80
          },
          end: {
            line: 261,
            column: 97
          }
        }, {
          start: {
            line: 261,
            column: 101
          },
          end: {
            line: 261,
            column: 162
          }
        }],
        line: 261
      },
      "13": {
        loc: {
          start: {
            line: 261,
            column: 164
          },
          end: {
            line: 261,
            column: 207
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 261,
            column: 164
          },
          end: {
            line: 261,
            column: 179
          }
        }, {
          start: {
            line: 261,
            column: 183
          },
          end: {
            line: 261,
            column: 207
          }
        }],
        line: 261
      },
      "14": {
        loc: {
          start: {
            line: 295,
            column: 8
          },
          end: {
            line: 369,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 296,
            column: 12
          },
          end: {
            line: 309,
            column: 18
          }
        }, {
          start: {
            line: 310,
            column: 12
          },
          end: {
            line: 323,
            column: 18
          }
        }, {
          start: {
            line: 324,
            column: 12
          },
          end: {
            line: 361,
            column: 18
          }
        }, {
          start: {
            line: 362,
            column: 12
          },
          end: {
            line: 368,
            column: 18
          }
        }],
        line: 295
      },
      "15": {
        loc: {
          start: {
            line: 300,
            column: 20
          },
          end: {
            line: 300,
            column: 80
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 300,
            column: 20
          },
          end: {
            line: 300,
            column: 68
          }
        }, {
          start: {
            line: 300,
            column: 72
          },
          end: {
            line: 300,
            column: 80
          }
        }],
        line: 300
      },
      "16": {
        loc: {
          start: {
            line: 301,
            column: 20
          },
          end: {
            line: 301,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 20
          },
          end: {
            line: 301,
            column: 76
          }
        }, {
          start: {
            line: 301,
            column: 80
          },
          end: {
            line: 301,
            column: 83
          }
        }],
        line: 301
      },
      "17": {
        loc: {
          start: {
            line: 302,
            column: 20
          },
          end: {
            line: 302,
            column: 97
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 302,
            column: 20
          },
          end: {
            line: 302,
            column: 83
          }
        }, {
          start: {
            line: 302,
            column: 87
          },
          end: {
            line: 302,
            column: 97
          }
        }],
        line: 302
      },
      "18": {
        loc: {
          start: {
            line: 314,
            column: 20
          },
          end: {
            line: 314,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 314,
            column: 20
          },
          end: {
            line: 314,
            column: 70
          }
        }, {
          start: {
            line: 314,
            column: 74
          },
          end: {
            line: 314,
            column: 77
          }
        }],
        line: 314
      },
      "19": {
        loc: {
          start: {
            line: 315,
            column: 20
          },
          end: {
            line: 315,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 315,
            column: 20
          },
          end: {
            line: 315,
            column: 56
          }
        }, {
          start: {
            line: 315,
            column: 60
          },
          end: {
            line: 315,
            column: 61
          }
        }],
        line: 315
      },
      "20": {
        loc: {
          start: {
            line: 341,
            column: 15
          },
          end: {
            line: 341,
            column: 92
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 341,
            column: 15
          },
          end: {
            line: 341,
            column: 32
          }
        }, {
          start: {
            line: 341,
            column: 36
          },
          end: {
            line: 341,
            column: 92
          }
        }],
        line: 341
      },
      "21": {
        loc: {
          start: {
            line: 346,
            column: 20
          },
          end: {
            line: 346,
            column: 51
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 346,
            column: 36
          },
          end: {
            line: 346,
            column: 42
          }
        }, {
          start: {
            line: 346,
            column: 45
          },
          end: {
            line: 346,
            column: 51
          }
        }],
        line: 346
      },
      "22": {
        loc: {
          start: {
            line: 348,
            column: 27
          },
          end: {
            line: 348,
            column: 47
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 348,
            column: 27
          },
          end: {
            line: 348,
            column: 42
          }
        }, {
          start: {
            line: 348,
            column: 46
          },
          end: {
            line: 348,
            column: 47
          }
        }],
        line: 348
      },
      "23": {
        loc: {
          start: {
            line: 374,
            column: 8
          },
          end: {
            line: 410,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 375,
            column: 12
          },
          end: {
            line: 385,
            column: 18
          }
        }, {
          start: {
            line: 386,
            column: 12
          },
          end: {
            line: 397,
            column: 18
          }
        }, {
          start: {
            line: 398,
            column: 12
          },
          end: {
            line: 403,
            column: 18
          }
        }, {
          start: {
            line: 404,
            column: 12
          },
          end: {
            line: 409,
            column: 18
          }
        }],
        line: 374
      },
      "24": {
        loc: {
          start: {
            line: 381,
            column: 41
          },
          end: {
            line: 381,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 381,
            column: 41
          },
          end: {
            line: 381,
            column: 64
          }
        }, {
          start: {
            line: 381,
            column: 68
          },
          end: {
            line: 381,
            column: 70
          }
        }],
        line: 381
      },
      "25": {
        loc: {
          start: {
            line: 442,
            column: 29
          },
          end: {
            line: 442,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 442,
            column: 29
          },
          end: {
            line: 442,
            column: 52
          }
        }, {
          start: {
            line: 442,
            column: 56
          },
          end: {
            line: 442,
            column: 58
          }
        }],
        line: 442
      },
      "26": {
        loc: {
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 462,
            column: 8
          },
          end: {
            line: 471,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 462
      },
      "27": {
        loc: {
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 480,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 478,
            column: 8
          },
          end: {
            line: 480,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 478
      },
      "28": {
        loc: {
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 484,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 482,
            column: 8
          },
          end: {
            line: 484,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 482
      },
      "29": {
        loc: {
          start: {
            line: 493,
            column: 8
          },
          end: {
            line: 495,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 493,
            column: 8
          },
          end: {
            line: 495,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 493
      },
      "30": {
        loc: {
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 506,
            column: 8
          },
          end: {
            line: 508,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 506
      },
      "31": {
        loc: {
          start: {
            line: 534,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 534,
            column: 8
          },
          end: {
            line: 536,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 534
      },
      "32": {
        loc: {
          start: {
            line: 540,
            column: 8
          },
          end: {
            line: 542,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 540,
            column: 8
          },
          end: {
            line: 542,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 540
      },
      "33": {
        loc: {
          start: {
            line: 544,
            column: 8
          },
          end: {
            line: 546,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 544,
            column: 8
          },
          end: {
            line: 546,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 544
      },
      "34": {
        loc: {
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 564,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 554,
            column: 12
          },
          end: {
            line: 564,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 554
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0, 0, 0, 0],
      "5": [0, 0, 0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0, 0, 0, 0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0, 0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0, 0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/services/reports/generators/ReportGenerator.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/services/reports/generators/ReportGenerator.ts"],
      sourcesContent: ["import { AnalyticsEngine } from '../../analytics/AnalyticsEngine';\nimport { CostTracker } from '../../CostTracker';\nimport { \n  ReportData, \n  ReportTemplate, \n  ReportFilters, \n  ReportSection, \n  ReportSummary,\n  ChartData,\n  TableData,\n  MetricData,\n  ReportGenerationProgress\n} from '../../../types/reports';\nimport { ReportTemplates } from '../templates/ReportTemplates';\nimport { Database } from 'better-sqlite3';\nimport { initializeDatabase } from '../../../database/connection';\nimport { LRUCache } from 'lru-cache';\nimport { performance } from 'perf_hooks';\n\nexport class ReportGenerator {\n  private analyticsEngine: AnalyticsEngine;\n  private costTracker: CostTracker;\n  private db: any;\n  private progressCallbacks: Map<string, (progress: ReportGenerationProgress) => void>;\n  private templateCache: LRUCache<string, any>;\n  private dataCache: LRUCache<string, any>;\n  private performanceMetrics: Map<string, number[]>;\n\n  constructor() {\n    this.analyticsEngine = AnalyticsEngine.getInstance();\n    this.costTracker = new CostTracker();\n    this.initializeDb();\n    this.progressCallbacks = new Map();\n    \n    // Initialize caching for better performance\n    this.templateCache = new LRUCache({\n      max: 100,\n      ttl: 1000 * 60 * 30 // 30 minutes\n    });\n    \n    this.dataCache = new LRUCache({\n      max: 500,\n      ttl: 1000 * 60 * 10 // 10 minutes\n    });\n    \n    this.performanceMetrics = new Map();\n  }\n\n  private async initializeDb(): Promise<void> {\n    this.db = await initializeDatabase();\n  }\n\n  async generateReport(\n    templateId: string, \n    filters: ReportFilters = {},\n    progressCallback?: (progress: ReportGenerationProgress) => void\n  ): Promise<ReportData> {\n    const startTime = Date.now();\n    const reportId = `report_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    if (progressCallback) {\n      this.progressCallbacks.set(reportId, progressCallback);\n    }\n\n    try {\n      // Get template\n      const template = ReportTemplates.getTemplate(templateId);\n      if (!template) {\n        throw new Error(`Template not found: ${templateId}`);\n      }\n\n      this.updateProgress(reportId, 'processing', 10, 'Loading template and filters', 6);\n\n      // Generate report sections\n      const sections: ReportSection[] = [];\n      let currentStep = 1;\n\n      for (const field of template.fields) {\n        this.updateProgress(reportId, 'processing', 10 + (currentStep * 70 / template.fields.length), `Generating ${field.label}`, 6);\n        \n        const section = await this.generateSection(field, filters, template.type);\n        if (section) {\n          sections.push(section);\n        }\n        currentStep++;\n      }\n\n      this.updateProgress(reportId, 'processing', 85, 'Generating summary', 6);\n\n      // Generate summary\n      const summary = await this.generateSummary(sections, filters);\n\n      this.updateProgress(reportId, 'processing', 95, 'Finalizing report', 6);\n\n      // Calculate metadata\n      const metadata = await this.calculateMetadata(filters);\n\n      const report: ReportData = {\n        id: reportId,\n        template,\n        title: `${template.name} - ${new Date().toLocaleDateString()}`,\n        description: template.description,\n        generatedAt: new Date(),\n        filters,\n        sections,\n        summary,\n        metadata: {\n          ...metadata,\n          generationTime: Date.now() - startTime\n        }\n      };\n\n      this.updateProgress(reportId, 'completed', 100, 'Report generation completed', 6);\n\n      return report;\n    } catch (error) {\n      this.updateProgress(reportId, 'failed', 0, `Report generation failed: ${error.message}`, 6);\n      throw error;\n    } finally {\n      this.progressCallbacks.delete(reportId);\n    }\n  }\n\n  private async generateSection(field: any, filters: ReportFilters, templateType: string): Promise<ReportSection | null> {\n    const sectionId = `section_${field.key}_${Date.now()}`;\n    \n    switch (field.type) {\n      case 'metric':\n        return {\n          id: sectionId,\n          title: field.label,\n          description: field.description,\n          type: 'metrics',\n          content: await this.generateMetricContent(field, filters),\n          order: 1\n        };\n      \n      case 'chart':\n        return {\n          id: sectionId,\n          title: field.label,\n          description: field.description,\n          type: 'charts',\n          content: await this.generateChartContent(field, filters),\n          order: 2\n        };\n      \n      case 'table':\n        return {\n          id: sectionId,\n          title: field.label,\n          description: field.description,\n          type: 'tables',\n          content: await this.generateTableContent(field, filters),\n          order: 3\n        };\n      \n      case 'insight':\n        return {\n          id: sectionId,\n          title: field.label,\n          description: field.description,\n          type: 'insights',\n          content: await this.generateInsightContent(field, filters),\n          order: 4\n        };\n      \n      default:\n        return null;\n    }\n  }\n\n  private async generateMetricContent(field: any, filters: ReportFilters): Promise<MetricData[]> {\n    const metrics: MetricData[] = [];\n    \n    // Get analytics data\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    // Based on field key, generate appropriate metrics\n    switch (field.key) {\n      case 'overview-metrics':\n        metrics.push(\n          {\n            label: 'Total Tests',\n            value: dashboardMetrics.historical.totalTests,\n            unit: 'tests',\n            status: 'good'\n          },\n          {\n            label: 'Success Rate',\n            value: (dashboardMetrics.historical.overallSuccessRate * 100).toFixed(1),\n            unit: '%',\n            status: dashboardMetrics.historical.overallSuccessRate > 0.8 ? 'good' : 'warning'\n          },\n          {\n            label: 'Total Cost',\n            value: costSummary.totalCost.toFixed(2),\n            unit: 'USD',\n            status: 'good'\n          },\n          {\n            label: 'Avg Response Time',\n            value: dashboardMetrics.historical.averageExecutionTime.toFixed(0),\n            unit: 'ms',\n            status: dashboardMetrics.historical.averageExecutionTime < 2000 ? 'good' : 'warning'\n          }\n        );\n        break;\n\n      case 'cost-overview':\n        metrics.push(\n          {\n            label: 'Total Cost',\n            value: costSummary.totalCost.toFixed(2),\n            unit: 'USD',\n            status: 'good'\n          },\n          {\n            label: 'Total Tokens',\n            value: costSummary.totalTokens.toLocaleString(),\n            unit: 'tokens',\n            status: 'good'\n          },\n          {\n            label: 'Cost per Execution',\n            value: costSummary.averageCostPerExecution.toFixed(4),\n            unit: 'USD',\n            status: 'good'\n          },\n          {\n            label: 'Total Executions',\n            value: costSummary.totalExecutions,\n            unit: 'executions',\n            status: 'good'\n          }\n        );\n        break;\n\n      case 'performance-overview':\n        metrics.push(\n          {\n            label: 'Tests per Second',\n            value: dashboardMetrics.realtime.testsPerSecond.toFixed(2),\n            unit: 'tps',\n            status: 'good'\n          },\n          {\n            label: 'Average Response Time',\n            value: dashboardMetrics.realtime.averageResponseTime.toFixed(0),\n            unit: 'ms',\n            status: dashboardMetrics.realtime.averageResponseTime < 2000 ? 'good' : 'warning'\n          },\n          {\n            label: 'Error Rate',\n            value: (dashboardMetrics.realtime.errorRate * 100).toFixed(1),\n            unit: '%',\n            status: dashboardMetrics.realtime.errorRate < 0.1 ? 'good' : 'warning'\n          },\n          {\n            label: 'Active Tests',\n            value: dashboardMetrics.realtime.activeTests,\n            unit: 'tests',\n            status: 'good'\n          }\n        );\n        break;\n\n      case 'roi-analysis':\n        const roi = await this.costTracker.calculateROI(filters.startDate, filters.endDate);\n        metrics.push(\n          {\n            label: 'Success Rate',\n            value: roi.successRate.toFixed(1),\n            unit: '%',\n            status: roi.successRate > 80 ? 'good' : 'warning'\n          },\n          {\n            label: 'Cost per Success',\n            value: roi.averageCostPerSuccess.toFixed(4),\n            unit: 'USD',\n            status: 'good'\n          },\n          {\n            label: 'Cost Efficiency',\n            value: roi.costEfficiency.toFixed(2),\n            unit: 'successes/USD',\n            status: 'good'\n          }\n        );\n        break;\n\n      default:\n        // Generic metrics fallback\n        metrics.push(\n          {\n            label: 'Total Tests',\n            value: dashboardMetrics.historical.totalTests,\n            unit: 'tests',\n            status: 'good'\n          }\n        );\n    }\n\n    return metrics;\n  }\n\n  private async generateChartContent(field: any, filters: ReportFilters): Promise<ChartData> {\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    switch (field.key) {\n      case 'cost-summary':\n      case 'cost-by-model':\n        return {\n          labels: Object.keys(costSummary.costByModel),\n          datasets: [{\n            label: 'Cost by Model',\n            data: Object.values(costSummary.costByModel),\n            backgroundColor: [\n              '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'\n            ],\n            borderWidth: 1\n          }]\n        };\n\n      case 'performance-trends':\n        return {\n          labels: dashboardMetrics.trends.testsOverTime.map(t => \n            new Date(t.timestamp).toLocaleDateString()\n          ),\n          datasets: [{\n            label: 'Tests Over Time',\n            data: dashboardMetrics.trends.testsOverTime.map(t => t.count),\n            borderColor: '#36A2EB',\n            backgroundColor: 'rgba(54, 162, 235, 0.1)'\n          }]\n        };\n\n      case 'cost-trends':\n        const usageAnalytics = await this.costTracker.getUsageAnalytics(\n          filters.startDate || new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString(),\n          filters.endDate || new Date().toISOString()\n        );\n        return {\n          labels: usageAnalytics.costTrend.map(t => new Date(t.date).toLocaleDateString()),\n          datasets: [{\n            label: 'Daily Cost',\n            data: usageAnalytics.costTrend.map(t => t.cost),\n            borderColor: '#FF6384',\n            backgroundColor: 'rgba(255, 99, 132, 0.1)',\n          }]\n        };\n\n      case 'response-times':\n        return {\n          labels: dashboardMetrics.trends.performanceOverTime.map(t => \n            new Date(t.timestamp).toLocaleDateString()\n          ),\n          datasets: [{\n            label: 'Average Response Time (ms)',\n            data: dashboardMetrics.trends.performanceOverTime.map(t => t.avgTime),\n            borderColor: '#FFCE56',\n            backgroundColor: 'rgba(255, 206, 86, 0.1)',\n          }]\n        };\n\n      default:\n        return {\n          labels: ['No Data'],\n          datasets: [{\n            label: 'No Data Available',\n            data: [0],\n            backgroundColor: '#cccccc'\n          }]\n        };\n    }\n  }\n\n  private async generateTableContent(field: any, filters: ReportFilters): Promise<TableData> {\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    switch (field.key) {\n      case 'model-performance':\n        const modelData = dashboardMetrics.historical.mostUsedModels.map(model => [\n          model.model,\n          model.count,\n          costSummary.costByModel[model.model]?.toFixed(4) || '0.0000',\n          costSummary.tokensByModel[model.model]?.toLocaleString() || '0',\n          (costSummary.costByModel[model.model] / model.count).toFixed(6) || '0.000000'\n        ]);\n\n        return {\n          headers: ['Model', 'Executions', 'Total Cost (USD)', 'Total Tokens', 'Cost per Execution'],\n          rows: modelData,\n          totalRows: modelData.length,\n          sortable: true\n        };\n\n      case 'usage-patterns':\n        const usageData = Object.entries(costSummary.costByModel).map(([model, cost]) => [\n          model,\n          cost.toFixed(4),\n          costSummary.tokensByModel[model]?.toLocaleString() || '0',\n          costSummary.executionsByModel[model] || 0,\n          ((cost / costSummary.totalCost) * 100).toFixed(1) + '%'\n        ]);\n\n        return {\n          headers: ['Model', 'Cost (USD)', 'Tokens', 'Executions', 'Cost %'],\n          rows: usageData,\n          totalRows: usageData.length,\n          sortable: true\n        };\n\n      case 'detailed-results':\n        // Get recent test results\n        const recentResults = this.db.prepare(`\n          SELECT \n            tr.id,\n            tr.test_case_id,\n            tr.execution_id,\n            tr.model,\n            tr.passed,\n            tr.execution_time_ms,\n            tr.created_at,\n            ct.cost_usd\n          FROM test_results tr\n          LEFT JOIN cost_tracking ct ON tr.execution_id = ct.execution_id\n          WHERE tr.created_at >= ?\n          ORDER BY tr.created_at DESC\n          LIMIT 50\n        `).all(filters.startDate || new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());\n\n        const resultData = recentResults.map(result => [\n          result.id,\n          result.test_case_id,\n          result.model,\n          result.passed ? 'Pass' : 'Fail',\n          result.execution_time_ms + 'ms',\n          '$' + (result.cost_usd || 0).toFixed(4),\n          new Date(result.created_at).toLocaleString()\n        ]);\n\n        return {\n          headers: ['ID', 'Test Case', 'Model', 'Status', 'Time', 'Cost', 'Date'],\n          rows: resultData,\n          totalRows: resultData.length,\n          sortable: true,\n          pagination: {\n            page: 1,\n            pageSize: 50,\n            totalPages: Math.ceil(resultData.length / 50)\n          }\n        };\n\n      default:\n        return {\n          headers: ['No Data'],\n          rows: [['No data available']],\n          totalRows: 0,\n          sortable: false\n        };\n    }\n  }\n\n  private async generateInsightContent(field: any, filters: ReportFilters): Promise<any> {\n    const insights = await this.analyticsEngine.generateInsights();\n    const costRecommendations = await this.costTracker.generateOptimizationRecommendations(\n      filters.startDate, filters.endDate\n    );\n\n    switch (field.key) {\n      case 'key-insights':\n        return {\n          insights: insights.map(insight => ({\n            title: insight.title,\n            description: insight.description,\n            severity: insight.severity,\n            recommendations: insight.recommendations || []\n          })),\n          totalInsights: insights.length,\n          criticalInsights: insights.filter(i => i.severity === 'critical').length\n        };\n\n      case 'cost-optimization':\n        return {\n          recommendations: costRecommendations.map(rec => ({\n            title: rec.title,\n            description: rec.description,\n            estimatedSavings: rec.estimatedSavings,\n            priority: rec.priority,\n            actionRequired: rec.actionRequired\n          })),\n          totalRecommendations: costRecommendations.length,\n          totalPotentialSavings: costRecommendations.reduce((sum, rec) => sum + rec.estimatedSavings, 0)\n        };\n\n      case 'recommendations':\n        return {\n          performance: insights.filter(i => i.title.toLowerCase().includes('performance')),\n          cost: costRecommendations.filter(r => r.priority === 'high'),\n          general: insights.filter(i => !i.title.toLowerCase().includes('performance'))\n        };\n\n      default:\n        return {\n          insights: [],\n          recommendations: [],\n          totalInsights: 0\n        };\n    }\n  }\n\n  private async generateSummary(sections: ReportSection[], filters: ReportFilters): Promise<ReportSummary> {\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    const keyMetrics = [\n      {\n        label: 'Total Tests',\n        value: dashboardMetrics.historical.totalTests,\n        trend: 'stable' as const\n      },\n      {\n        label: 'Success Rate',\n        value: (dashboardMetrics.historical.overallSuccessRate * 100).toFixed(1) + '%',\n        trend: 'up' as const\n      },\n      {\n        label: 'Total Cost',\n        value: '$' + costSummary.totalCost.toFixed(2),\n        trend: 'stable' as const\n      },\n      {\n        label: 'Avg Response Time',\n        value: dashboardMetrics.historical.averageExecutionTime.toFixed(0) + 'ms',\n        trend: 'down' as const\n      }\n    ];\n\n    const insights = await this.analyticsEngine.generateInsights();\n    const summaryInsights = insights.map(insight => ({\n      title: insight.title,\n      description: insight.description,\n      severity: insight.severity,\n      recommendations: insight.recommendations || []\n    }));\n\n    return {\n      keyMetrics,\n      insights: summaryInsights,\n      generationTime: Date.now() - Date.now() // Will be set correctly by caller\n    };\n  }\n\n  private async calculateMetadata(filters: ReportFilters): Promise<any> {\n    const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n    const costSummary = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n\n    return {\n      totalExecutions: dashboardMetrics.historical.totalExecutions,\n      totalCost: costSummary.totalCost,\n      averagePerformance: dashboardMetrics.historical.averageExecutionTime,\n      successRate: dashboardMetrics.historical.overallSuccessRate * 100\n    };\n  }\n\n  private updateProgress(\n    id: string, \n    status: ReportGenerationProgress['status'], \n    progress: number, \n    currentStep: string, \n    totalSteps: number\n  ): void {\n    const callback = this.progressCallbacks.get(id);\n    if (callback) {\n      callback({\n        id,\n        status,\n        progress,\n        currentStep,\n        totalSteps,\n        startTime: new Date()\n      });\n    }\n  }\n  \n  /**\n   * Get cached template\n   */\n  private async getCachedTemplate(templateId: string): Promise<any> {\n    const cached = this.templateCache.get(templateId);\n    if (cached) {\n      return cached;\n    }\n    \n    const template = ReportTemplates.getTemplate(templateId);\n    if (template) {\n      this.templateCache.set(templateId, template);\n    }\n    \n    return template;\n  }\n  \n  /**\n   * Get cached analytics data\n   */\n  private async getCachedAnalyticsData(filters: ReportFilters): Promise<any> {\n    const cacheKey = `analytics_${JSON.stringify(filters)}`;\n    const cached = this.dataCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    const data = await this.analyticsEngine.getDashboardMetrics();\n    this.dataCache.set(cacheKey, data, { ttl: 1000 * 60 * 5 }); // 5 minutes\n    \n    return data;\n  }\n  \n  /**\n   * Get cached cost data\n   */\n  private async getCachedCostData(filters: ReportFilters): Promise<any> {\n    const cacheKey = `cost_${JSON.stringify(filters)}`;\n    const cached = this.dataCache.get(cacheKey);\n    if (cached) {\n      return cached;\n    }\n    \n    const data = await this.costTracker.getCostSummary(filters.startDate, filters.endDate);\n    this.dataCache.set(cacheKey, data, { ttl: 1000 * 60 * 5 }); // 5 minutes\n    \n    return data;\n  }\n  \n  /**\n   * Pre-load commonly used data\n   */\n  private async preloadCommonData(): Promise<void> {\n    try {\n      // Pre-load dashboard metrics\n      const dashboardMetrics = await this.analyticsEngine.getDashboardMetrics();\n      this.dataCache.set('dashboard_metrics', dashboardMetrics, { ttl: 1000 * 60 * 5 });\n      \n      // Pre-load cost summary\n      const costSummary = await this.costTracker.getCostSummary();\n      this.dataCache.set('cost_summary', costSummary, { ttl: 1000 * 60 * 5 });\n      \n      console.log('Common report data pre-loaded successfully');\n    } catch (error) {\n      console.warn('Failed to pre-load common data:', error.message);\n    }\n  }\n  \n  /**\n   * Track performance metrics\n   */\n  private trackPerformance(operation: string, duration: number): void {\n    if (!this.performanceMetrics.has(operation)) {\n      this.performanceMetrics.set(operation, []);\n    }\n    \n    const metrics = this.performanceMetrics.get(operation)!;\n    metrics.push(duration);\n    \n    // Keep only last 100 measurements\n    if (metrics.length > 100) {\n      metrics.shift();\n    }\n    \n    // Log slow operations\n    if (duration > 5000) { // 5 seconds\n      console.warn(`Slow report operation: ${operation} took ${duration.toFixed(2)}ms`);\n    }\n  }\n  \n  /**\n   * Get performance statistics\n   */\n  public getPerformanceStats(): Record<string, { avg: number; max: number; min: number; count: number }> {\n    const stats: Record<string, { avg: number; max: number; min: number; count: number }> = {};\n    \n    for (const [operation, metrics] of this.performanceMetrics) {\n      if (metrics.length > 0) {\n        const avg = metrics.reduce((sum, time) => sum + time, 0) / metrics.length;\n        const max = Math.max(...metrics);\n        const min = Math.min(...metrics);\n        \n        stats[operation] = {\n          avg: Math.round(avg),\n          max: Math.round(max),\n          min: Math.round(min),\n          count: metrics.length\n        };\n      }\n    }\n    \n    return stats;\n  }\n  \n  /**\n   * Clear caches\n   */\n  public clearCaches(): void {\n    this.templateCache.clear();\n    this.dataCache.clear();\n    this.performanceMetrics.clear();\n    console.log('Report generator caches cleared');\n  }\n}"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4ca514a8aba324ea4d2084050fd631f26ec31585"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ioig6gd0g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ioig6gd0g();
cov_1ioig6gd0g().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1ioig6gd0g().s[1]++;
exports.ReportGenerator = void 0;
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_1ioig6gd0g().s[2]++, require("../../analytics/AnalyticsEngine"));
const CostTracker_1 =
/* istanbul ignore next */
(cov_1ioig6gd0g().s[3]++, require("../../CostTracker"));
const ReportTemplates_1 =
/* istanbul ignore next */
(cov_1ioig6gd0g().s[4]++, require("../templates/ReportTemplates"));
const connection_1 =
/* istanbul ignore next */
(cov_1ioig6gd0g().s[5]++, require("../../../database/connection"));
const lru_cache_1 =
/* istanbul ignore next */
(cov_1ioig6gd0g().s[6]++, require("lru-cache"));
class ReportGenerator {
  constructor() {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[0]++;
    cov_1ioig6gd0g().s[7]++;
    this.analyticsEngine = AnalyticsEngine_1.AnalyticsEngine.getInstance();
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[8]++;
    this.costTracker = new CostTracker_1.CostTracker();
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[9]++;
    this.initializeDb();
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[10]++;
    this.progressCallbacks = new Map();
    // Initialize caching for better performance
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[11]++;
    this.templateCache = new lru_cache_1.LRUCache({
      max: 100,
      ttl: 1000 * 60 * 30 // 30 minutes
    });
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[12]++;
    this.dataCache = new lru_cache_1.LRUCache({
      max: 500,
      ttl: 1000 * 60 * 10 // 10 minutes
    });
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[13]++;
    this.performanceMetrics = new Map();
  }
  async initializeDb() {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[1]++;
    cov_1ioig6gd0g().s[14]++;
    this.db = await (0, connection_1.initializeDatabase)();
  }
  async generateReport(templateId, filters =
  /* istanbul ignore next */
  (cov_1ioig6gd0g().b[0][0]++, {}), progressCallback) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[2]++;
    const startTime =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[15]++, Date.now());
    const reportId =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[16]++, `report_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[17]++;
    if (progressCallback) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().b[1][0]++;
      cov_1ioig6gd0g().s[18]++;
      this.progressCallbacks.set(reportId, progressCallback);
    } else
    /* istanbul ignore next */
    {
      cov_1ioig6gd0g().b[1][1]++;
    }
    cov_1ioig6gd0g().s[19]++;
    try {
      // Get template
      const template =
      /* istanbul ignore next */
      (cov_1ioig6gd0g().s[20]++, ReportTemplates_1.ReportTemplates.getTemplate(templateId));
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[21]++;
      if (!template) {
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[2][0]++;
        cov_1ioig6gd0g().s[22]++;
        throw new Error(`Template not found: ${templateId}`);
      } else
      /* istanbul ignore next */
      {
        cov_1ioig6gd0g().b[2][1]++;
      }
      cov_1ioig6gd0g().s[23]++;
      this.updateProgress(reportId, 'processing', 10, 'Loading template and filters', 6);
      // Generate report sections
      const sections =
      /* istanbul ignore next */
      (cov_1ioig6gd0g().s[24]++, []);
      let currentStep =
      /* istanbul ignore next */
      (cov_1ioig6gd0g().s[25]++, 1);
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[26]++;
      for (const field of template.fields) {
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[27]++;
        this.updateProgress(reportId, 'processing', 10 + currentStep * 70 / template.fields.length, `Generating ${field.label}`, 6);
        const section =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[28]++, await this.generateSection(field, filters, template.type));
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[29]++;
        if (section) {
          /* istanbul ignore next */
          cov_1ioig6gd0g().b[3][0]++;
          cov_1ioig6gd0g().s[30]++;
          sections.push(section);
        } else
        /* istanbul ignore next */
        {
          cov_1ioig6gd0g().b[3][1]++;
        }
        cov_1ioig6gd0g().s[31]++;
        currentStep++;
      }
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[32]++;
      this.updateProgress(reportId, 'processing', 85, 'Generating summary', 6);
      // Generate summary
      const summary =
      /* istanbul ignore next */
      (cov_1ioig6gd0g().s[33]++, await this.generateSummary(sections, filters));
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[34]++;
      this.updateProgress(reportId, 'processing', 95, 'Finalizing report', 6);
      // Calculate metadata
      const metadata =
      /* istanbul ignore next */
      (cov_1ioig6gd0g().s[35]++, await this.calculateMetadata(filters));
      const report =
      /* istanbul ignore next */
      (cov_1ioig6gd0g().s[36]++, {
        id: reportId,
        template,
        title: `${template.name} - ${new Date().toLocaleDateString()}`,
        description: template.description,
        generatedAt: new Date(),
        filters,
        sections,
        summary,
        metadata: {
          ...metadata,
          generationTime: Date.now() - startTime
        }
      });
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[37]++;
      this.updateProgress(reportId, 'completed', 100, 'Report generation completed', 6);
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[38]++;
      return report;
    } catch (error) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[39]++;
      this.updateProgress(reportId, 'failed', 0, `Report generation failed: ${error.message}`, 6);
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[40]++;
      throw error;
    } finally {
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[41]++;
      this.progressCallbacks.delete(reportId);
    }
  }
  async generateSection(field, filters, templateType) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[3]++;
    const sectionId =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[42]++, `section_${field.key}_${Date.now()}`);
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[43]++;
    switch (field.type) {
      case 'metric':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[4][0]++;
        cov_1ioig6gd0g().s[44]++;
        return {
          id: sectionId,
          title: field.label,
          description: field.description,
          type: 'metrics',
          content: await this.generateMetricContent(field, filters),
          order: 1
        };
      case 'chart':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[4][1]++;
        cov_1ioig6gd0g().s[45]++;
        return {
          id: sectionId,
          title: field.label,
          description: field.description,
          type: 'charts',
          content: await this.generateChartContent(field, filters),
          order: 2
        };
      case 'table':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[4][2]++;
        cov_1ioig6gd0g().s[46]++;
        return {
          id: sectionId,
          title: field.label,
          description: field.description,
          type: 'tables',
          content: await this.generateTableContent(field, filters),
          order: 3
        };
      case 'insight':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[4][3]++;
        cov_1ioig6gd0g().s[47]++;
        return {
          id: sectionId,
          title: field.label,
          description: field.description,
          type: 'insights',
          content: await this.generateInsightContent(field, filters),
          order: 4
        };
      default:
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[4][4]++;
        cov_1ioig6gd0g().s[48]++;
        return null;
    }
  }
  async generateMetricContent(field, filters) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[4]++;
    const metrics =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[49]++, []);
    // Get analytics data
    const dashboardMetrics =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[50]++, await this.analyticsEngine.getDashboardMetrics());
    const costSummary =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[51]++, await this.costTracker.getCostSummary(filters.startDate, filters.endDate));
    // Based on field key, generate appropriate metrics
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[52]++;
    switch (field.key) {
      case 'overview-metrics':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[5][0]++;
        cov_1ioig6gd0g().s[53]++;
        metrics.push({
          label: 'Total Tests',
          value: dashboardMetrics.historical.totalTests,
          unit: 'tests',
          status: 'good'
        }, {
          label: 'Success Rate',
          value: (dashboardMetrics.historical.overallSuccessRate * 100).toFixed(1),
          unit: '%',
          status: dashboardMetrics.historical.overallSuccessRate > 0.8 ?
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[6][0]++, 'good') :
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[6][1]++, 'warning')
        }, {
          label: 'Total Cost',
          value: costSummary.totalCost.toFixed(2),
          unit: 'USD',
          status: 'good'
        }, {
          label: 'Avg Response Time',
          value: dashboardMetrics.historical.averageExecutionTime.toFixed(0),
          unit: 'ms',
          status: dashboardMetrics.historical.averageExecutionTime < 2000 ?
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[7][0]++, 'good') :
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[7][1]++, 'warning')
        });
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[54]++;
        break;
      case 'cost-overview':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[5][1]++;
        cov_1ioig6gd0g().s[55]++;
        metrics.push({
          label: 'Total Cost',
          value: costSummary.totalCost.toFixed(2),
          unit: 'USD',
          status: 'good'
        }, {
          label: 'Total Tokens',
          value: costSummary.totalTokens.toLocaleString(),
          unit: 'tokens',
          status: 'good'
        }, {
          label: 'Cost per Execution',
          value: costSummary.averageCostPerExecution.toFixed(4),
          unit: 'USD',
          status: 'good'
        }, {
          label: 'Total Executions',
          value: costSummary.totalExecutions,
          unit: 'executions',
          status: 'good'
        });
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[56]++;
        break;
      case 'performance-overview':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[5][2]++;
        cov_1ioig6gd0g().s[57]++;
        metrics.push({
          label: 'Tests per Second',
          value: dashboardMetrics.realtime.testsPerSecond.toFixed(2),
          unit: 'tps',
          status: 'good'
        }, {
          label: 'Average Response Time',
          value: dashboardMetrics.realtime.averageResponseTime.toFixed(0),
          unit: 'ms',
          status: dashboardMetrics.realtime.averageResponseTime < 2000 ?
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[8][0]++, 'good') :
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[8][1]++, 'warning')
        }, {
          label: 'Error Rate',
          value: (dashboardMetrics.realtime.errorRate * 100).toFixed(1),
          unit: '%',
          status: dashboardMetrics.realtime.errorRate < 0.1 ?
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[9][0]++, 'good') :
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[9][1]++, 'warning')
        }, {
          label: 'Active Tests',
          value: dashboardMetrics.realtime.activeTests,
          unit: 'tests',
          status: 'good'
        });
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[58]++;
        break;
      case 'roi-analysis':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[5][3]++;
        const roi =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[59]++, await this.costTracker.calculateROI(filters.startDate, filters.endDate));
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[60]++;
        metrics.push({
          label: 'Success Rate',
          value: roi.successRate.toFixed(1),
          unit: '%',
          status: roi.successRate > 80 ?
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[10][0]++, 'good') :
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[10][1]++, 'warning')
        }, {
          label: 'Cost per Success',
          value: roi.averageCostPerSuccess.toFixed(4),
          unit: 'USD',
          status: 'good'
        }, {
          label: 'Cost Efficiency',
          value: roi.costEfficiency.toFixed(2),
          unit: 'successes/USD',
          status: 'good'
        });
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[61]++;
        break;
      default:
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[5][4]++;
        cov_1ioig6gd0g().s[62]++;
        // Generic metrics fallback
        metrics.push({
          label: 'Total Tests',
          value: dashboardMetrics.historical.totalTests,
          unit: 'tests',
          status: 'good'
        });
    }
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[63]++;
    return metrics;
  }
  async generateChartContent(field, filters) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[5]++;
    const dashboardMetrics =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[64]++, await this.analyticsEngine.getDashboardMetrics());
    const costSummary =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[65]++, await this.costTracker.getCostSummary(filters.startDate, filters.endDate));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[66]++;
    switch (field.key) {
      case 'cost-summary':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[11][0]++;
      case 'cost-by-model':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[11][1]++;
        cov_1ioig6gd0g().s[67]++;
        return {
          labels: Object.keys(costSummary.costByModel),
          datasets: [{
            label: 'Cost by Model',
            data: Object.values(costSummary.costByModel),
            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF'],
            borderWidth: 1
          }]
        };
      case 'performance-trends':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[11][2]++;
        cov_1ioig6gd0g().s[68]++;
        return {
          labels: dashboardMetrics.trends.testsOverTime.map(t => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[6]++;
            cov_1ioig6gd0g().s[69]++;
            return new Date(t.timestamp).toLocaleDateString();
          }),
          datasets: [{
            label: 'Tests Over Time',
            data: dashboardMetrics.trends.testsOverTime.map(t => {
              /* istanbul ignore next */
              cov_1ioig6gd0g().f[7]++;
              cov_1ioig6gd0g().s[70]++;
              return t.count;
            }),
            borderColor: '#36A2EB',
            backgroundColor: 'rgba(54, 162, 235, 0.1)'
          }]
        };
      case 'cost-trends':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[11][3]++;
        const usageAnalytics =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[71]++, await this.costTracker.getUsageAnalytics(
        /* istanbul ignore next */
        (cov_1ioig6gd0g().b[12][0]++, filters.startDate) ||
        /* istanbul ignore next */
        (cov_1ioig6gd0g().b[12][1]++, new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()),
        /* istanbul ignore next */
        (cov_1ioig6gd0g().b[13][0]++, filters.endDate) ||
        /* istanbul ignore next */
        (cov_1ioig6gd0g().b[13][1]++, new Date().toISOString())));
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[72]++;
        return {
          labels: usageAnalytics.costTrend.map(t => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[8]++;
            cov_1ioig6gd0g().s[73]++;
            return new Date(t.date).toLocaleDateString();
          }),
          datasets: [{
            label: 'Daily Cost',
            data: usageAnalytics.costTrend.map(t => {
              /* istanbul ignore next */
              cov_1ioig6gd0g().f[9]++;
              cov_1ioig6gd0g().s[74]++;
              return t.cost;
            }),
            borderColor: '#FF6384',
            backgroundColor: 'rgba(255, 99, 132, 0.1)'
          }]
        };
      case 'response-times':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[11][4]++;
        cov_1ioig6gd0g().s[75]++;
        return {
          labels: dashboardMetrics.trends.performanceOverTime.map(t => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[10]++;
            cov_1ioig6gd0g().s[76]++;
            return new Date(t.timestamp).toLocaleDateString();
          }),
          datasets: [{
            label: 'Average Response Time (ms)',
            data: dashboardMetrics.trends.performanceOverTime.map(t => {
              /* istanbul ignore next */
              cov_1ioig6gd0g().f[11]++;
              cov_1ioig6gd0g().s[77]++;
              return t.avgTime;
            }),
            borderColor: '#FFCE56',
            backgroundColor: 'rgba(255, 206, 86, 0.1)'
          }]
        };
      default:
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[11][5]++;
        cov_1ioig6gd0g().s[78]++;
        return {
          labels: ['No Data'],
          datasets: [{
            label: 'No Data Available',
            data: [0],
            backgroundColor: '#cccccc'
          }]
        };
    }
  }
  async generateTableContent(field, filters) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[12]++;
    const dashboardMetrics =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[79]++, await this.analyticsEngine.getDashboardMetrics());
    const costSummary =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[80]++, await this.costTracker.getCostSummary(filters.startDate, filters.endDate));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[81]++;
    switch (field.key) {
      case 'model-performance':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[14][0]++;
        const modelData =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[82]++, dashboardMetrics.historical.mostUsedModels.map(model => {
          /* istanbul ignore next */
          cov_1ioig6gd0g().f[13]++;
          cov_1ioig6gd0g().s[83]++;
          return [model.model, model.count,
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[15][0]++, costSummary.costByModel[model.model]?.toFixed(4)) ||
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[15][1]++, '0.0000'),
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[16][0]++, costSummary.tokensByModel[model.model]?.toLocaleString()) ||
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[16][1]++, '0'),
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[17][0]++, (costSummary.costByModel[model.model] / model.count).toFixed(6)) ||
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[17][1]++, '0.000000')];
        }));
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[84]++;
        return {
          headers: ['Model', 'Executions', 'Total Cost (USD)', 'Total Tokens', 'Cost per Execution'],
          rows: modelData,
          totalRows: modelData.length,
          sortable: true
        };
      case 'usage-patterns':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[14][1]++;
        const usageData =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[85]++, Object.entries(costSummary.costByModel).map(([model, cost]) => {
          /* istanbul ignore next */
          cov_1ioig6gd0g().f[14]++;
          cov_1ioig6gd0g().s[86]++;
          return [model, cost.toFixed(4),
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[18][0]++, costSummary.tokensByModel[model]?.toLocaleString()) ||
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[18][1]++, '0'),
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[19][0]++, costSummary.executionsByModel[model]) ||
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[19][1]++, 0), (cost / costSummary.totalCost * 100).toFixed(1) + '%'];
        }));
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[87]++;
        return {
          headers: ['Model', 'Cost (USD)', 'Tokens', 'Executions', 'Cost %'],
          rows: usageData,
          totalRows: usageData.length,
          sortable: true
        };
      case 'detailed-results':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[14][2]++;
        // Get recent test results
        const recentResults =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[88]++, this.db.prepare(`
          SELECT 
            tr.id,
            tr.test_case_id,
            tr.execution_id,
            tr.model,
            tr.passed,
            tr.execution_time_ms,
            tr.created_at,
            ct.cost_usd
          FROM test_results tr
          LEFT JOIN cost_tracking ct ON tr.execution_id = ct.execution_id
          WHERE tr.created_at >= ?
          ORDER BY tr.created_at DESC
          LIMIT 50
        `).all(
        /* istanbul ignore next */
        (cov_1ioig6gd0g().b[20][0]++, filters.startDate) ||
        /* istanbul ignore next */
        (cov_1ioig6gd0g().b[20][1]++, new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())));
        const resultData =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[89]++, recentResults.map(result => {
          /* istanbul ignore next */
          cov_1ioig6gd0g().f[15]++;
          cov_1ioig6gd0g().s[90]++;
          return [result.id, result.test_case_id, result.model, result.passed ?
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[21][0]++, 'Pass') :
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[21][1]++, 'Fail'), result.execution_time_ms + 'ms', '$' + (
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[22][0]++, result.cost_usd) ||
          /* istanbul ignore next */
          (cov_1ioig6gd0g().b[22][1]++, 0)).toFixed(4), new Date(result.created_at).toLocaleString()];
        }));
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[91]++;
        return {
          headers: ['ID', 'Test Case', 'Model', 'Status', 'Time', 'Cost', 'Date'],
          rows: resultData,
          totalRows: resultData.length,
          sortable: true,
          pagination: {
            page: 1,
            pageSize: 50,
            totalPages: Math.ceil(resultData.length / 50)
          }
        };
      default:
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[14][3]++;
        cov_1ioig6gd0g().s[92]++;
        return {
          headers: ['No Data'],
          rows: [['No data available']],
          totalRows: 0,
          sortable: false
        };
    }
  }
  async generateInsightContent(field, filters) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[16]++;
    const insights =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[93]++, await this.analyticsEngine.generateInsights());
    const costRecommendations =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[94]++, await this.costTracker.generateOptimizationRecommendations(filters.startDate, filters.endDate));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[95]++;
    switch (field.key) {
      case 'key-insights':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[23][0]++;
        cov_1ioig6gd0g().s[96]++;
        return {
          insights: insights.map(insight => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[17]++;
            cov_1ioig6gd0g().s[97]++;
            return {
              title: insight.title,
              description: insight.description,
              severity: insight.severity,
              recommendations:
              /* istanbul ignore next */
              (cov_1ioig6gd0g().b[24][0]++, insight.recommendations) ||
              /* istanbul ignore next */
              (cov_1ioig6gd0g().b[24][1]++, [])
            };
          }),
          totalInsights: insights.length,
          criticalInsights: insights.filter(i => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[18]++;
            cov_1ioig6gd0g().s[98]++;
            return i.severity === 'critical';
          }).length
        };
      case 'cost-optimization':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[23][1]++;
        cov_1ioig6gd0g().s[99]++;
        return {
          recommendations: costRecommendations.map(rec => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[19]++;
            cov_1ioig6gd0g().s[100]++;
            return {
              title: rec.title,
              description: rec.description,
              estimatedSavings: rec.estimatedSavings,
              priority: rec.priority,
              actionRequired: rec.actionRequired
            };
          }),
          totalRecommendations: costRecommendations.length,
          totalPotentialSavings: costRecommendations.reduce((sum, rec) => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[20]++;
            cov_1ioig6gd0g().s[101]++;
            return sum + rec.estimatedSavings;
          }, 0)
        };
      case 'recommendations':
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[23][2]++;
        cov_1ioig6gd0g().s[102]++;
        return {
          performance: insights.filter(i => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[21]++;
            cov_1ioig6gd0g().s[103]++;
            return i.title.toLowerCase().includes('performance');
          }),
          cost: costRecommendations.filter(r => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[22]++;
            cov_1ioig6gd0g().s[104]++;
            return r.priority === 'high';
          }),
          general: insights.filter(i => {
            /* istanbul ignore next */
            cov_1ioig6gd0g().f[23]++;
            cov_1ioig6gd0g().s[105]++;
            return !i.title.toLowerCase().includes('performance');
          })
        };
      default:
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[23][3]++;
        cov_1ioig6gd0g().s[106]++;
        return {
          insights: [],
          recommendations: [],
          totalInsights: 0
        };
    }
  }
  async generateSummary(sections, filters) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[24]++;
    const dashboardMetrics =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[107]++, await this.analyticsEngine.getDashboardMetrics());
    const costSummary =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[108]++, await this.costTracker.getCostSummary(filters.startDate, filters.endDate));
    const keyMetrics =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[109]++, [{
      label: 'Total Tests',
      value: dashboardMetrics.historical.totalTests,
      trend: 'stable'
    }, {
      label: 'Success Rate',
      value: (dashboardMetrics.historical.overallSuccessRate * 100).toFixed(1) + '%',
      trend: 'up'
    }, {
      label: 'Total Cost',
      value: '$' + costSummary.totalCost.toFixed(2),
      trend: 'stable'
    }, {
      label: 'Avg Response Time',
      value: dashboardMetrics.historical.averageExecutionTime.toFixed(0) + 'ms',
      trend: 'down'
    }]);
    const insights =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[110]++, await this.analyticsEngine.generateInsights());
    const summaryInsights =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[111]++, insights.map(insight => {
      /* istanbul ignore next */
      cov_1ioig6gd0g().f[25]++;
      cov_1ioig6gd0g().s[112]++;
      return {
        title: insight.title,
        description: insight.description,
        severity: insight.severity,
        recommendations:
        /* istanbul ignore next */
        (cov_1ioig6gd0g().b[25][0]++, insight.recommendations) ||
        /* istanbul ignore next */
        (cov_1ioig6gd0g().b[25][1]++, [])
      };
    }));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[113]++;
    return {
      keyMetrics,
      insights: summaryInsights,
      generationTime: Date.now() - Date.now() // Will be set correctly by caller
    };
  }
  async calculateMetadata(filters) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[26]++;
    const dashboardMetrics =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[114]++, await this.analyticsEngine.getDashboardMetrics());
    const costSummary =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[115]++, await this.costTracker.getCostSummary(filters.startDate, filters.endDate));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[116]++;
    return {
      totalExecutions: dashboardMetrics.historical.totalExecutions,
      totalCost: costSummary.totalCost,
      averagePerformance: dashboardMetrics.historical.averageExecutionTime,
      successRate: dashboardMetrics.historical.overallSuccessRate * 100
    };
  }
  updateProgress(id, status, progress, currentStep, totalSteps) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[27]++;
    const callback =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[117]++, this.progressCallbacks.get(id));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[118]++;
    if (callback) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().b[26][0]++;
      cov_1ioig6gd0g().s[119]++;
      callback({
        id,
        status,
        progress,
        currentStep,
        totalSteps,
        startTime: new Date()
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ioig6gd0g().b[26][1]++;
    }
  }
  /**
   * Get cached template
   */
  async getCachedTemplate(templateId) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[28]++;
    const cached =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[120]++, this.templateCache.get(templateId));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[121]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().b[27][0]++;
      cov_1ioig6gd0g().s[122]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1ioig6gd0g().b[27][1]++;
    }
    const template =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[123]++, ReportTemplates_1.ReportTemplates.getTemplate(templateId));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[124]++;
    if (template) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().b[28][0]++;
      cov_1ioig6gd0g().s[125]++;
      this.templateCache.set(templateId, template);
    } else
    /* istanbul ignore next */
    {
      cov_1ioig6gd0g().b[28][1]++;
    }
    cov_1ioig6gd0g().s[126]++;
    return template;
  }
  /**
   * Get cached analytics data
   */
  async getCachedAnalyticsData(filters) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[29]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[127]++, `analytics_${JSON.stringify(filters)}`);
    const cached =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[128]++, this.dataCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[129]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().b[29][0]++;
      cov_1ioig6gd0g().s[130]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1ioig6gd0g().b[29][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[131]++, await this.analyticsEngine.getDashboardMetrics());
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[132]++;
    this.dataCache.set(cacheKey, data, {
      ttl: 1000 * 60 * 5
    }); // 5 minutes
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[133]++;
    return data;
  }
  /**
   * Get cached cost data
   */
  async getCachedCostData(filters) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[30]++;
    const cacheKey =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[134]++, `cost_${JSON.stringify(filters)}`);
    const cached =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[135]++, this.dataCache.get(cacheKey));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[136]++;
    if (cached) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().b[30][0]++;
      cov_1ioig6gd0g().s[137]++;
      return cached;
    } else
    /* istanbul ignore next */
    {
      cov_1ioig6gd0g().b[30][1]++;
    }
    const data =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[138]++, await this.costTracker.getCostSummary(filters.startDate, filters.endDate));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[139]++;
    this.dataCache.set(cacheKey, data, {
      ttl: 1000 * 60 * 5
    }); // 5 minutes
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[140]++;
    return data;
  }
  /**
   * Pre-load commonly used data
   */
  async preloadCommonData() {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[31]++;
    cov_1ioig6gd0g().s[141]++;
    try {
      // Pre-load dashboard metrics
      const dashboardMetrics =
      /* istanbul ignore next */
      (cov_1ioig6gd0g().s[142]++, await this.analyticsEngine.getDashboardMetrics());
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[143]++;
      this.dataCache.set('dashboard_metrics', dashboardMetrics, {
        ttl: 1000 * 60 * 5
      });
      // Pre-load cost summary
      const costSummary =
      /* istanbul ignore next */
      (cov_1ioig6gd0g().s[144]++, await this.costTracker.getCostSummary());
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[145]++;
      this.dataCache.set('cost_summary', costSummary, {
        ttl: 1000 * 60 * 5
      });
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[146]++;
      console.log('Common report data pre-loaded successfully');
    } catch (error) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[147]++;
      console.warn('Failed to pre-load common data:', error.message);
    }
  }
  /**
   * Track performance metrics
   */
  trackPerformance(operation, duration) {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[32]++;
    cov_1ioig6gd0g().s[148]++;
    if (!this.performanceMetrics.has(operation)) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().b[31][0]++;
      cov_1ioig6gd0g().s[149]++;
      this.performanceMetrics.set(operation, []);
    } else
    /* istanbul ignore next */
    {
      cov_1ioig6gd0g().b[31][1]++;
    }
    const metrics =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[150]++, this.performanceMetrics.get(operation));
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[151]++;
    metrics.push(duration);
    // Keep only last 100 measurements
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[152]++;
    if (metrics.length > 100) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().b[32][0]++;
      cov_1ioig6gd0g().s[153]++;
      metrics.shift();
    } else
    /* istanbul ignore next */
    {
      cov_1ioig6gd0g().b[32][1]++;
    }
    // Log slow operations
    cov_1ioig6gd0g().s[154]++;
    if (duration > 5000) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().b[33][0]++;
      cov_1ioig6gd0g().s[155]++;
      // 5 seconds
      console.warn(`Slow report operation: ${operation} took ${duration.toFixed(2)}ms`);
    } else
    /* istanbul ignore next */
    {
      cov_1ioig6gd0g().b[33][1]++;
    }
  }
  /**
   * Get performance statistics
   */
  getPerformanceStats() {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[33]++;
    const stats =
    /* istanbul ignore next */
    (cov_1ioig6gd0g().s[156]++, {});
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[157]++;
    for (const [operation, metrics] of this.performanceMetrics) {
      /* istanbul ignore next */
      cov_1ioig6gd0g().s[158]++;
      if (metrics.length > 0) {
        /* istanbul ignore next */
        cov_1ioig6gd0g().b[34][0]++;
        const avg =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[159]++, metrics.reduce((sum, time) => {
          /* istanbul ignore next */
          cov_1ioig6gd0g().f[34]++;
          cov_1ioig6gd0g().s[160]++;
          return sum + time;
        }, 0) / metrics.length);
        const max =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[161]++, Math.max(...metrics));
        const min =
        /* istanbul ignore next */
        (cov_1ioig6gd0g().s[162]++, Math.min(...metrics));
        /* istanbul ignore next */
        cov_1ioig6gd0g().s[163]++;
        stats[operation] = {
          avg: Math.round(avg),
          max: Math.round(max),
          min: Math.round(min),
          count: metrics.length
        };
      } else
      /* istanbul ignore next */
      {
        cov_1ioig6gd0g().b[34][1]++;
      }
    }
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[164]++;
    return stats;
  }
  /**
   * Clear caches
   */
  clearCaches() {
    /* istanbul ignore next */
    cov_1ioig6gd0g().f[35]++;
    cov_1ioig6gd0g().s[165]++;
    this.templateCache.clear();
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[166]++;
    this.dataCache.clear();
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[167]++;
    this.performanceMetrics.clear();
    /* istanbul ignore next */
    cov_1ioig6gd0g().s[168]++;
    console.log('Report generator caches cleared');
  }
}
/* istanbul ignore next */
cov_1ioig6gd0g().s[169]++;
exports.ReportGenerator = ReportGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,