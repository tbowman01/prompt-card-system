9c499b533914c7287c4c352a40db75a5
"use strict";

/* istanbul ignore next */
function cov_18r6wbbyia() {
  var path = "/workspaces/prompt-card-system/backend/src/database/connection.ts";
  var hash = "97c389add306974b2132df5554af8e80519e6d99";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/database/connection.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 45
        }
      },
      "4": {
        start: {
          line: 7,
          column: 0
        },
        end: {
          line: 7,
          column: 48
        }
      },
      "5": {
        start: {
          line: 8,
          column: 25
        },
        end: {
          line: 8,
          column: 67
        }
      },
      "6": {
        start: {
          line: 9,
          column: 15
        },
        end: {
          line: 9,
          column: 47
        }
      },
      "7": {
        start: {
          line: 10,
          column: 13
        },
        end: {
          line: 10,
          column: 43
        }
      },
      "8": {
        start: {
          line: 11,
          column: 22
        },
        end: {
          line: 11,
          column: 111
        }
      },
      "9": {
        start: {
          line: 12,
          column: 19
        },
        end: {
          line: 17,
          column: 1
        }
      },
      "10": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 21,
          column: 29
        }
      },
      "11": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 22,
          column: 29
        }
      },
      "12": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 30
        }
      },
      "13": {
        start: {
          line: 24,
          column: 8
        },
        end: {
          line: 24,
          column: 39
        }
      },
      "14": {
        start: {
          line: 25,
          column: 8
        },
        end: {
          line: 25,
          column: 41
        }
      },
      "15": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 33
        }
      },
      "16": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 27,
          column: 28
        }
      },
      "17": {
        start: {
          line: 31,
          column: 24
        },
        end: {
          line: 31,
          column: 59
        }
      },
      "18": {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 34,
          column: 9
        }
      },
      "19": {
        start: {
          line: 33,
          column: 12
        },
        end: {
          line: 33,
          column: 65
        }
      },
      "20": {
        start: {
          line: 35,
          column: 27
        },
        end: {
          line: 38,
          column: 10
        }
      },
      "21": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 47
        }
      },
      "22": {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 48
        }
      },
      "23": {
        start: {
          line: 42,
          column: 8
        },
        end: {
          line: 42,
          column: 50
        }
      },
      "24": {
        start: {
          line: 43,
          column: 8
        },
        end: {
          line: 43,
          column: 47
        }
      },
      "25": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 49
        }
      },
      "26": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 26
        }
      },
      "27": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 49,
          column: 19
        }
      },
      "28": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 19
        }
      },
      "29": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 64,
          column: 9
        }
      },
      "30": {
        start: {
          line: 52,
          column: 12
        },
        end: {
          line: 56,
          column: 13
        }
      },
      "31": {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 26
        }
      },
      "32": {
        start: {
          line: 53,
          column: 35
        },
        end: {
          line: 53,
          column: 58
        }
      },
      "33": {
        start: {
          line: 54,
          column: 16
        },
        end: {
          line: 54,
          column: 50
        }
      },
      "34": {
        start: {
          line: 55,
          column: 16
        },
        end: {
          line: 55,
          column: 59
        }
      },
      "35": {
        start: {
          line: 57,
          column: 12
        },
        end: {
          line: 57,
          column: 36
        }
      },
      "36": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 32
        }
      },
      "37": {
        start: {
          line: 59,
          column: 12
        },
        end: {
          line: 59,
          column: 111
        }
      },
      "38": {
        start: {
          line: 62,
          column: 12
        },
        end: {
          line: 62,
          column: 83
        }
      },
      "39": {
        start: {
          line: 63,
          column: 12
        },
        end: {
          line: 63,
          column: 41
        }
      },
      "40": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 69,
          column: 9
        }
      },
      "41": {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 105
        }
      },
      "42": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 26
        }
      },
      "43": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 113
        }
      },
      "44": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 100
        }
      },
      "45": {
        start: {
          line: 72,
          column: 37
        },
        end: {
          line: 72,
          column: 98
        }
      },
      "46": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 36
        }
      },
      "47": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "48": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 40
        }
      },
      "49": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 83,
          column: 9
        }
      },
      "50": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 66
        }
      },
      "51": {
        start: {
          line: 81,
          column: 41
        },
        end: {
          line: 81,
          column: 64
        }
      },
      "52": {
        start: {
          line: 82,
          column: 12
        },
        end: {
          line: 82,
          column: 40
        }
      },
      "53": {
        start: {
          line: 84,
          column: 27
        },
        end: {
          line: 84,
          column: 58
        }
      },
      "54": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 85,
          column: 45
        }
      },
      "55": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 26
        }
      },
      "56": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 92,
          column: 9
        }
      },
      "57": {
        start: {
          line: 90,
          column: 12
        },
        end: {
          line: 90,
          column: 52
        }
      },
      "58": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 55
        }
      },
      "59": {
        start: {
          line: 95,
          column: 27
        },
        end: {
          line: 95,
          column: 53
        }
      },
      "60": {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 101,
          column: 9
        }
      },
      "61": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 47
        }
      },
      "62": {
        start: {
          line: 100,
          column: 12
        },
        end: {
          line: 100,
          column: 47
        }
      },
      "63": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 109,
          column: 10
        }
      },
      "64": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 119,
          column: 11
        }
      },
      "65": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 118,
          column: 13
        }
      },
      "66": {
        start: {
          line: 114,
          column: 16
        },
        end: {
          line: 114,
          column: 29
        }
      },
      "67": {
        start: {
          line: 117,
          column: 16
        },
        end: {
          line: 117,
          column: 75
        }
      },
      "68": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 120,
          column: 30
        }
      },
      "69": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 39
        }
      },
      "70": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 37
        }
      },
      "71": {
        start: {
          line: 123,
          column: 8
        },
        end: {
          line: 123,
          column: 33
        }
      },
      "72": {
        start: {
          line: 127,
          column: 23
        },
        end: {
          line: 127,
          column: 76
        }
      },
      "73": {
        start: {
          line: 128,
          column: 0
        },
        end: {
          line: 128,
          column: 40
        }
      },
      "74": {
        start: {
          line: 130,
          column: 0
        },
        end: {
          line: 174,
          column: 2
        }
      },
      "75": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 151,
          column: 10
        }
      },
      "76": {
        start: {
          line: 134,
          column: 16
        },
        end: {
          line: 137,
          column: 19
        }
      },
      "77": {
        start: {
          line: 135,
          column: 33
        },
        end: {
          line: 135,
          column: 50
        }
      },
      "78": {
        start: {
          line: 136,
          column: 20
        },
        end: {
          line: 136,
          column: 47
        }
      },
      "79": {
        start: {
          line: 140,
          column: 16
        },
        end: {
          line: 143,
          column: 19
        }
      },
      "80": {
        start: {
          line: 141,
          column: 33
        },
        end: {
          line: 141,
          column: 50
        }
      },
      "81": {
        start: {
          line: 142,
          column: 20
        },
        end: {
          line: 142,
          column: 47
        }
      },
      "82": {
        start: {
          line: 146,
          column: 16
        },
        end: {
          line: 149,
          column: 19
        }
      },
      "83": {
        start: {
          line: 147,
          column: 33
        },
        end: {
          line: 147,
          column: 50
        }
      },
      "84": {
        start: {
          line: 148,
          column: 20
        },
        end: {
          line: 148,
          column: 47
        }
      },
      "85": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 161,
          column: 11
        }
      },
      "86": {
        start: {
          line: 155,
          column: 12
        },
        end: {
          line: 160,
          column: 13
        }
      },
      "87": {
        start: {
          line: 156,
          column: 16
        },
        end: {
          line: 156,
          column: 38
        }
      },
      "88": {
        start: {
          line: 159,
          column: 16
        },
        end: {
          line: 159,
          column: 28
        }
      },
      "89": {
        start: {
          line: 164,
          column: 8
        },
        end: {
          line: 164,
          column: 76
        }
      },
      "90": {
        start: {
          line: 164,
          column: 55
        },
        end: {
          line: 164,
          column: 74
        }
      },
      "91": {
        start: {
          line: 166,
          column: 17
        },
        end: {
          line: 166,
          column: 39
        }
      },
      "92": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 171,
          column: 11
        }
      },
      "93": {
        start: {
          line: 169,
          column: 32
        },
        end: {
          line: 169,
          column: 60
        }
      },
      "94": {
        start: {
          line: 170,
          column: 12
        },
        end: {
          line: 170,
          column: 37
        }
      },
      "95": {
        start: {
          line: 173,
          column: 20
        },
        end: {
          line: 173,
          column: 45
        }
      },
      "96": {
        start: {
          line: 177,
          column: 4
        },
        end: {
          line: 177,
          column: 44
        }
      },
      "97": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 281,
          column: 5
        }
      },
      "98": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 190,
          column: 7
        }
      },
      "99": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 203,
          column: 7
        }
      },
      "100": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 219,
          column: 7
        }
      },
      "101": {
        start: {
          line: 221,
          column: 8
        },
        end: {
          line: 237,
          column: 7
        }
      },
      "102": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 250,
          column: 7
        }
      },
      "103": {
        start: {
          line: 252,
          column: 8
        },
        end: {
          line: 263,
          column: 7
        }
      },
      "104": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 274,
          column: 7
        }
      },
      "105": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 275,
          column: 57
        }
      },
      "106": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 26
        }
      },
      "107": {
        start: {
          line: 279,
          column: 8
        },
        end: {
          line: 279,
          column: 61
        }
      },
      "108": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 20
        }
      },
      "109": {
        start: {
          line: 284,
          column: 0
        },
        end: {
          line: 288,
          column: 3
        }
      },
      "110": {
        start: {
          line: 285,
          column: 4
        },
        end: {
          line: 285,
          column: 50
        }
      },
      "111": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 286,
          column: 23
        }
      },
      "112": {
        start: {
          line: 287,
          column: 4
        },
        end: {
          line: 287,
          column: 20
        }
      },
      "113": {
        start: {
          line: 289,
          column: 0
        },
        end: {
          line: 289,
          column: 29
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 20,
            column: 5
          }
        },
        loc: {
          start: {
            line: 20,
            column: 32
          },
          end: {
            line: 28,
            column: 5
          }
        },
        line: 20
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        loc: {
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 46,
            column: 5
          }
        },
        line: 29
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        loc: {
          start: {
            line: 47,
            column: 27
          },
          end: {
            line: 65,
            column: 5
          }
        },
        line: 47
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 66,
            column: 5
          }
        },
        loc: {
          start: {
            line: 66,
            column: 28
          },
          end: {
            line: 74,
            column: 5
          }
        },
        line: 66
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 72,
            column: 26
          },
          end: {
            line: 72,
            column: 27
          }
        },
        loc: {
          start: {
            line: 72,
            column: 37
          },
          end: {
            line: 72,
            column: 98
          }
        },
        line: 72
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        loc: {
          start: {
            line: 75,
            column: 26
          },
          end: {
            line: 87,
            column: 5
          }
        },
        line: 75
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 81,
            column: 30
          },
          end: {
            line: 81,
            column: 31
          }
        },
        loc: {
          start: {
            line: 81,
            column: 41
          },
          end: {
            line: 81,
            column: 64
          }
        },
        line: 81
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 88,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        loc: {
          start: {
            line: 88,
            column: 34
          },
          end: {
            line: 93,
            column: 5
          }
        },
        line: 88
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 94,
            column: 5
          }
        },
        loc: {
          start: {
            line: 94,
            column: 36
          },
          end: {
            line: 102,
            column: 5
          }
        },
        line: 94
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        loc: {
          start: {
            line: 103,
            column: 15
          },
          end: {
            line: 110,
            column: 5
          }
        },
        line: 103
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 111,
            column: 5
          }
        },
        loc: {
          start: {
            line: 111,
            column: 12
          },
          end: {
            line: 124,
            column: 5
          }
        },
        line: 111
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 112,
            column: 33
          },
          end: {
            line: 112,
            column: 34
          }
        },
        loc: {
          start: {
            line: 112,
            column: 41
          },
          end: {
            line: 119,
            column: 9
          }
        },
        line: 112
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 131,
            column: 13
          },
          end: {
            line: 131,
            column: 14
          }
        },
        loc: {
          start: {
            line: 131,
            column: 22
          },
          end: {
            line: 152,
            column: 5
          }
        },
        line: 131
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 133,
            column: 17
          },
          end: {
            line: 133,
            column: 18
          }
        },
        loc: {
          start: {
            line: 133,
            column: 38
          },
          end: {
            line: 138,
            column: 13
          }
        },
        line: 133
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 134,
            column: 53
          },
          end: {
            line: 134,
            column: 54
          }
        },
        loc: {
          start: {
            line: 134,
            column: 63
          },
          end: {
            line: 137,
            column: 17
          }
        },
        line: 134
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 139,
            column: 17
          },
          end: {
            line: 139,
            column: 18
          }
        },
        loc: {
          start: {
            line: 139,
            column: 38
          },
          end: {
            line: 144,
            column: 13
          }
        },
        line: 139
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 140,
            column: 53
          },
          end: {
            line: 140,
            column: 54
          }
        },
        loc: {
          start: {
            line: 140,
            column: 63
          },
          end: {
            line: 143,
            column: 17
          }
        },
        line: 140
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 145,
            column: 17
          },
          end: {
            line: 145,
            column: 18
          }
        },
        loc: {
          start: {
            line: 145,
            column: 38
          },
          end: {
            line: 150,
            column: 13
          }
        },
        line: 145
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 146,
            column: 53
          },
          end: {
            line: 146,
            column: 54
          }
        },
        loc: {
          start: {
            line: 146,
            column: 63
          },
          end: {
            line: 149,
            column: 17
          }
        },
        line: 146
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 153,
            column: 10
          },
          end: {
            line: 153,
            column: 11
          }
        },
        loc: {
          start: {
            line: 153,
            column: 25
          },
          end: {
            line: 162,
            column: 5
          }
        },
        line: 153
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 154,
            column: 45
          },
          end: {
            line: 154,
            column: 46
          }
        },
        loc: {
          start: {
            line: 154,
            column: 55
          },
          end: {
            line: 161,
            column: 9
          }
        },
        line: 154
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 163,
            column: 12
          },
          end: {
            line: 163,
            column: 13
          }
        },
        loc: {
          start: {
            line: 163,
            column: 30
          },
          end: {
            line: 165,
            column: 5
          }
        },
        line: 163
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 164,
            column: 45
          },
          end: {
            line: 164,
            column: 46
          }
        },
        loc: {
          start: {
            line: 164,
            column: 55
          },
          end: {
            line: 164,
            column: 74
          }
        },
        line: 164
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 166,
            column: 11
          },
          end: {
            line: 166,
            column: 12
          }
        },
        loc: {
          start: {
            line: 166,
            column: 17
          },
          end: {
            line: 166,
            column: 39
          }
        },
        line: 166
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 167,
            column: 17
          },
          end: {
            line: 167,
            column: 18
          }
        },
        loc: {
          start: {
            line: 167,
            column: 33
          },
          end: {
            line: 172,
            column: 5
          }
        },
        line: 167
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 168,
            column: 45
          },
          end: {
            line: 168,
            column: 46
          }
        },
        loc: {
          start: {
            line: 168,
            column: 55
          },
          end: {
            line: 171,
            column: 9
          }
        },
        line: 168
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 173,
            column: 14
          },
          end: {
            line: 173,
            column: 15
          }
        },
        loc: {
          start: {
            line: 173,
            column: 20
          },
          end: {
            line: 173,
            column: 45
          }
        },
        line: 173
      },
      "28": {
        name: "initializeDatabase",
        decl: {
          start: {
            line: 176,
            column: 15
          },
          end: {
            line: 176,
            column: 33
          }
        },
        loc: {
          start: {
            line: 176,
            column: 36
          },
          end: {
            line: 282,
            column: 1
          }
        },
        line: 176
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 284,
            column: 21
          },
          end: {
            line: 284,
            column: 22
          }
        },
        loc: {
          start: {
            line: 284,
            column: 27
          },
          end: {
            line: 288,
            column: 1
          }
        },
        line: 284
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 11,
            column: 111
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 11,
            column: 22
          },
          end: {
            line: 11,
            column: 47
          }
        }, {
          start: {
            line: 11,
            column: 51
          },
          end: {
            line: 11,
            column: 111
          }
        }],
        line: 11
      },
      "4": {
        loc: {
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 13,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 13,
            column: 29
          },
          end: {
            line: 13,
            column: 59
          }
        }, {
          start: {
            line: 13,
            column: 63
          },
          end: {
            line: 13,
            column: 66
          }
        }],
        line: 13
      },
      "5": {
        loc: {
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 14,
            column: 26
          },
          end: {
            line: 14,
            column: 53
          }
        }, {
          start: {
            line: 14,
            column: 57
          },
          end: {
            line: 14,
            column: 64
          }
        }],
        line: 14
      },
      "6": {
        loc: {
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 15,
            column: 28
          },
          end: {
            line: 15,
            column: 57
          }
        }, {
          start: {
            line: 15,
            column: 61
          },
          end: {
            line: 15,
            column: 64
          }
        }],
        line: 15
      },
      "7": {
        loc: {
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 16,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 16,
            column: 51
          }
        }, {
          start: {
            line: 16,
            column: 55
          },
          end: {
            line: 16,
            column: 61
          }
        }],
        line: 16
      },
      "8": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 34,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "9": {
        loc: {
          start: {
            line: 36,
            column: 21
          },
          end: {
            line: 36,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 36,
            column: 62
          },
          end: {
            line: 36,
            column: 73
          }
        }, {
          start: {
            line: 36,
            column: 76
          },
          end: {
            line: 36,
            column: 85
          }
        }],
        line: 36
      },
      "10": {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 49,
            column: 19
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 49,
            column: 19
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "11": {
        loc: {
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 67,
            column: 8
          },
          end: {
            line: 69,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 67
      },
      "12": {
        loc: {
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 76,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 76
      },
      "13": {
        loc: {
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 8
          },
          end: {
            line: 83,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "14": {
        loc: {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 92,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 89
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/database/connection.ts",
      mappings: ";;;;;;AAkMA,gDAiHC;AAnTD,oEAAsC;AACtC,gDAAwB;AACxB,4CAAoB;AAEpB,MAAM,aAAa,GAAG,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,4BAA4B,CAAC,CAAC;AAUtG,MAAM,UAAU,GAAyB;IACvC,cAAc,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,kBAAkB,IAAI,GAAG,CAAC;IAC/D,WAAW,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,IAAI,OAAO,CAAC;IAC7D,aAAa,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,GAAG,CAAC;IAC7D,UAAU,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,IAAI,MAAM,CAAC;CAC3D,CAAC;AAEF,iCAAiC;AACjC,MAAM,sBAAsB;IAO1B,YAAoB,MAAc,EAAU,MAA4B;QAApD,WAAM,GAAN,MAAM,CAAQ;QAAU,WAAM,GAAN,MAAM,CAAsB;QANhE,gBAAW,GAAwB,EAAE,CAAC;QACtC,yBAAoB,GAAwB,EAAE,CAAC;QAC/C,oBAAe,GAA2B,IAAI,GAAG,EAAE,CAAC;QACpD,gBAAW,GAAG,KAAK,CAAC;QACpB,eAAU,GAAG,CAAC,CAAC;IAEoD,CAAC;IAEpE,gBAAgB;QACtB,+BAA+B;QAC/B,MAAM,OAAO,GAAG,cAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1C,IAAI,CAAC,YAAE,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC;YAC5B,YAAE,CAAC,SAAS,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,wBAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YAC3C,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS;YACzE,OAAO,EAAE,IAAI,CAAC,mBAAmB;SAClC,CAAC,CAAC;QAEH,yDAAyD;QACzD,UAAU,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACvC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;QACxC,UAAU,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC;QAC1C,UAAU,CAAC,MAAM,CAAC,mBAAmB,CAAC,CAAC;QACvC,UAAU,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;QAEzC,OAAO,UAAU,CAAC;IACpB,CAAC;IAEO,KAAK,CAAC,cAAc;QAC1B,IAAI,IAAI,CAAC,WAAW;YAAE,OAAO;QAE7B,IAAI,CAAC;YACH,6BAA6B;YAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,EAAE,EAAE,CAAC;gBACpD,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBAC3C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;gBAClC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7C,CAAC;YAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YACxB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;YACpB,OAAO,CAAC,GAAG,CAAC,6CAA6C,IAAI,CAAC,MAAM,CAAC,cAAc,cAAc,CAAC,CAAC;QACrG,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,gDAAgD,EAAE,KAAK,CAAC,CAAC;YACvE,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;QAC/B,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,eAAe;QAC3B,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC;YACjD,MAAM,IAAI,KAAK,CAAC,uCAAuC,IAAI,CAAC,MAAM,CAAC,aAAa,WAAW,CAAC,CAAC;QAC/F,CAAC;QAED,IAAI,CAAC,UAAU,EAAE,CAAC;QAClB,OAAO,CAAC,GAAG,CAAC,yCAAyC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,MAAM,CAAC,CAAC;QAEzG,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;QAC5F,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;YACtB,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QAC9B,CAAC;QAED,IAAI,IAAI,CAAC,oBAAoB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC3C,4CAA4C;YAC5C,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;YACtD,OAAO,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9B,CAAC;QAED,MAAM,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,EAAG,CAAC;QACpD,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;QACrC,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,iBAAiB,CAAC,UAA6B;QAC7C,IAAI,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC;YACzC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACxC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAED,KAAK,CAAC,cAAc,CAAI,SAAoD;QAC1E,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAC9C,IAAI,CAAC;YACH,OAAO,MAAM,SAAS,CAAC,UAAU,CAAC,CAAC;QACrC,CAAC;gBAAS,CAAC;YACT,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;QACrC,CAAC;IACH,CAAC;IAED,QAAQ;QACN,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM;YAC9B,SAAS,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM;YAC3C,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,IAAI;YAC/B,WAAW,EAAE,IAAI,CAAC,WAAW;SAC9B,CAAC;IACJ,CAAC;IAED,KAAK;QACH,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC;gBACH,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;YAC7D,CAAC;QACH,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,CAAC,oBAAoB,GAAG,EAAE,CAAC;QAC/B,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC3B,CAAC;CACF;AAED,gCAAgC;AAChC,MAAM,cAAc,GAAG,IAAI,sBAAsB,CAAC,aAAa,EAAE,UAAU,CAAC,CAAC;AAiDpE,wCAAc;AA/CvB,wDAAwD;AAC3C,QAAA,EAAE,GAAQ;IACrB,OAAO,EAAE,CAAC,GAAW,EAAE,EAAE;QACvB,OAAO;YACL,GAAG,EAAE,KAAK,EAAE,GAAG,MAAa,EAAE,EAAE;gBAC9B,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC/B,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;YACL,CAAC;YACD,GAAG,EAAE,KAAK,EAAE,GAAG,MAAa,EAAE,EAAE;gBAC9B,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC/B,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;YACL,CAAC;YACD,GAAG,EAAE,KAAK,EAAE,GAAG,MAAa,EAAE,EAAE;gBAC9B,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,EAAE;oBAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC/B,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC;gBAC7B,CAAC,CAAC,CAAC;YACL,CAAC;SACF,CAAC;IACJ,CAAC;IACD,IAAI,EAAE,KAAK,EAAE,GAAW,EAAE,EAAE;QAC1B,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,EAAE;YAC5C,IAAI,CAAC;gBACH,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,KAAK,CAAC,CAAC,wCAAwC;YACvD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACD,MAAM,EAAE,KAAK,EAAE,MAAc,EAAE,EAAE;QAC/B,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IACtE,CAAC;IACD,KAAK,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,KAAK,EAAE;IACnC,WAAW,EAAE,CAAC,UAA0C,EAAE,EAAE;QAC1D,OAAO,cAAc,CAAC,cAAc,CAAC,CAAC,IAAI,EAAE,EAAE;YAC5C,MAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACjD,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IACD,QAAQ,EAAE,GAAG,EAAE,CAAC,cAAc,CAAC,QAAQ,EAAE;CAC1C,CAAC;AAKF,6BAA6B;AACtB,KAAK,UAAU,kBAAkB;IACtC,OAAO,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IAExC,IAAI,CAAC;QACH,4BAA4B;QAC5B,MAAM,UAAE,CAAC,IAAI,CAAC;;;;;;;;;;KAUb,CAAC,CAAC;QAEH,0BAA0B;QAC1B,MAAM,UAAE,CAAC,IAAI,CAAC;;;;;;;;;;;KAWb,CAAC,CAAC;QAEH,iDAAiD;QACjD,MAAM,UAAE,CAAC,IAAI,CAAC;;;;;;;;;;;;;;KAcb,CAAC,CAAC;QAEH,oCAAoC;QACpC,MAAM,UAAE,CAAC,IAAI,CAAC;;;;;;;;;;;;;;;;KAgBb,CAAC,CAAC;QAEH,6DAA6D;QAC7D,MAAM,UAAE,CAAC,IAAI,CAAC;;;;;;;;;;;KAWb,CAAC,CAAC;QAEH,yCAAyC;QACzC,MAAM,UAAE,CAAC,IAAI,CAAC;;;;;;;;;;;KAWb,CAAC,CAAC;QAEH,wCAAwC;QACxC,MAAM,UAAE,CAAC,IAAI,CAAC;;;;;;;;;KASb,CAAC,CAAC;QAEH,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,OAAO,UAAE,CAAC;IACZ,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,8BAA8B,EAAE,KAAK,CAAC,CAAC;QACrD,MAAM,KAAK,CAAC;IACd,CAAC;AACH,CAAC;AAED,oBAAoB;AACpB,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;IACxB,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;IAC9C,UAAE,CAAC,KAAK,EAAE,CAAC;IACX,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC,CAAC,CAAC;AAEH,kBAAe,UAAE,CAAC",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/database/connection.ts"],
      sourcesContent: ["import Database from 'better-sqlite3';\nimport path from 'path';\nimport fs from 'fs';\n\nconst DATABASE_PATH = process.env.DATABASE_PATH || path.join(__dirname, '../../data/database.sqlite');\n\n// Connection pool configuration\ninterface ConnectionPoolConfig {\n  maxConnections: number;\n  idleTimeout: number;\n  retryAttempts: number;\n  retryDelay: number;\n}\n\nconst poolConfig: ConnectionPoolConfig = {\n  maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '5'),\n  idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '30000'),\n  retryAttempts: parseInt(process.env.DB_RETRY_ATTEMPTS || '3'),\n  retryDelay: parseInt(process.env.DB_RETRY_DELAY || '1000')\n};\n\n// Connection pool implementation\nclass DatabaseConnectionPool {\n  private connections: Database.Database[] = [];\n  private availableConnections: Database.Database[] = [];\n  private busyConnections: Set<Database.Database> = new Set();\n  private initialized = false;\n  private retryCount = 0;\n\n  constructor(private dbPath: string, private config: ConnectionPoolConfig) {}\n\n  private createConnection(): Database.Database {\n    // Ensure data directory exists\n    const dataDir = path.dirname(this.dbPath);\n    if (!fs.existsSync(dataDir)) {\n      fs.mkdirSync(dataDir, { recursive: true });\n    }\n\n    const connection = new Database(this.dbPath, {\n      verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n      timeout: 5000 // 5 second timeout\n    });\n\n    // Enable foreign keys and optimize for concurrent access\n    connection.pragma('foreign_keys = ON');\n    connection.pragma('journal_mode = WAL');\n    connection.pragma('synchronous = NORMAL');\n    connection.pragma('cache_size = 1000');\n    connection.pragma('temp_store = memory');\n    \n    return connection;\n  }\n\n  private async initializePool(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Create initial connections\n      for (let i = 0; i < this.config.maxConnections; i++) {\n        const connection = this.createConnection();\n        this.connections.push(connection);\n        this.availableConnections.push(connection);\n      }\n      \n      this.initialized = true;\n      this.retryCount = 0;\n      console.log(`Database connection pool initialized with ${this.config.maxConnections} connections`);\n    } catch (error) {\n      console.error('Failed to initialize database connection pool:', error);\n      await this.retryConnection();\n    }\n  }\n\n  private async retryConnection(): Promise<void> {\n    if (this.retryCount >= this.config.retryAttempts) {\n      throw new Error(`Failed to connect to database after ${this.config.retryAttempts} attempts`);\n    }\n\n    this.retryCount++;\n    console.log(`Retrying database connection (attempt ${this.retryCount}/${this.config.retryAttempts})...`);\n    \n    await new Promise(resolve => setTimeout(resolve, this.config.retryDelay * this.retryCount));\n    await this.initializePool();\n  }\n\n  async getConnection(): Promise<Database.Database> {\n    if (!this.initialized) {\n      await this.initializePool();\n    }\n\n    if (this.availableConnections.length === 0) {\n      // Wait for a connection to become available\n      await new Promise(resolve => setTimeout(resolve, 10));\n      return this.getConnection();\n    }\n\n    const connection = this.availableConnections.pop()!;\n    this.busyConnections.add(connection);\n    return connection;\n  }\n\n  releaseConnection(connection: Database.Database): void {\n    if (this.busyConnections.has(connection)) {\n      this.busyConnections.delete(connection);\n      this.availableConnections.push(connection);\n    }\n  }\n\n  async withConnection<T>(operation: (db: Database.Database) => Promise<T> | T): Promise<T> {\n    const connection = await this.getConnection();\n    try {\n      return await operation(connection);\n    } finally {\n      this.releaseConnection(connection);\n    }\n  }\n\n  getStats() {\n    return {\n      total: this.connections.length,\n      available: this.availableConnections.length,\n      busy: this.busyConnections.size,\n      initialized: this.initialized\n    };\n  }\n\n  close(): void {\n    this.connections.forEach(conn => {\n      try {\n        conn.close();\n      } catch (error) {\n        console.error('Error closing database connection:', error);\n      }\n    });\n    this.connections = [];\n    this.availableConnections = [];\n    this.busyConnections.clear();\n    this.initialized = false;\n  }\n}\n\n// Create global connection pool\nconst connectionPool = new DatabaseConnectionPool(DATABASE_PATH, poolConfig);\n\n// Export legacy db interface for backward compatibility\nexport const db: any = {\n  prepare: (sql: string) => {\n    return {\n      run: async (...params: any[]) => {\n        return connectionPool.withConnection((conn) => {\n          const stmt = conn.prepare(sql);\n          return stmt.run(...params);\n        });\n      },\n      get: async (...params: any[]) => {\n        return connectionPool.withConnection((conn) => {\n          const stmt = conn.prepare(sql);\n          return stmt.get(...params);\n        });\n      },\n      all: async (...params: any[]) => {\n        return connectionPool.withConnection((conn) => {\n          const stmt = conn.prepare(sql);\n          return stmt.all(...params);\n        });\n      }\n    };\n  },\n  exec: async (sql: string) => {\n    return connectionPool.withConnection((conn) => {\n      try {\n        return conn.exec(sql);\n      } catch (error) {\n        throw error; // Ensure errors are properly propagated\n      }\n    });\n  },\n  pragma: async (pragma: string) => {\n    return connectionPool.withConnection((conn) => conn.pragma(pragma));\n  },\n  close: () => connectionPool.close(),\n  transaction: (operations: (db: Database.Database) => any) => {\n    return connectionPool.withConnection((conn) => {\n      const transaction = conn.transaction(operations);\n      return transaction(conn);\n    });\n  },\n  getStats: () => connectionPool.getStats()\n};\n\n// Export connection pool for advanced usage\nexport { connectionPool };\n\n// Initialize database tables\nexport async function initializeDatabase(): Promise<any> {\n  console.log('Initializing database...');\n  \n  try {\n    // Create prompt_cards table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS prompt_cards (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        prompt_template TEXT NOT NULL,\n        variables TEXT DEFAULT '[]', -- JSON array of variable names\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create test_cases table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_cases (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        prompt_card_id INTEGER NOT NULL,\n        name TEXT NOT NULL,\n        input_variables TEXT NOT NULL, -- JSON object\n        expected_output TEXT,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion objects\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Create enhanced test_results table for Phase 4\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_results (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        test_case_id INTEGER NOT NULL,\n        execution_id TEXT NOT NULL,\n        model TEXT NOT NULL,\n        response TEXT NOT NULL,\n        passed BOOLEAN NOT NULL,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion results\n        execution_time_ms INTEGER,\n        error TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Create test execution queue table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_execution_queue (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        execution_id TEXT UNIQUE NOT NULL,\n        prompt_card_id INTEGER NOT NULL,\n        test_case_ids TEXT NOT NULL, -- JSON array\n        model TEXT NOT NULL,\n        status TEXT DEFAULT 'pending', -- pending, running, completed, failed, cancelled\n        priority INTEGER DEFAULT 0,\n        configuration TEXT, -- JSON\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        started_at DATETIME,\n        completed_at DATETIME,\n        error_message TEXT,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id)\n      )\n    `);\n\n    // Create assertion_types table for advanced assertion system\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_types (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL,\n        description TEXT NOT NULL,\n        parameters TEXT NOT NULL, -- JSON\n        examples TEXT NOT NULL, -- JSON\n        validator_code TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create assertion execution stats table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_execution_stats (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        assertion_type TEXT NOT NULL,\n        total_executions INTEGER DEFAULT 0,\n        successful_executions INTEGER DEFAULT 0,\n        failed_executions INTEGER DEFAULT 0,\n        total_execution_time INTEGER DEFAULT 0,\n        last_executed DATETIME DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(assertion_type)\n      )\n    `);\n\n    // Create indexes for better performance\n    await db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_prompt_cards_title ON prompt_cards(title);\n      CREATE INDEX IF NOT EXISTS idx_test_cases_prompt_card_id ON test_cases(prompt_card_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_test_case_id ON test_results(test_case_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_execution_id ON test_results(execution_id);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_status ON test_execution_queue(status);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_priority ON test_execution_queue(priority DESC);\n      CREATE INDEX IF NOT EXISTS idx_assertion_types_name ON assertion_types(name);\n      CREATE INDEX IF NOT EXISTS idx_assertion_stats_type ON assertion_execution_stats(assertion_type);\n    `);\n\n    console.log('Database initialized successfully');\n    return db;\n  } catch (error) {\n    console.error('Error initializing database:', error);\n    throw error;\n  }\n}\n\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('Closing database connection...');\n  db.close();\n  process.exit(0);\n});\n\nexport default db;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "97c389add306974b2132df5554af8e80519e6d99"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_18r6wbbyia = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_18r6wbbyia();
var __importDefault =
/* istanbul ignore next */
(cov_18r6wbbyia().s[0]++,
/* istanbul ignore next */
(cov_18r6wbbyia().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_18r6wbbyia().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_18r6wbbyia().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_18r6wbbyia().f[0]++;
  cov_18r6wbbyia().s[1]++;
  return /* istanbul ignore next */(cov_18r6wbbyia().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_18r6wbbyia().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_18r6wbbyia().s[3]++;
exports.connectionPool = exports.db = void 0;
/* istanbul ignore next */
cov_18r6wbbyia().s[4]++;
exports.initializeDatabase = initializeDatabase;
const better_sqlite3_1 =
/* istanbul ignore next */
(cov_18r6wbbyia().s[5]++, __importDefault(require("better-sqlite3")));
const path_1 =
/* istanbul ignore next */
(cov_18r6wbbyia().s[6]++, __importDefault(require("path")));
const fs_1 =
/* istanbul ignore next */
(cov_18r6wbbyia().s[7]++, __importDefault(require("fs")));
const DATABASE_PATH =
/* istanbul ignore next */
(cov_18r6wbbyia().s[8]++,
/* istanbul ignore next */
(cov_18r6wbbyia().b[3][0]++, process.env.DATABASE_PATH) ||
/* istanbul ignore next */
(cov_18r6wbbyia().b[3][1]++, path_1.default.join(__dirname, '../../data/database.sqlite')));
const poolConfig =
/* istanbul ignore next */
(cov_18r6wbbyia().s[9]++, {
  maxConnections: parseInt(
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[4][0]++, process.env.DB_MAX_CONNECTIONS) ||
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[4][1]++, '5')),
  idleTimeout: parseInt(
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[5][0]++, process.env.DB_IDLE_TIMEOUT) ||
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[5][1]++, '30000')),
  retryAttempts: parseInt(
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[6][0]++, process.env.DB_RETRY_ATTEMPTS) ||
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[6][1]++, '3')),
  retryDelay: parseInt(
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[7][0]++, process.env.DB_RETRY_DELAY) ||
  /* istanbul ignore next */
  (cov_18r6wbbyia().b[7][1]++, '1000'))
});
// Connection pool implementation
class DatabaseConnectionPool {
  constructor(dbPath, config) {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[1]++;
    cov_18r6wbbyia().s[10]++;
    this.dbPath = dbPath;
    /* istanbul ignore next */
    cov_18r6wbbyia().s[11]++;
    this.config = config;
    /* istanbul ignore next */
    cov_18r6wbbyia().s[12]++;
    this.connections = [];
    /* istanbul ignore next */
    cov_18r6wbbyia().s[13]++;
    this.availableConnections = [];
    /* istanbul ignore next */
    cov_18r6wbbyia().s[14]++;
    this.busyConnections = new Set();
    /* istanbul ignore next */
    cov_18r6wbbyia().s[15]++;
    this.initialized = false;
    /* istanbul ignore next */
    cov_18r6wbbyia().s[16]++;
    this.retryCount = 0;
  }
  createConnection() {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[2]++;
    // Ensure data directory exists
    const dataDir =
    /* istanbul ignore next */
    (cov_18r6wbbyia().s[17]++, path_1.default.dirname(this.dbPath));
    /* istanbul ignore next */
    cov_18r6wbbyia().s[18]++;
    if (!fs_1.default.existsSync(dataDir)) {
      /* istanbul ignore next */
      cov_18r6wbbyia().b[8][0]++;
      cov_18r6wbbyia().s[19]++;
      fs_1.default.mkdirSync(dataDir, {
        recursive: true
      });
    } else
    /* istanbul ignore next */
    {
      cov_18r6wbbyia().b[8][1]++;
    }
    const connection =
    /* istanbul ignore next */
    (cov_18r6wbbyia().s[20]++, new better_sqlite3_1.default(this.dbPath, {
      verbose: process.env.NODE_ENV === 'development' ?
      /* istanbul ignore next */
      (cov_18r6wbbyia().b[9][0]++, console.log) :
      /* istanbul ignore next */
      (cov_18r6wbbyia().b[9][1]++, undefined),
      timeout: 5000 // 5 second timeout
    }));
    // Enable foreign keys and optimize for concurrent access
    /* istanbul ignore next */
    cov_18r6wbbyia().s[21]++;
    connection.pragma('foreign_keys = ON');
    /* istanbul ignore next */
    cov_18r6wbbyia().s[22]++;
    connection.pragma('journal_mode = WAL');
    /* istanbul ignore next */
    cov_18r6wbbyia().s[23]++;
    connection.pragma('synchronous = NORMAL');
    /* istanbul ignore next */
    cov_18r6wbbyia().s[24]++;
    connection.pragma('cache_size = 1000');
    /* istanbul ignore next */
    cov_18r6wbbyia().s[25]++;
    connection.pragma('temp_store = memory');
    /* istanbul ignore next */
    cov_18r6wbbyia().s[26]++;
    return connection;
  }
  async initializePool() {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[3]++;
    cov_18r6wbbyia().s[27]++;
    if (this.initialized) {
      /* istanbul ignore next */
      cov_18r6wbbyia().b[10][0]++;
      cov_18r6wbbyia().s[28]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_18r6wbbyia().b[10][1]++;
    }
    cov_18r6wbbyia().s[29]++;
    try {
      /* istanbul ignore next */
      cov_18r6wbbyia().s[30]++;
      // Create initial connections
      for (let i =
      /* istanbul ignore next */
      (cov_18r6wbbyia().s[31]++, 0); i < this.config.maxConnections; i++) {
        const connection =
        /* istanbul ignore next */
        (cov_18r6wbbyia().s[32]++, this.createConnection());
        /* istanbul ignore next */
        cov_18r6wbbyia().s[33]++;
        this.connections.push(connection);
        /* istanbul ignore next */
        cov_18r6wbbyia().s[34]++;
        this.availableConnections.push(connection);
      }
      /* istanbul ignore next */
      cov_18r6wbbyia().s[35]++;
      this.initialized = true;
      /* istanbul ignore next */
      cov_18r6wbbyia().s[36]++;
      this.retryCount = 0;
      /* istanbul ignore next */
      cov_18r6wbbyia().s[37]++;
      console.log(`Database connection pool initialized with ${this.config.maxConnections} connections`);
    } catch (error) {
      /* istanbul ignore next */
      cov_18r6wbbyia().s[38]++;
      console.error('Failed to initialize database connection pool:', error);
      /* istanbul ignore next */
      cov_18r6wbbyia().s[39]++;
      await this.retryConnection();
    }
  }
  async retryConnection() {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[4]++;
    cov_18r6wbbyia().s[40]++;
    if (this.retryCount >= this.config.retryAttempts) {
      /* istanbul ignore next */
      cov_18r6wbbyia().b[11][0]++;
      cov_18r6wbbyia().s[41]++;
      throw new Error(`Failed to connect to database after ${this.config.retryAttempts} attempts`);
    } else
    /* istanbul ignore next */
    {
      cov_18r6wbbyia().b[11][1]++;
    }
    cov_18r6wbbyia().s[42]++;
    this.retryCount++;
    /* istanbul ignore next */
    cov_18r6wbbyia().s[43]++;
    console.log(`Retrying database connection (attempt ${this.retryCount}/${this.config.retryAttempts})...`);
    /* istanbul ignore next */
    cov_18r6wbbyia().s[44]++;
    await new Promise(resolve => {
      /* istanbul ignore next */
      cov_18r6wbbyia().f[5]++;
      cov_18r6wbbyia().s[45]++;
      return setTimeout(resolve, this.config.retryDelay * this.retryCount);
    });
    /* istanbul ignore next */
    cov_18r6wbbyia().s[46]++;
    await this.initializePool();
  }
  async getConnection() {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[6]++;
    cov_18r6wbbyia().s[47]++;
    if (!this.initialized) {
      /* istanbul ignore next */
      cov_18r6wbbyia().b[12][0]++;
      cov_18r6wbbyia().s[48]++;
      await this.initializePool();
    } else
    /* istanbul ignore next */
    {
      cov_18r6wbbyia().b[12][1]++;
    }
    cov_18r6wbbyia().s[49]++;
    if (this.availableConnections.length === 0) {
      /* istanbul ignore next */
      cov_18r6wbbyia().b[13][0]++;
      cov_18r6wbbyia().s[50]++;
      // Wait for a connection to become available
      await new Promise(resolve => {
        /* istanbul ignore next */
        cov_18r6wbbyia().f[7]++;
        cov_18r6wbbyia().s[51]++;
        return setTimeout(resolve, 10);
      });
      /* istanbul ignore next */
      cov_18r6wbbyia().s[52]++;
      return this.getConnection();
    } else
    /* istanbul ignore next */
    {
      cov_18r6wbbyia().b[13][1]++;
    }
    const connection =
    /* istanbul ignore next */
    (cov_18r6wbbyia().s[53]++, this.availableConnections.pop());
    /* istanbul ignore next */
    cov_18r6wbbyia().s[54]++;
    this.busyConnections.add(connection);
    /* istanbul ignore next */
    cov_18r6wbbyia().s[55]++;
    return connection;
  }
  releaseConnection(connection) {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[8]++;
    cov_18r6wbbyia().s[56]++;
    if (this.busyConnections.has(connection)) {
      /* istanbul ignore next */
      cov_18r6wbbyia().b[14][0]++;
      cov_18r6wbbyia().s[57]++;
      this.busyConnections.delete(connection);
      /* istanbul ignore next */
      cov_18r6wbbyia().s[58]++;
      this.availableConnections.push(connection);
    } else
    /* istanbul ignore next */
    {
      cov_18r6wbbyia().b[14][1]++;
    }
  }
  async withConnection(operation) {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[9]++;
    const connection =
    /* istanbul ignore next */
    (cov_18r6wbbyia().s[59]++, await this.getConnection());
    /* istanbul ignore next */
    cov_18r6wbbyia().s[60]++;
    try {
      /* istanbul ignore next */
      cov_18r6wbbyia().s[61]++;
      return await operation(connection);
    } finally {
      /* istanbul ignore next */
      cov_18r6wbbyia().s[62]++;
      this.releaseConnection(connection);
    }
  }
  getStats() {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[10]++;
    cov_18r6wbbyia().s[63]++;
    return {
      total: this.connections.length,
      available: this.availableConnections.length,
      busy: this.busyConnections.size,
      initialized: this.initialized
    };
  }
  close() {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[11]++;
    cov_18r6wbbyia().s[64]++;
    this.connections.forEach(conn => {
      /* istanbul ignore next */
      cov_18r6wbbyia().f[12]++;
      cov_18r6wbbyia().s[65]++;
      try {
        /* istanbul ignore next */
        cov_18r6wbbyia().s[66]++;
        conn.close();
      } catch (error) {
        /* istanbul ignore next */
        cov_18r6wbbyia().s[67]++;
        console.error('Error closing database connection:', error);
      }
    });
    /* istanbul ignore next */
    cov_18r6wbbyia().s[68]++;
    this.connections = [];
    /* istanbul ignore next */
    cov_18r6wbbyia().s[69]++;
    this.availableConnections = [];
    /* istanbul ignore next */
    cov_18r6wbbyia().s[70]++;
    this.busyConnections.clear();
    /* istanbul ignore next */
    cov_18r6wbbyia().s[71]++;
    this.initialized = false;
  }
}
// Create global connection pool
const connectionPool =
/* istanbul ignore next */
(cov_18r6wbbyia().s[72]++, new DatabaseConnectionPool(DATABASE_PATH, poolConfig));
/* istanbul ignore next */
cov_18r6wbbyia().s[73]++;
exports.connectionPool = connectionPool;
// Export legacy db interface for backward compatibility
/* istanbul ignore next */
cov_18r6wbbyia().s[74]++;
exports.db = {
  prepare: sql => {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[13]++;
    cov_18r6wbbyia().s[75]++;
    return {
      run: async (...params) => {
        /* istanbul ignore next */
        cov_18r6wbbyia().f[14]++;
        cov_18r6wbbyia().s[76]++;
        return connectionPool.withConnection(conn => {
          /* istanbul ignore next */
          cov_18r6wbbyia().f[15]++;
          const stmt =
          /* istanbul ignore next */
          (cov_18r6wbbyia().s[77]++, conn.prepare(sql));
          /* istanbul ignore next */
          cov_18r6wbbyia().s[78]++;
          return stmt.run(...params);
        });
      },
      get: async (...params) => {
        /* istanbul ignore next */
        cov_18r6wbbyia().f[16]++;
        cov_18r6wbbyia().s[79]++;
        return connectionPool.withConnection(conn => {
          /* istanbul ignore next */
          cov_18r6wbbyia().f[17]++;
          const stmt =
          /* istanbul ignore next */
          (cov_18r6wbbyia().s[80]++, conn.prepare(sql));
          /* istanbul ignore next */
          cov_18r6wbbyia().s[81]++;
          return stmt.get(...params);
        });
      },
      all: async (...params) => {
        /* istanbul ignore next */
        cov_18r6wbbyia().f[18]++;
        cov_18r6wbbyia().s[82]++;
        return connectionPool.withConnection(conn => {
          /* istanbul ignore next */
          cov_18r6wbbyia().f[19]++;
          const stmt =
          /* istanbul ignore next */
          (cov_18r6wbbyia().s[83]++, conn.prepare(sql));
          /* istanbul ignore next */
          cov_18r6wbbyia().s[84]++;
          return stmt.all(...params);
        });
      }
    };
  },
  exec: async sql => {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[20]++;
    cov_18r6wbbyia().s[85]++;
    return connectionPool.withConnection(conn => {
      /* istanbul ignore next */
      cov_18r6wbbyia().f[21]++;
      cov_18r6wbbyia().s[86]++;
      try {
        /* istanbul ignore next */
        cov_18r6wbbyia().s[87]++;
        return conn.exec(sql);
      } catch (error) {
        /* istanbul ignore next */
        cov_18r6wbbyia().s[88]++;
        throw error; // Ensure errors are properly propagated
      }
    });
  },
  pragma: async pragma => {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[22]++;
    cov_18r6wbbyia().s[89]++;
    return connectionPool.withConnection(conn => {
      /* istanbul ignore next */
      cov_18r6wbbyia().f[23]++;
      cov_18r6wbbyia().s[90]++;
      return conn.pragma(pragma);
    });
  },
  close: () => {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[24]++;
    cov_18r6wbbyia().s[91]++;
    return connectionPool.close();
  },
  transaction: operations => {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[25]++;
    cov_18r6wbbyia().s[92]++;
    return connectionPool.withConnection(conn => {
      /* istanbul ignore next */
      cov_18r6wbbyia().f[26]++;
      const transaction =
      /* istanbul ignore next */
      (cov_18r6wbbyia().s[93]++, conn.transaction(operations));
      /* istanbul ignore next */
      cov_18r6wbbyia().s[94]++;
      return transaction(conn);
    });
  },
  getStats: () => {
    /* istanbul ignore next */
    cov_18r6wbbyia().f[27]++;
    cov_18r6wbbyia().s[95]++;
    return connectionPool.getStats();
  }
};
// Initialize database tables
async function initializeDatabase() {
  /* istanbul ignore next */
  cov_18r6wbbyia().f[28]++;
  cov_18r6wbbyia().s[96]++;
  console.log('Initializing database...');
  /* istanbul ignore next */
  cov_18r6wbbyia().s[97]++;
  try {
    /* istanbul ignore next */
    cov_18r6wbbyia().s[98]++;
    // Create prompt_cards table
    await exports.db.exec(`
      CREATE TABLE IF NOT EXISTS prompt_cards (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT NOT NULL,
        description TEXT,
        prompt_template TEXT NOT NULL,
        variables TEXT DEFAULT '[]', -- JSON array of variable names
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    // Create test_cases table
    /* istanbul ignore next */
    cov_18r6wbbyia().s[99]++;
    await exports.db.exec(`
      CREATE TABLE IF NOT EXISTS test_cases (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        prompt_card_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        input_variables TEXT NOT NULL, -- JSON object
        expected_output TEXT,
        assertions TEXT DEFAULT '[]', -- JSON array of assertion objects
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE
      )
    `);
    // Create enhanced test_results table for Phase 4
    /* istanbul ignore next */
    cov_18r6wbbyia().s[100]++;
    await exports.db.exec(`
      CREATE TABLE IF NOT EXISTS test_results (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        test_case_id INTEGER NOT NULL,
        execution_id TEXT NOT NULL,
        model TEXT NOT NULL,
        response TEXT NOT NULL,
        passed BOOLEAN NOT NULL,
        assertions TEXT DEFAULT '[]', -- JSON array of assertion results
        execution_time_ms INTEGER,
        error TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE
      )
    `);
    // Create test execution queue table
    /* istanbul ignore next */
    cov_18r6wbbyia().s[101]++;
    await exports.db.exec(`
      CREATE TABLE IF NOT EXISTS test_execution_queue (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        execution_id TEXT UNIQUE NOT NULL,
        prompt_card_id INTEGER NOT NULL,
        test_case_ids TEXT NOT NULL, -- JSON array
        model TEXT NOT NULL,
        status TEXT DEFAULT 'pending', -- pending, running, completed, failed, cancelled
        priority INTEGER DEFAULT 0,
        configuration TEXT, -- JSON
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        started_at DATETIME,
        completed_at DATETIME,
        error_message TEXT,
        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id)
      )
    `);
    // Create assertion_types table for advanced assertion system
    /* istanbul ignore next */
    cov_18r6wbbyia().s[102]++;
    await exports.db.exec(`
      CREATE TABLE IF NOT EXISTS assertion_types (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT UNIQUE NOT NULL,
        description TEXT NOT NULL,
        parameters TEXT NOT NULL, -- JSON
        examples TEXT NOT NULL, -- JSON
        validator_code TEXT NOT NULL,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);
    // Create assertion execution stats table
    /* istanbul ignore next */
    cov_18r6wbbyia().s[103]++;
    await exports.db.exec(`
      CREATE TABLE IF NOT EXISTS assertion_execution_stats (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        assertion_type TEXT NOT NULL,
        total_executions INTEGER DEFAULT 0,
        successful_executions INTEGER DEFAULT 0,
        failed_executions INTEGER DEFAULT 0,
        total_execution_time INTEGER DEFAULT 0,
        last_executed DATETIME DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(assertion_type)
      )
    `);
    // Create indexes for better performance
    /* istanbul ignore next */
    cov_18r6wbbyia().s[104]++;
    await exports.db.exec(`
      CREATE INDEX IF NOT EXISTS idx_prompt_cards_title ON prompt_cards(title);
      CREATE INDEX IF NOT EXISTS idx_test_cases_prompt_card_id ON test_cases(prompt_card_id);
      CREATE INDEX IF NOT EXISTS idx_test_results_test_case_id ON test_results(test_case_id);
      CREATE INDEX IF NOT EXISTS idx_test_results_execution_id ON test_results(execution_id);
      CREATE INDEX IF NOT EXISTS idx_test_queue_status ON test_execution_queue(status);
      CREATE INDEX IF NOT EXISTS idx_test_queue_priority ON test_execution_queue(priority DESC);
      CREATE INDEX IF NOT EXISTS idx_assertion_types_name ON assertion_types(name);
      CREATE INDEX IF NOT EXISTS idx_assertion_stats_type ON assertion_execution_stats(assertion_type);
    `);
    /* istanbul ignore next */
    cov_18r6wbbyia().s[105]++;
    console.log('Database initialized successfully');
    /* istanbul ignore next */
    cov_18r6wbbyia().s[106]++;
    return exports.db;
  } catch (error) {
    /* istanbul ignore next */
    cov_18r6wbbyia().s[107]++;
    console.error('Error initializing database:', error);
    /* istanbul ignore next */
    cov_18r6wbbyia().s[108]++;
    throw error;
  }
}
// Graceful shutdown
/* istanbul ignore next */
cov_18r6wbbyia().s[109]++;
process.on('SIGINT', () => {
  /* istanbul ignore next */
  cov_18r6wbbyia().f[29]++;
  cov_18r6wbbyia().s[110]++;
  console.log('Closing database connection...');
  /* istanbul ignore next */
  cov_18r6wbbyia().s[111]++;
  exports.db.close();
  /* istanbul ignore next */
  cov_18r6wbbyia().s[112]++;
  process.exit(0);
});
/* istanbul ignore next */
cov_18r6wbbyia().s[113]++;
exports.default = exports.db;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb3ZfMThyNndiYnlpYSIsImFjdHVhbENvdmVyYWdlIiwiZXhwb3J0cyIsImluaXRpYWxpemVEYXRhYmFzZSIsImJldHRlcl9zcWxpdGUzXzEiLCJzIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsInBhdGhfMSIsImZzXzEiLCJEQVRBQkFTRV9QQVRIIiwiYiIsInByb2Nlc3MiLCJlbnYiLCJkZWZhdWx0Iiwiam9pbiIsIl9fZGlybmFtZSIsInBvb2xDb25maWciLCJtYXhDb25uZWN0aW9ucyIsInBhcnNlSW50IiwiREJfTUFYX0NPTk5FQ1RJT05TIiwiaWRsZVRpbWVvdXQiLCJEQl9JRExFX1RJTUVPVVQiLCJyZXRyeUF0dGVtcHRzIiwiREJfUkVUUllfQVRURU1QVFMiLCJyZXRyeURlbGF5IiwiREJfUkVUUllfREVMQVkiLCJEYXRhYmFzZUNvbm5lY3Rpb25Qb29sIiwiY29uc3RydWN0b3IiLCJkYlBhdGgiLCJjb25maWciLCJmIiwiY29ubmVjdGlvbnMiLCJhdmFpbGFibGVDb25uZWN0aW9ucyIsImJ1c3lDb25uZWN0aW9ucyIsIlNldCIsImluaXRpYWxpemVkIiwicmV0cnlDb3VudCIsImNyZWF0ZUNvbm5lY3Rpb24iLCJkYXRhRGlyIiwiZGlybmFtZSIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJyZWN1cnNpdmUiLCJjb25uZWN0aW9uIiwidmVyYm9zZSIsIk5PREVfRU5WIiwiY29uc29sZSIsImxvZyIsInVuZGVmaW5lZCIsInRpbWVvdXQiLCJwcmFnbWEiLCJpbml0aWFsaXplUG9vbCIsImkiLCJwdXNoIiwiZXJyb3IiLCJyZXRyeUNvbm5lY3Rpb24iLCJFcnJvciIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImdldENvbm5lY3Rpb24iLCJsZW5ndGgiLCJwb3AiLCJhZGQiLCJyZWxlYXNlQ29ubmVjdGlvbiIsImhhcyIsImRlbGV0ZSIsIndpdGhDb25uZWN0aW9uIiwib3BlcmF0aW9uIiwiZ2V0U3RhdHMiLCJ0b3RhbCIsImF2YWlsYWJsZSIsImJ1c3kiLCJzaXplIiwiY2xvc2UiLCJmb3JFYWNoIiwiY29ubiIsImNsZWFyIiwiY29ubmVjdGlvblBvb2wiLCJkYiIsInByZXBhcmUiLCJzcWwiLCJydW4iLCJwYXJhbXMiLCJzdG10IiwiZ2V0IiwiYWxsIiwiZXhlYyIsInRyYW5zYWN0aW9uIiwib3BlcmF0aW9ucyIsIm9uIiwiZXhpdCJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9iYWNrZW5kL3NyYy9kYXRhYmFzZS9jb25uZWN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEYXRhYmFzZSBmcm9tICdiZXR0ZXItc3FsaXRlMyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5cbmNvbnN0IERBVEFCQVNFX1BBVEggPSBwcm9jZXNzLmVudi5EQVRBQkFTRV9QQVRIIHx8IHBhdGguam9pbihfX2Rpcm5hbWUsICcuLi8uLi9kYXRhL2RhdGFiYXNlLnNxbGl0ZScpO1xuXG4vLyBDb25uZWN0aW9uIHBvb2wgY29uZmlndXJhdGlvblxuaW50ZXJmYWNlIENvbm5lY3Rpb25Qb29sQ29uZmlnIHtcbiAgbWF4Q29ubmVjdGlvbnM6IG51bWJlcjtcbiAgaWRsZVRpbWVvdXQ6IG51bWJlcjtcbiAgcmV0cnlBdHRlbXB0czogbnVtYmVyO1xuICByZXRyeURlbGF5OiBudW1iZXI7XG59XG5cbmNvbnN0IHBvb2xDb25maWc6IENvbm5lY3Rpb25Qb29sQ29uZmlnID0ge1xuICBtYXhDb25uZWN0aW9uczogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfTUFYX0NPTk5FQ1RJT05TIHx8ICc1JyksXG4gIGlkbGVUaW1lb3V0OiBwYXJzZUludChwcm9jZXNzLmVudi5EQl9JRExFX1RJTUVPVVQgfHwgJzMwMDAwJyksXG4gIHJldHJ5QXR0ZW1wdHM6IHBhcnNlSW50KHByb2Nlc3MuZW52LkRCX1JFVFJZX0FUVEVNUFRTIHx8ICczJyksXG4gIHJldHJ5RGVsYXk6IHBhcnNlSW50KHByb2Nlc3MuZW52LkRCX1JFVFJZX0RFTEFZIHx8ICcxMDAwJylcbn07XG5cbi8vIENvbm5lY3Rpb24gcG9vbCBpbXBsZW1lbnRhdGlvblxuY2xhc3MgRGF0YWJhc2VDb25uZWN0aW9uUG9vbCB7XG4gIHByaXZhdGUgY29ubmVjdGlvbnM6IERhdGFiYXNlLkRhdGFiYXNlW10gPSBbXTtcbiAgcHJpdmF0ZSBhdmFpbGFibGVDb25uZWN0aW9uczogRGF0YWJhc2UuRGF0YWJhc2VbXSA9IFtdO1xuICBwcml2YXRlIGJ1c3lDb25uZWN0aW9uczogU2V0PERhdGFiYXNlLkRhdGFiYXNlPiA9IG5ldyBTZXQoKTtcbiAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xuICBwcml2YXRlIHJldHJ5Q291bnQgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGJQYXRoOiBzdHJpbmcsIHByaXZhdGUgY29uZmlnOiBDb25uZWN0aW9uUG9vbENvbmZpZykge31cblxuICBwcml2YXRlIGNyZWF0ZUNvbm5lY3Rpb24oKTogRGF0YWJhc2UuRGF0YWJhc2Uge1xuICAgIC8vIEVuc3VyZSBkYXRhIGRpcmVjdG9yeSBleGlzdHNcbiAgICBjb25zdCBkYXRhRGlyID0gcGF0aC5kaXJuYW1lKHRoaXMuZGJQYXRoKTtcbiAgICBpZiAoIWZzLmV4aXN0c1N5bmMoZGF0YURpcikpIHtcbiAgICAgIGZzLm1rZGlyU3luYyhkYXRhRGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBjb25uZWN0aW9uID0gbmV3IERhdGFiYXNlKHRoaXMuZGJQYXRoLCB7XG4gICAgICB2ZXJib3NlOiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50JyA/IGNvbnNvbGUubG9nIDogdW5kZWZpbmVkLFxuICAgICAgdGltZW91dDogNTAwMCAvLyA1IHNlY29uZCB0aW1lb3V0XG4gICAgfSk7XG5cbiAgICAvLyBFbmFibGUgZm9yZWlnbiBrZXlzIGFuZCBvcHRpbWl6ZSBmb3IgY29uY3VycmVudCBhY2Nlc3NcbiAgICBjb25uZWN0aW9uLnByYWdtYSgnZm9yZWlnbl9rZXlzID0gT04nKTtcbiAgICBjb25uZWN0aW9uLnByYWdtYSgnam91cm5hbF9tb2RlID0gV0FMJyk7XG4gICAgY29ubmVjdGlvbi5wcmFnbWEoJ3N5bmNocm9ub3VzID0gTk9STUFMJyk7XG4gICAgY29ubmVjdGlvbi5wcmFnbWEoJ2NhY2hlX3NpemUgPSAxMDAwJyk7XG4gICAgY29ubmVjdGlvbi5wcmFnbWEoJ3RlbXBfc3RvcmUgPSBtZW1vcnknKTtcbiAgICBcbiAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgaW5pdGlhbGl6ZVBvb2woKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKHRoaXMuaW5pdGlhbGl6ZWQpIHJldHVybjtcblxuICAgIHRyeSB7XG4gICAgICAvLyBDcmVhdGUgaW5pdGlhbCBjb25uZWN0aW9uc1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbmZpZy5tYXhDb25uZWN0aW9uczsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB0aGlzLmNyZWF0ZUNvbm5lY3Rpb24oKTtcbiAgICAgICAgdGhpcy5jb25uZWN0aW9ucy5wdXNoKGNvbm5lY3Rpb24pO1xuICAgICAgICB0aGlzLmF2YWlsYWJsZUNvbm5lY3Rpb25zLnB1c2goY29ubmVjdGlvbik7XG4gICAgICB9XG4gICAgICBcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgdGhpcy5yZXRyeUNvdW50ID0gMDtcbiAgICAgIGNvbnNvbGUubG9nKGBEYXRhYmFzZSBjb25uZWN0aW9uIHBvb2wgaW5pdGlhbGl6ZWQgd2l0aCAke3RoaXMuY29uZmlnLm1heENvbm5lY3Rpb25zfSBjb25uZWN0aW9uc2ApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gaW5pdGlhbGl6ZSBkYXRhYmFzZSBjb25uZWN0aW9uIHBvb2w6JywgZXJyb3IpO1xuICAgICAgYXdhaXQgdGhpcy5yZXRyeUNvbm5lY3Rpb24oKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHJldHJ5Q29ubmVjdGlvbigpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy5yZXRyeUNvdW50ID49IHRoaXMuY29uZmlnLnJldHJ5QXR0ZW1wdHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGNvbm5lY3QgdG8gZGF0YWJhc2UgYWZ0ZXIgJHt0aGlzLmNvbmZpZy5yZXRyeUF0dGVtcHRzfSBhdHRlbXB0c2ApO1xuICAgIH1cblxuICAgIHRoaXMucmV0cnlDb3VudCsrO1xuICAgIGNvbnNvbGUubG9nKGBSZXRyeWluZyBkYXRhYmFzZSBjb25uZWN0aW9uIChhdHRlbXB0ICR7dGhpcy5yZXRyeUNvdW50fS8ke3RoaXMuY29uZmlnLnJldHJ5QXR0ZW1wdHN9KS4uLmApO1xuICAgIFxuICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCB0aGlzLmNvbmZpZy5yZXRyeURlbGF5ICogdGhpcy5yZXRyeUNvdW50KSk7XG4gICAgYXdhaXQgdGhpcy5pbml0aWFsaXplUG9vbCgpO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q29ubmVjdGlvbigpOiBQcm9taXNlPERhdGFiYXNlLkRhdGFiYXNlPiB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICBhd2FpdCB0aGlzLmluaXRpYWxpemVQb29sKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXZhaWxhYmxlQ29ubmVjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAvLyBXYWl0IGZvciBhIGNvbm5lY3Rpb24gdG8gYmVjb21lIGF2YWlsYWJsZVxuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwKSk7XG4gICAgICByZXR1cm4gdGhpcy5nZXRDb25uZWN0aW9uKCk7XG4gICAgfVxuXG4gICAgY29uc3QgY29ubmVjdGlvbiA9IHRoaXMuYXZhaWxhYmxlQ29ubmVjdGlvbnMucG9wKCkhO1xuICAgIHRoaXMuYnVzeUNvbm5lY3Rpb25zLmFkZChjb25uZWN0aW9uKTtcbiAgICByZXR1cm4gY29ubmVjdGlvbjtcbiAgfVxuXG4gIHJlbGVhc2VDb25uZWN0aW9uKGNvbm5lY3Rpb246IERhdGFiYXNlLkRhdGFiYXNlKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYnVzeUNvbm5lY3Rpb25zLmhhcyhjb25uZWN0aW9uKSkge1xuICAgICAgdGhpcy5idXN5Q29ubmVjdGlvbnMuZGVsZXRlKGNvbm5lY3Rpb24pO1xuICAgICAgdGhpcy5hdmFpbGFibGVDb25uZWN0aW9ucy5wdXNoKGNvbm5lY3Rpb24pO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHdpdGhDb25uZWN0aW9uPFQ+KG9wZXJhdGlvbjogKGRiOiBEYXRhYmFzZS5EYXRhYmFzZSkgPT4gUHJvbWlzZTxUPiB8IFQpOiBQcm9taXNlPFQ+IHtcbiAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgdGhpcy5nZXRDb25uZWN0aW9uKCk7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBvcGVyYXRpb24oY29ubmVjdGlvbik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMucmVsZWFzZUNvbm5lY3Rpb24oY29ubmVjdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZ2V0U3RhdHMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdGFsOiB0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aCxcbiAgICAgIGF2YWlsYWJsZTogdGhpcy5hdmFpbGFibGVDb25uZWN0aW9ucy5sZW5ndGgsXG4gICAgICBidXN5OiB0aGlzLmJ1c3lDb25uZWN0aW9ucy5zaXplLFxuICAgICAgaW5pdGlhbGl6ZWQ6IHRoaXMuaW5pdGlhbGl6ZWRcbiAgICB9O1xuICB9XG5cbiAgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5jb25uZWN0aW9ucy5mb3JFYWNoKGNvbm4gPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29ubi5jbG9zZSgpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2xvc2luZyBkYXRhYmFzZSBjb25uZWN0aW9uOicsIGVycm9yKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB0aGlzLmNvbm5lY3Rpb25zID0gW107XG4gICAgdGhpcy5hdmFpbGFibGVDb25uZWN0aW9ucyA9IFtdO1xuICAgIHRoaXMuYnVzeUNvbm5lY3Rpb25zLmNsZWFyKCk7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICB9XG59XG5cbi8vIENyZWF0ZSBnbG9iYWwgY29ubmVjdGlvbiBwb29sXG5jb25zdCBjb25uZWN0aW9uUG9vbCA9IG5ldyBEYXRhYmFzZUNvbm5lY3Rpb25Qb29sKERBVEFCQVNFX1BBVEgsIHBvb2xDb25maWcpO1xuXG4vLyBFeHBvcnQgbGVnYWN5IGRiIGludGVyZmFjZSBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuZXhwb3J0IGNvbnN0IGRiOiBhbnkgPSB7XG4gIHByZXBhcmU6IChzcWw6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBydW46IGFzeW5jICguLi5wYXJhbXM6IGFueVtdKSA9PiB7XG4gICAgICAgIHJldHVybiBjb25uZWN0aW9uUG9vbC53aXRoQ29ubmVjdGlvbigoY29ubikgPT4ge1xuICAgICAgICAgIGNvbnN0IHN0bXQgPSBjb25uLnByZXBhcmUoc3FsKTtcbiAgICAgICAgICByZXR1cm4gc3RtdC5ydW4oLi4ucGFyYW1zKTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgZ2V0OiBhc3luYyAoLi4ucGFyYW1zOiBhbnlbXSkgPT4ge1xuICAgICAgICByZXR1cm4gY29ubmVjdGlvblBvb2wud2l0aENvbm5lY3Rpb24oKGNvbm4pID0+IHtcbiAgICAgICAgICBjb25zdCBzdG10ID0gY29ubi5wcmVwYXJlKHNxbCk7XG4gICAgICAgICAgcmV0dXJuIHN0bXQuZ2V0KC4uLnBhcmFtcyk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGFsbDogYXN5bmMgKC4uLnBhcmFtczogYW55W10pID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbm5lY3Rpb25Qb29sLndpdGhDb25uZWN0aW9uKChjb25uKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc3RtdCA9IGNvbm4ucHJlcGFyZShzcWwpO1xuICAgICAgICAgIHJldHVybiBzdG10LmFsbCguLi5wYXJhbXMpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBleGVjOiBhc3luYyAoc3FsOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gY29ubmVjdGlvblBvb2wud2l0aENvbm5lY3Rpb24oKGNvbm4pID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBjb25uLmV4ZWMoc3FsKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHRocm93IGVycm9yOyAvLyBFbnN1cmUgZXJyb3JzIGFyZSBwcm9wZXJseSBwcm9wYWdhdGVkXG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHByYWdtYTogYXN5bmMgKHByYWdtYTogc3RyaW5nKSA9PiB7XG4gICAgcmV0dXJuIGNvbm5lY3Rpb25Qb29sLndpdGhDb25uZWN0aW9uKChjb25uKSA9PiBjb25uLnByYWdtYShwcmFnbWEpKTtcbiAgfSxcbiAgY2xvc2U6ICgpID0+IGNvbm5lY3Rpb25Qb29sLmNsb3NlKCksXG4gIHRyYW5zYWN0aW9uOiAob3BlcmF0aW9uczogKGRiOiBEYXRhYmFzZS5EYXRhYmFzZSkgPT4gYW55KSA9PiB7XG4gICAgcmV0dXJuIGNvbm5lY3Rpb25Qb29sLndpdGhDb25uZWN0aW9uKChjb25uKSA9PiB7XG4gICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IGNvbm4udHJhbnNhY3Rpb24ob3BlcmF0aW9ucyk7XG4gICAgICByZXR1cm4gdHJhbnNhY3Rpb24oY29ubik7XG4gICAgfSk7XG4gIH0sXG4gIGdldFN0YXRzOiAoKSA9PiBjb25uZWN0aW9uUG9vbC5nZXRTdGF0cygpXG59O1xuXG4vLyBFeHBvcnQgY29ubmVjdGlvbiBwb29sIGZvciBhZHZhbmNlZCB1c2FnZVxuZXhwb3J0IHsgY29ubmVjdGlvblBvb2wgfTtcblxuLy8gSW5pdGlhbGl6ZSBkYXRhYmFzZSB0YWJsZXNcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplRGF0YWJhc2UoKTogUHJvbWlzZTxhbnk+IHtcbiAgY29uc29sZS5sb2coJ0luaXRpYWxpemluZyBkYXRhYmFzZS4uLicpO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBDcmVhdGUgcHJvbXB0X2NhcmRzIHRhYmxlXG4gICAgYXdhaXQgZGIuZXhlYyhgXG4gICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBwcm9tcHRfY2FyZHMgKFxuICAgICAgICBpZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsXG4gICAgICAgIHRpdGxlIFRFWFQgTk9UIE5VTEwsXG4gICAgICAgIGRlc2NyaXB0aW9uIFRFWFQsXG4gICAgICAgIHByb21wdF90ZW1wbGF0ZSBURVhUIE5PVCBOVUxMLFxuICAgICAgICB2YXJpYWJsZXMgVEVYVCBERUZBVUxUICdbXScsIC0tIEpTT04gYXJyYXkgb2YgdmFyaWFibGUgbmFtZXNcbiAgICAgICAgY3JlYXRlZF9hdCBEQVRFVElNRSBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLFxuICAgICAgICB1cGRhdGVkX2F0IERBVEVUSU1FIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVBcbiAgICAgIClcbiAgICBgKTtcblxuICAgIC8vIENyZWF0ZSB0ZXN0X2Nhc2VzIHRhYmxlXG4gICAgYXdhaXQgZGIuZXhlYyhgXG4gICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB0ZXN0X2Nhc2VzIChcbiAgICAgICAgaWQgSU5URUdFUiBQUklNQVJZIEtFWSBBVVRPSU5DUkVNRU5ULFxuICAgICAgICBwcm9tcHRfY2FyZF9pZCBJTlRFR0VSIE5PVCBOVUxMLFxuICAgICAgICBuYW1lIFRFWFQgTk9UIE5VTEwsXG4gICAgICAgIGlucHV0X3ZhcmlhYmxlcyBURVhUIE5PVCBOVUxMLCAtLSBKU09OIG9iamVjdFxuICAgICAgICBleHBlY3RlZF9vdXRwdXQgVEVYVCxcbiAgICAgICAgYXNzZXJ0aW9ucyBURVhUIERFRkFVTFQgJ1tdJywgLS0gSlNPTiBhcnJheSBvZiBhc3NlcnRpb24gb2JqZWN0c1xuICAgICAgICBjcmVhdGVkX2F0IERBVEVUSU1FIERFRkFVTFQgQ1VSUkVOVF9USU1FU1RBTVAsXG4gICAgICAgIEZPUkVJR04gS0VZIChwcm9tcHRfY2FyZF9pZCkgUkVGRVJFTkNFUyBwcm9tcHRfY2FyZHMoaWQpIE9OIERFTEVURSBDQVNDQURFXG4gICAgICApXG4gICAgYCk7XG5cbiAgICAvLyBDcmVhdGUgZW5oYW5jZWQgdGVzdF9yZXN1bHRzIHRhYmxlIGZvciBQaGFzZSA0XG4gICAgYXdhaXQgZGIuZXhlYyhgXG4gICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB0ZXN0X3Jlc3VsdHMgKFxuICAgICAgICBpZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsXG4gICAgICAgIHRlc3RfY2FzZV9pZCBJTlRFR0VSIE5PVCBOVUxMLFxuICAgICAgICBleGVjdXRpb25faWQgVEVYVCBOT1QgTlVMTCxcbiAgICAgICAgbW9kZWwgVEVYVCBOT1QgTlVMTCxcbiAgICAgICAgcmVzcG9uc2UgVEVYVCBOT1QgTlVMTCxcbiAgICAgICAgcGFzc2VkIEJPT0xFQU4gTk9UIE5VTEwsXG4gICAgICAgIGFzc2VydGlvbnMgVEVYVCBERUZBVUxUICdbXScsIC0tIEpTT04gYXJyYXkgb2YgYXNzZXJ0aW9uIHJlc3VsdHNcbiAgICAgICAgZXhlY3V0aW9uX3RpbWVfbXMgSU5URUdFUixcbiAgICAgICAgZXJyb3IgVEVYVCxcbiAgICAgICAgY3JlYXRlZF9hdCBEQVRFVElNRSBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QLFxuICAgICAgICBGT1JFSUdOIEtFWSAodGVzdF9jYXNlX2lkKSBSRUZFUkVOQ0VTIHRlc3RfY2FzZXMoaWQpIE9OIERFTEVURSBDQVNDQURFXG4gICAgICApXG4gICAgYCk7XG5cbiAgICAvLyBDcmVhdGUgdGVzdCBleGVjdXRpb24gcXVldWUgdGFibGVcbiAgICBhd2FpdCBkYi5leGVjKGBcbiAgICAgIENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIHRlc3RfZXhlY3V0aW9uX3F1ZXVlIChcbiAgICAgICAgaWQgSU5URUdFUiBQUklNQVJZIEtFWSBBVVRPSU5DUkVNRU5ULFxuICAgICAgICBleGVjdXRpb25faWQgVEVYVCBVTklRVUUgTk9UIE5VTEwsXG4gICAgICAgIHByb21wdF9jYXJkX2lkIElOVEVHRVIgTk9UIE5VTEwsXG4gICAgICAgIHRlc3RfY2FzZV9pZHMgVEVYVCBOT1QgTlVMTCwgLS0gSlNPTiBhcnJheVxuICAgICAgICBtb2RlbCBURVhUIE5PVCBOVUxMLFxuICAgICAgICBzdGF0dXMgVEVYVCBERUZBVUxUICdwZW5kaW5nJywgLS0gcGVuZGluZywgcnVubmluZywgY29tcGxldGVkLCBmYWlsZWQsIGNhbmNlbGxlZFxuICAgICAgICBwcmlvcml0eSBJTlRFR0VSIERFRkFVTFQgMCxcbiAgICAgICAgY29uZmlndXJhdGlvbiBURVhULCAtLSBKU09OXG4gICAgICAgIGNyZWF0ZWRfYXQgREFURVRJTUUgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUCxcbiAgICAgICAgc3RhcnRlZF9hdCBEQVRFVElNRSxcbiAgICAgICAgY29tcGxldGVkX2F0IERBVEVUSU1FLFxuICAgICAgICBlcnJvcl9tZXNzYWdlIFRFWFQsXG4gICAgICAgIEZPUkVJR04gS0VZIChwcm9tcHRfY2FyZF9pZCkgUkVGRVJFTkNFUyBwcm9tcHRfY2FyZHMoaWQpXG4gICAgICApXG4gICAgYCk7XG5cbiAgICAvLyBDcmVhdGUgYXNzZXJ0aW9uX3R5cGVzIHRhYmxlIGZvciBhZHZhbmNlZCBhc3NlcnRpb24gc3lzdGVtXG4gICAgYXdhaXQgZGIuZXhlYyhgXG4gICAgICBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBhc3NlcnRpb25fdHlwZXMgKFxuICAgICAgICBpZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsXG4gICAgICAgIG5hbWUgVEVYVCBVTklRVUUgTk9UIE5VTEwsXG4gICAgICAgIGRlc2NyaXB0aW9uIFRFWFQgTk9UIE5VTEwsXG4gICAgICAgIHBhcmFtZXRlcnMgVEVYVCBOT1QgTlVMTCwgLS0gSlNPTlxuICAgICAgICBleGFtcGxlcyBURVhUIE5PVCBOVUxMLCAtLSBKU09OXG4gICAgICAgIHZhbGlkYXRvcl9jb2RlIFRFWFQgTk9UIE5VTEwsXG4gICAgICAgIGNyZWF0ZWRfYXQgREFURVRJTUUgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUCxcbiAgICAgICAgdXBkYXRlZF9hdCBEQVRFVElNRSBERUZBVUxUIENVUlJFTlRfVElNRVNUQU1QXG4gICAgICApXG4gICAgYCk7XG5cbiAgICAvLyBDcmVhdGUgYXNzZXJ0aW9uIGV4ZWN1dGlvbiBzdGF0cyB0YWJsZVxuICAgIGF3YWl0IGRiLmV4ZWMoYFxuICAgICAgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgYXNzZXJ0aW9uX2V4ZWN1dGlvbl9zdGF0cyAoXG4gICAgICAgIGlkIElOVEVHRVIgUFJJTUFSWSBLRVkgQVVUT0lOQ1JFTUVOVCxcbiAgICAgICAgYXNzZXJ0aW9uX3R5cGUgVEVYVCBOT1QgTlVMTCxcbiAgICAgICAgdG90YWxfZXhlY3V0aW9ucyBJTlRFR0VSIERFRkFVTFQgMCxcbiAgICAgICAgc3VjY2Vzc2Z1bF9leGVjdXRpb25zIElOVEVHRVIgREVGQVVMVCAwLFxuICAgICAgICBmYWlsZWRfZXhlY3V0aW9ucyBJTlRFR0VSIERFRkFVTFQgMCxcbiAgICAgICAgdG90YWxfZXhlY3V0aW9uX3RpbWUgSU5URUdFUiBERUZBVUxUIDAsXG4gICAgICAgIGxhc3RfZXhlY3V0ZWQgREFURVRJTUUgREVGQVVMVCBDVVJSRU5UX1RJTUVTVEFNUCxcbiAgICAgICAgVU5JUVVFKGFzc2VydGlvbl90eXBlKVxuICAgICAgKVxuICAgIGApO1xuXG4gICAgLy8gQ3JlYXRlIGluZGV4ZXMgZm9yIGJldHRlciBwZXJmb3JtYW5jZVxuICAgIGF3YWl0IGRiLmV4ZWMoYFxuICAgICAgQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X3Byb21wdF9jYXJkc190aXRsZSBPTiBwcm9tcHRfY2FyZHModGl0bGUpO1xuICAgICAgQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X3Rlc3RfY2FzZXNfcHJvbXB0X2NhcmRfaWQgT04gdGVzdF9jYXNlcyhwcm9tcHRfY2FyZF9pZCk7XG4gICAgICBDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBpZHhfdGVzdF9yZXN1bHRzX3Rlc3RfY2FzZV9pZCBPTiB0ZXN0X3Jlc3VsdHModGVzdF9jYXNlX2lkKTtcbiAgICAgIENSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIGlkeF90ZXN0X3Jlc3VsdHNfZXhlY3V0aW9uX2lkIE9OIHRlc3RfcmVzdWx0cyhleGVjdXRpb25faWQpO1xuICAgICAgQ1JFQVRFIElOREVYIElGIE5PVCBFWElTVFMgaWR4X3Rlc3RfcXVldWVfc3RhdHVzIE9OIHRlc3RfZXhlY3V0aW9uX3F1ZXVlKHN0YXR1cyk7XG4gICAgICBDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBpZHhfdGVzdF9xdWV1ZV9wcmlvcml0eSBPTiB0ZXN0X2V4ZWN1dGlvbl9xdWV1ZShwcmlvcml0eSBERVNDKTtcbiAgICAgIENSRUFURSBJTkRFWCBJRiBOT1QgRVhJU1RTIGlkeF9hc3NlcnRpb25fdHlwZXNfbmFtZSBPTiBhc3NlcnRpb25fdHlwZXMobmFtZSk7XG4gICAgICBDUkVBVEUgSU5ERVggSUYgTk9UIEVYSVNUUyBpZHhfYXNzZXJ0aW9uX3N0YXRzX3R5cGUgT04gYXNzZXJ0aW9uX2V4ZWN1dGlvbl9zdGF0cyhhc3NlcnRpb25fdHlwZSk7XG4gICAgYCk7XG5cbiAgICBjb25zb2xlLmxvZygnRGF0YWJhc2UgaW5pdGlhbGl6ZWQgc3VjY2Vzc2Z1bGx5Jyk7XG4gICAgcmV0dXJuIGRiO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGluaXRpYWxpemluZyBkYXRhYmFzZTonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLy8gR3JhY2VmdWwgc2h1dGRvd25cbnByb2Nlc3Mub24oJ1NJR0lOVCcsICgpID0+IHtcbiAgY29uc29sZS5sb2coJ0Nsb3NpbmcgZGF0YWJhc2UgY29ubmVjdGlvbi4uLicpO1xuICBkYi5jbG9zZSgpO1xuICBwcm9jZXNzLmV4aXQoMCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGI7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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