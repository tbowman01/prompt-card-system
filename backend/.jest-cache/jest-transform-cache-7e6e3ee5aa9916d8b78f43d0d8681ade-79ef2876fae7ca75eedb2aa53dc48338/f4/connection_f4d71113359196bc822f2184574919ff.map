{"version":3,"names":["cov_18r6wbbyia","actualCoverage","exports","initializeDatabase","better_sqlite3_1","s","__importDefault","require","path_1","fs_1","DATABASE_PATH","b","process","env","default","join","__dirname","poolConfig","maxConnections","parseInt","DB_MAX_CONNECTIONS","idleTimeout","DB_IDLE_TIMEOUT","retryAttempts","DB_RETRY_ATTEMPTS","retryDelay","DB_RETRY_DELAY","DatabaseConnectionPool","constructor","dbPath","config","f","connections","availableConnections","busyConnections","Set","initialized","retryCount","createConnection","dataDir","dirname","existsSync","mkdirSync","recursive","connection","verbose","NODE_ENV","console","log","undefined","timeout","pragma","initializePool","i","push","error","retryConnection","Error","Promise","resolve","setTimeout","getConnection","length","pop","add","releaseConnection","has","delete","withConnection","operation","getStats","total","available","busy","size","close","forEach","conn","clear","connectionPool","db","prepare","sql","run","params","stmt","get","all","exec","transaction","operations","on","exit"],"sources":["/workspaces/prompt-card-system/backend/src/database/connection.ts"],"sourcesContent":["import Database from 'better-sqlite3';\nimport path from 'path';\nimport fs from 'fs';\n\nconst DATABASE_PATH = process.env.DATABASE_PATH || path.join(__dirname, '../../data/database.sqlite');\n\n// Connection pool configuration\ninterface ConnectionPoolConfig {\n  maxConnections: number;\n  idleTimeout: number;\n  retryAttempts: number;\n  retryDelay: number;\n}\n\nconst poolConfig: ConnectionPoolConfig = {\n  maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS || '5'),\n  idleTimeout: parseInt(process.env.DB_IDLE_TIMEOUT || '30000'),\n  retryAttempts: parseInt(process.env.DB_RETRY_ATTEMPTS || '3'),\n  retryDelay: parseInt(process.env.DB_RETRY_DELAY || '1000')\n};\n\n// Connection pool implementation\nclass DatabaseConnectionPool {\n  private connections: Database.Database[] = [];\n  private availableConnections: Database.Database[] = [];\n  private busyConnections: Set<Database.Database> = new Set();\n  private initialized = false;\n  private retryCount = 0;\n\n  constructor(private dbPath: string, private config: ConnectionPoolConfig) {}\n\n  private createConnection(): Database.Database {\n    // Ensure data directory exists\n    const dataDir = path.dirname(this.dbPath);\n    if (!fs.existsSync(dataDir)) {\n      fs.mkdirSync(dataDir, { recursive: true });\n    }\n\n    const connection = new Database(this.dbPath, {\n      verbose: process.env.NODE_ENV === 'development' ? console.log : undefined,\n      timeout: 5000 // 5 second timeout\n    });\n\n    // Enable foreign keys and optimize for concurrent access\n    connection.pragma('foreign_keys = ON');\n    connection.pragma('journal_mode = WAL');\n    connection.pragma('synchronous = NORMAL');\n    connection.pragma('cache_size = 1000');\n    connection.pragma('temp_store = memory');\n    \n    return connection;\n  }\n\n  private async initializePool(): Promise<void> {\n    if (this.initialized) return;\n\n    try {\n      // Create initial connections\n      for (let i = 0; i < this.config.maxConnections; i++) {\n        const connection = this.createConnection();\n        this.connections.push(connection);\n        this.availableConnections.push(connection);\n      }\n      \n      this.initialized = true;\n      this.retryCount = 0;\n      console.log(`Database connection pool initialized with ${this.config.maxConnections} connections`);\n    } catch (error) {\n      console.error('Failed to initialize database connection pool:', error);\n      await this.retryConnection();\n    }\n  }\n\n  private async retryConnection(): Promise<void> {\n    if (this.retryCount >= this.config.retryAttempts) {\n      throw new Error(`Failed to connect to database after ${this.config.retryAttempts} attempts`);\n    }\n\n    this.retryCount++;\n    console.log(`Retrying database connection (attempt ${this.retryCount}/${this.config.retryAttempts})...`);\n    \n    await new Promise(resolve => setTimeout(resolve, this.config.retryDelay * this.retryCount));\n    await this.initializePool();\n  }\n\n  async getConnection(): Promise<Database.Database> {\n    if (!this.initialized) {\n      await this.initializePool();\n    }\n\n    if (this.availableConnections.length === 0) {\n      // Wait for a connection to become available\n      await new Promise(resolve => setTimeout(resolve, 10));\n      return this.getConnection();\n    }\n\n    const connection = this.availableConnections.pop()!;\n    this.busyConnections.add(connection);\n    return connection;\n  }\n\n  releaseConnection(connection: Database.Database): void {\n    if (this.busyConnections.has(connection)) {\n      this.busyConnections.delete(connection);\n      this.availableConnections.push(connection);\n    }\n  }\n\n  async withConnection<T>(operation: (db: Database.Database) => Promise<T> | T): Promise<T> {\n    const connection = await this.getConnection();\n    try {\n      return await operation(connection);\n    } finally {\n      this.releaseConnection(connection);\n    }\n  }\n\n  getStats() {\n    return {\n      total: this.connections.length,\n      available: this.availableConnections.length,\n      busy: this.busyConnections.size,\n      initialized: this.initialized\n    };\n  }\n\n  close(): void {\n    this.connections.forEach(conn => {\n      try {\n        conn.close();\n      } catch (error) {\n        console.error('Error closing database connection:', error);\n      }\n    });\n    this.connections = [];\n    this.availableConnections = [];\n    this.busyConnections.clear();\n    this.initialized = false;\n  }\n}\n\n// Create global connection pool\nconst connectionPool = new DatabaseConnectionPool(DATABASE_PATH, poolConfig);\n\n// Export legacy db interface for backward compatibility\nexport const db: any = {\n  prepare: (sql: string) => {\n    return {\n      run: async (...params: any[]) => {\n        return connectionPool.withConnection((conn) => {\n          const stmt = conn.prepare(sql);\n          return stmt.run(...params);\n        });\n      },\n      get: async (...params: any[]) => {\n        return connectionPool.withConnection((conn) => {\n          const stmt = conn.prepare(sql);\n          return stmt.get(...params);\n        });\n      },\n      all: async (...params: any[]) => {\n        return connectionPool.withConnection((conn) => {\n          const stmt = conn.prepare(sql);\n          return stmt.all(...params);\n        });\n      }\n    };\n  },\n  exec: async (sql: string) => {\n    return connectionPool.withConnection((conn) => {\n      try {\n        return conn.exec(sql);\n      } catch (error) {\n        throw error; // Ensure errors are properly propagated\n      }\n    });\n  },\n  pragma: async (pragma: string) => {\n    return connectionPool.withConnection((conn) => conn.pragma(pragma));\n  },\n  close: () => connectionPool.close(),\n  transaction: (operations: (db: Database.Database) => any) => {\n    return connectionPool.withConnection((conn) => {\n      const transaction = conn.transaction(operations);\n      return transaction(conn);\n    });\n  },\n  getStats: () => connectionPool.getStats()\n};\n\n// Export connection pool for advanced usage\nexport { connectionPool };\n\n// Initialize database tables\nexport async function initializeDatabase(): Promise<any> {\n  console.log('Initializing database...');\n  \n  try {\n    // Create prompt_cards table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS prompt_cards (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        title TEXT NOT NULL,\n        description TEXT,\n        prompt_template TEXT NOT NULL,\n        variables TEXT DEFAULT '[]', -- JSON array of variable names\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create test_cases table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_cases (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        prompt_card_id INTEGER NOT NULL,\n        name TEXT NOT NULL,\n        input_variables TEXT NOT NULL, -- JSON object\n        expected_output TEXT,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion objects\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Create enhanced test_results table for Phase 4\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_results (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        test_case_id INTEGER NOT NULL,\n        execution_id TEXT NOT NULL,\n        model TEXT NOT NULL,\n        response TEXT NOT NULL,\n        passed BOOLEAN NOT NULL,\n        assertions TEXT DEFAULT '[]', -- JSON array of assertion results\n        execution_time_ms INTEGER,\n        error TEXT,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        FOREIGN KEY (test_case_id) REFERENCES test_cases(id) ON DELETE CASCADE\n      )\n    `);\n\n    // Create test execution queue table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS test_execution_queue (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        execution_id TEXT UNIQUE NOT NULL,\n        prompt_card_id INTEGER NOT NULL,\n        test_case_ids TEXT NOT NULL, -- JSON array\n        model TEXT NOT NULL,\n        status TEXT DEFAULT 'pending', -- pending, running, completed, failed, cancelled\n        priority INTEGER DEFAULT 0,\n        configuration TEXT, -- JSON\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        started_at DATETIME,\n        completed_at DATETIME,\n        error_message TEXT,\n        FOREIGN KEY (prompt_card_id) REFERENCES prompt_cards(id)\n      )\n    `);\n\n    // Create assertion_types table for advanced assertion system\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_types (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        name TEXT UNIQUE NOT NULL,\n        description TEXT NOT NULL,\n        parameters TEXT NOT NULL, -- JSON\n        examples TEXT NOT NULL, -- JSON\n        validator_code TEXT NOT NULL,\n        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP\n      )\n    `);\n\n    // Create assertion execution stats table\n    await db.exec(`\n      CREATE TABLE IF NOT EXISTS assertion_execution_stats (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        assertion_type TEXT NOT NULL,\n        total_executions INTEGER DEFAULT 0,\n        successful_executions INTEGER DEFAULT 0,\n        failed_executions INTEGER DEFAULT 0,\n        total_execution_time INTEGER DEFAULT 0,\n        last_executed DATETIME DEFAULT CURRENT_TIMESTAMP,\n        UNIQUE(assertion_type)\n      )\n    `);\n\n    // Create indexes for better performance\n    await db.exec(`\n      CREATE INDEX IF NOT EXISTS idx_prompt_cards_title ON prompt_cards(title);\n      CREATE INDEX IF NOT EXISTS idx_test_cases_prompt_card_id ON test_cases(prompt_card_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_test_case_id ON test_results(test_case_id);\n      CREATE INDEX IF NOT EXISTS idx_test_results_execution_id ON test_results(execution_id);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_status ON test_execution_queue(status);\n      CREATE INDEX IF NOT EXISTS idx_test_queue_priority ON test_execution_queue(priority DESC);\n      CREATE INDEX IF NOT EXISTS idx_assertion_types_name ON assertion_types(name);\n      CREATE INDEX IF NOT EXISTS idx_assertion_stats_type ON assertion_execution_stats(assertion_type);\n    `);\n\n    console.log('Database initialized successfully');\n    return db;\n  } catch (error) {\n    console.error('Error initializing database:', error);\n    throw error;\n  }\n}\n\n// Graceful shutdown\nprocess.on('SIGINT', () => {\n  console.log('Closing database connection...');\n  db.close();\n  process.exit(0);\n});\n\nexport default db;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkBE;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgLFE,OAAA,CAAAC,kBAAA,GAAAA,kBAAA;AAlMA,MAAAC,gBAAA;AAAA;AAAA,CAAAJ,cAAA,GAAAK,CAAA,OAAAC,eAAA,CAAAC,OAAA;AACA,MAAAC,MAAA;AAAA;AAAA,CAAAR,cAAA,GAAAK,CAAA,OAAAC,eAAA,CAAAC,OAAA;AACA,MAAAE,IAAA;AAAA;AAAA,CAAAT,cAAA,GAAAK,CAAA,OAAAC,eAAA,CAAAC,OAAA;AAEA,MAAMG,aAAa;AAAA;AAAA,CAAAV,cAAA,GAAAK,CAAA;AAAG;AAAA,CAAAL,cAAA,GAAAW,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACH,aAAa;AAAA;AAAA,CAAAV,cAAA,GAAAW,CAAA,UAAIH,MAAA,CAAAM,OAAI,CAACC,IAAI,CAACC,SAAS,EAAE,4BAA4B,CAAC;AAUrG,MAAMC,UAAU;AAAA;AAAA,CAAAjB,cAAA,GAAAK,CAAA,OAAyB;EACvCa,cAAc,EAAEC,QAAQ;EAAC;EAAA,CAAAnB,cAAA,GAAAW,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACO,kBAAkB;EAAA;EAAA,CAAApB,cAAA,GAAAW,CAAA,UAAI,GAAG,EAAC;EAC/DU,WAAW,EAAEF,QAAQ;EAAC;EAAA,CAAAnB,cAAA,GAAAW,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACS,eAAe;EAAA;EAAA,CAAAtB,cAAA,GAAAW,CAAA,UAAI,OAAO,EAAC;EAC7DY,aAAa,EAAEJ,QAAQ;EAAC;EAAA,CAAAnB,cAAA,GAAAW,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACW,iBAAiB;EAAA;EAAA,CAAAxB,cAAA,GAAAW,CAAA,UAAI,GAAG,EAAC;EAC7Dc,UAAU,EAAEN,QAAQ;EAAC;EAAA,CAAAnB,cAAA,GAAAW,CAAA,UAAAC,OAAO,CAACC,GAAG,CAACa,cAAc;EAAA;EAAA,CAAA1B,cAAA,GAAAW,CAAA,UAAI,MAAM;CAC1D;AAED;AACA,MAAMgB,sBAAsB;EAO1BC,YAAoBC,MAAc,EAAUC,MAA4B;IAAA;IAAA9B,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IAApD,KAAAwB,MAAM,GAANA,MAAM;IAAQ;IAAA7B,cAAA,GAAAK,CAAA;IAAU,KAAAyB,MAAM,GAANA,MAAM;IAAsB;IAAA9B,cAAA,GAAAK,CAAA;IANhE,KAAA2B,WAAW,GAAwB,EAAE;IAAC;IAAAhC,cAAA,GAAAK,CAAA;IACtC,KAAA4B,oBAAoB,GAAwB,EAAE;IAAC;IAAAjC,cAAA,GAAAK,CAAA;IAC/C,KAAA6B,eAAe,GAA2B,IAAIC,GAAG,EAAE;IAAC;IAAAnC,cAAA,GAAAK,CAAA;IACpD,KAAA+B,WAAW,GAAG,KAAK;IAAC;IAAApC,cAAA,GAAAK,CAAA;IACpB,KAAAgC,UAAU,GAAG,CAAC;EAEqD;EAEnEC,gBAAgBA,CAAA;IAAA;IAAAtC,cAAA,GAAA+B,CAAA;IACtB;IACA,MAAMQ,OAAO;IAAA;IAAA,CAAAvC,cAAA,GAAAK,CAAA,QAAGG,MAAA,CAAAM,OAAI,CAAC0B,OAAO,CAAC,IAAI,CAACX,MAAM,CAAC;IAAC;IAAA7B,cAAA,GAAAK,CAAA;IAC1C,IAAI,CAACI,IAAA,CAAAK,OAAE,CAAC2B,UAAU,CAACF,OAAO,CAAC,EAAE;MAAA;MAAAvC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAK,CAAA;MAC3BI,IAAA,CAAAK,OAAE,CAAC4B,SAAS,CAACH,OAAO,EAAE;QAAEI,SAAS,EAAE;MAAI,CAAE,CAAC;IAC5C,CAAC;IAAA;IAAA;MAAA3C,cAAA,GAAAW,CAAA;IAAA;IAED,MAAMiC,UAAU;IAAA;IAAA,CAAA5C,cAAA,GAAAK,CAAA,QAAG,IAAID,gBAAA,CAAAU,OAAQ,CAAC,IAAI,CAACe,MAAM,EAAE;MAC3CgB,OAAO,EAAEjC,OAAO,CAACC,GAAG,CAACiC,QAAQ,KAAK,aAAa;MAAA;MAAA,CAAA9C,cAAA,GAAAW,CAAA,UAAGoC,OAAO,CAACC,GAAG;MAAA;MAAA,CAAAhD,cAAA,GAAAW,CAAA,UAAGsC,SAAS;MACzEC,OAAO,EAAE,IAAI,CAAC;KACf,CAAC;IAEF;IAAA;IAAAlD,cAAA,GAAAK,CAAA;IACAuC,UAAU,CAACO,MAAM,CAAC,mBAAmB,CAAC;IAAC;IAAAnD,cAAA,GAAAK,CAAA;IACvCuC,UAAU,CAACO,MAAM,CAAC,oBAAoB,CAAC;IAAC;IAAAnD,cAAA,GAAAK,CAAA;IACxCuC,UAAU,CAACO,MAAM,CAAC,sBAAsB,CAAC;IAAC;IAAAnD,cAAA,GAAAK,CAAA;IAC1CuC,UAAU,CAACO,MAAM,CAAC,mBAAmB,CAAC;IAAC;IAAAnD,cAAA,GAAAK,CAAA;IACvCuC,UAAU,CAACO,MAAM,CAAC,qBAAqB,CAAC;IAAC;IAAAnD,cAAA,GAAAK,CAAA;IAEzC,OAAOuC,UAAU;EACnB;EAEQ,MAAMQ,cAAcA,CAAA;IAAA;IAAApD,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IAC1B,IAAI,IAAI,CAAC+B,WAAW,EAAE;MAAA;MAAApC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAK,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAL,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAK,CAAA;IAE7B,IAAI;MAAA;MAAAL,cAAA,GAAAK,CAAA;MACF;MACA,KAAK,IAAIgD,CAAC;MAAA;MAAA,CAAArD,cAAA,GAAAK,CAAA,QAAG,CAAC,GAAEgD,CAAC,GAAG,IAAI,CAACvB,MAAM,CAACZ,cAAc,EAAEmC,CAAC,EAAE,EAAE;QACnD,MAAMT,UAAU;QAAA;QAAA,CAAA5C,cAAA,GAAAK,CAAA,QAAG,IAAI,CAACiC,gBAAgB,EAAE;QAAC;QAAAtC,cAAA,GAAAK,CAAA;QAC3C,IAAI,CAAC2B,WAAW,CAACsB,IAAI,CAACV,UAAU,CAAC;QAAC;QAAA5C,cAAA,GAAAK,CAAA;QAClC,IAAI,CAAC4B,oBAAoB,CAACqB,IAAI,CAACV,UAAU,CAAC;MAC5C;MAAC;MAAA5C,cAAA,GAAAK,CAAA;MAED,IAAI,CAAC+B,WAAW,GAAG,IAAI;MAAC;MAAApC,cAAA,GAAAK,CAAA;MACxB,IAAI,CAACgC,UAAU,GAAG,CAAC;MAAC;MAAArC,cAAA,GAAAK,CAAA;MACpB0C,OAAO,CAACC,GAAG,CAAC,6CAA6C,IAAI,CAAClB,MAAM,CAACZ,cAAc,cAAc,CAAC;IACpG,CAAC,CAAC,OAAOqC,KAAK,EAAE;MAAA;MAAAvD,cAAA,GAAAK,CAAA;MACd0C,OAAO,CAACQ,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;MAAC;MAAAvD,cAAA,GAAAK,CAAA;MACvE,MAAM,IAAI,CAACmD,eAAe,EAAE;IAC9B;EACF;EAEQ,MAAMA,eAAeA,CAAA;IAAA;IAAAxD,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IAC3B,IAAI,IAAI,CAACgC,UAAU,IAAI,IAAI,CAACP,MAAM,CAACP,aAAa,EAAE;MAAA;MAAAvB,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAK,CAAA;MAChD,MAAM,IAAIoD,KAAK,CAAC,uCAAuC,IAAI,CAAC3B,MAAM,CAACP,aAAa,WAAW,CAAC;IAC9F,CAAC;IAAA;IAAA;MAAAvB,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAK,CAAA;IAED,IAAI,CAACgC,UAAU,EAAE;IAAC;IAAArC,cAAA,GAAAK,CAAA;IAClB0C,OAAO,CAACC,GAAG,CAAC,yCAAyC,IAAI,CAACX,UAAU,IAAI,IAAI,CAACP,MAAM,CAACP,aAAa,MAAM,CAAC;IAAC;IAAAvB,cAAA,GAAAK,CAAA;IAEzG,MAAM,IAAIqD,OAAO,CAACC,OAAO,IAAI;MAAA;MAAA3D,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAK,CAAA;MAAA,OAAAuD,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC7B,MAAM,CAACL,UAAU,GAAG,IAAI,CAACY,UAAU,CAAC;IAAD,CAAC,CAAC;IAAC;IAAArC,cAAA,GAAAK,CAAA;IAC5F,MAAM,IAAI,CAAC+C,cAAc,EAAE;EAC7B;EAEA,MAAMS,aAAaA,CAAA;IAAA;IAAA7D,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IACjB,IAAI,CAAC,IAAI,CAAC+B,WAAW,EAAE;MAAA;MAAApC,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAK,CAAA;MACrB,MAAM,IAAI,CAAC+C,cAAc,EAAE;IAC7B,CAAC;IAAA;IAAA;MAAApD,cAAA,GAAAW,CAAA;IAAA;IAAAX,cAAA,GAAAK,CAAA;IAED,IAAI,IAAI,CAAC4B,oBAAoB,CAAC6B,MAAM,KAAK,CAAC,EAAE;MAAA;MAAA9D,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAK,CAAA;MAC1C;MACA,MAAM,IAAIqD,OAAO,CAACC,OAAO,IAAI;QAAA;QAAA3D,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAK,CAAA;QAAA,OAAAuD,UAAU,CAACD,OAAO,EAAE,EAAE,CAAC;MAAD,CAAC,CAAC;MAAC;MAAA3D,cAAA,GAAAK,CAAA;MACtD,OAAO,IAAI,CAACwD,aAAa,EAAE;IAC7B,CAAC;IAAA;IAAA;MAAA7D,cAAA,GAAAW,CAAA;IAAA;IAED,MAAMiC,UAAU;IAAA;IAAA,CAAA5C,cAAA,GAAAK,CAAA,QAAG,IAAI,CAAC4B,oBAAoB,CAAC8B,GAAG,EAAG;IAAC;IAAA/D,cAAA,GAAAK,CAAA;IACpD,IAAI,CAAC6B,eAAe,CAAC8B,GAAG,CAACpB,UAAU,CAAC;IAAC;IAAA5C,cAAA,GAAAK,CAAA;IACrC,OAAOuC,UAAU;EACnB;EAEAqB,iBAAiBA,CAACrB,UAA6B;IAAA;IAAA5C,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IAC7C,IAAI,IAAI,CAAC6B,eAAe,CAACgC,GAAG,CAACtB,UAAU,CAAC,EAAE;MAAA;MAAA5C,cAAA,GAAAW,CAAA;MAAAX,cAAA,GAAAK,CAAA;MACxC,IAAI,CAAC6B,eAAe,CAACiC,MAAM,CAACvB,UAAU,CAAC;MAAC;MAAA5C,cAAA,GAAAK,CAAA;MACxC,IAAI,CAAC4B,oBAAoB,CAACqB,IAAI,CAACV,UAAU,CAAC;IAC5C,CAAC;IAAA;IAAA;MAAA5C,cAAA,GAAAW,CAAA;IAAA;EACH;EAEA,MAAMyD,cAAcA,CAAIC,SAAoD;IAAA;IAAArE,cAAA,GAAA+B,CAAA;IAC1E,MAAMa,UAAU;IAAA;IAAA,CAAA5C,cAAA,GAAAK,CAAA,QAAG,MAAM,IAAI,CAACwD,aAAa,EAAE;IAAC;IAAA7D,cAAA,GAAAK,CAAA;IAC9C,IAAI;MAAA;MAAAL,cAAA,GAAAK,CAAA;MACF,OAAO,MAAMgE,SAAS,CAACzB,UAAU,CAAC;IACpC,CAAC,SAAS;MAAA;MAAA5C,cAAA,GAAAK,CAAA;MACR,IAAI,CAAC4D,iBAAiB,CAACrB,UAAU,CAAC;IACpC;EACF;EAEA0B,QAAQA,CAAA;IAAA;IAAAtE,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IACN,OAAO;MACLkE,KAAK,EAAE,IAAI,CAACvC,WAAW,CAAC8B,MAAM;MAC9BU,SAAS,EAAE,IAAI,CAACvC,oBAAoB,CAAC6B,MAAM;MAC3CW,IAAI,EAAE,IAAI,CAACvC,eAAe,CAACwC,IAAI;MAC/BtC,WAAW,EAAE,IAAI,CAACA;KACnB;EACH;EAEAuC,KAAKA,CAAA;IAAA;IAAA3E,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IACH,IAAI,CAAC2B,WAAW,CAAC4C,OAAO,CAACC,IAAI,IAAG;MAAA;MAAA7E,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAK,CAAA;MAC9B,IAAI;QAAA;QAAAL,cAAA,GAAAK,CAAA;QACFwE,IAAI,CAACF,KAAK,EAAE;MACd,CAAC,CAAC,OAAOpB,KAAK,EAAE;QAAA;QAAAvD,cAAA,GAAAK,CAAA;QACd0C,OAAO,CAACQ,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D;IACF,CAAC,CAAC;IAAC;IAAAvD,cAAA,GAAAK,CAAA;IACH,IAAI,CAAC2B,WAAW,GAAG,EAAE;IAAC;IAAAhC,cAAA,GAAAK,CAAA;IACtB,IAAI,CAAC4B,oBAAoB,GAAG,EAAE;IAAC;IAAAjC,cAAA,GAAAK,CAAA;IAC/B,IAAI,CAAC6B,eAAe,CAAC4C,KAAK,EAAE;IAAC;IAAA9E,cAAA,GAAAK,CAAA;IAC7B,IAAI,CAAC+B,WAAW,GAAG,KAAK;EAC1B;;AAGF;AACA,MAAM2C,cAAc;AAAA;AAAA,CAAA/E,cAAA,GAAAK,CAAA,QAAG,IAAIsB,sBAAsB,CAACjB,aAAa,EAAEO,UAAU,CAAC;AAAC;AAAAjB,cAAA,GAAAK,CAAA;AAiDpEH,OAAA,CAAA6E,cAAA,GAAAA,cAAA;AA/CT;AAAA;AAAA/E,cAAA,GAAAK,CAAA;AACaH,OAAA,CAAA8E,EAAE,GAAQ;EACrBC,OAAO,EAAGC,GAAW,IAAI;IAAA;IAAAlF,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IACvB,OAAO;MACL8E,GAAG,EAAE,MAAAA,CAAO,GAAGC,MAAa,KAAI;QAAA;QAAApF,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAK,CAAA;QAC9B,OAAO0E,cAAc,CAACX,cAAc,CAAES,IAAI,IAAI;UAAA;UAAA7E,cAAA,GAAA+B,CAAA;UAC5C,MAAMsD,IAAI;UAAA;UAAA,CAAArF,cAAA,GAAAK,CAAA,QAAGwE,IAAI,CAACI,OAAO,CAACC,GAAG,CAAC;UAAC;UAAAlF,cAAA,GAAAK,CAAA;UAC/B,OAAOgF,IAAI,CAACF,GAAG,CAAC,GAAGC,MAAM,CAAC;QAC5B,CAAC,CAAC;MACJ,CAAC;MACDE,GAAG,EAAE,MAAAA,CAAO,GAAGF,MAAa,KAAI;QAAA;QAAApF,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAK,CAAA;QAC9B,OAAO0E,cAAc,CAACX,cAAc,CAAES,IAAI,IAAI;UAAA;UAAA7E,cAAA,GAAA+B,CAAA;UAC5C,MAAMsD,IAAI;UAAA;UAAA,CAAArF,cAAA,GAAAK,CAAA,QAAGwE,IAAI,CAACI,OAAO,CAACC,GAAG,CAAC;UAAC;UAAAlF,cAAA,GAAAK,CAAA;UAC/B,OAAOgF,IAAI,CAACC,GAAG,CAAC,GAAGF,MAAM,CAAC;QAC5B,CAAC,CAAC;MACJ,CAAC;MACDG,GAAG,EAAE,MAAAA,CAAO,GAAGH,MAAa,KAAI;QAAA;QAAApF,cAAA,GAAA+B,CAAA;QAAA/B,cAAA,GAAAK,CAAA;QAC9B,OAAO0E,cAAc,CAACX,cAAc,CAAES,IAAI,IAAI;UAAA;UAAA7E,cAAA,GAAA+B,CAAA;UAC5C,MAAMsD,IAAI;UAAA;UAAA,CAAArF,cAAA,GAAAK,CAAA,QAAGwE,IAAI,CAACI,OAAO,CAACC,GAAG,CAAC;UAAC;UAAAlF,cAAA,GAAAK,CAAA;UAC/B,OAAOgF,IAAI,CAACE,GAAG,CAAC,GAAGH,MAAM,CAAC;QAC5B,CAAC,CAAC;MACJ;KACD;EACH,CAAC;EACDI,IAAI,EAAE,MAAON,GAAW,IAAI;IAAA;IAAAlF,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IAC1B,OAAO0E,cAAc,CAACX,cAAc,CAAES,IAAI,IAAI;MAAA;MAAA7E,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAK,CAAA;MAC5C,IAAI;QAAA;QAAAL,cAAA,GAAAK,CAAA;QACF,OAAOwE,IAAI,CAACW,IAAI,CAACN,GAAG,CAAC;MACvB,CAAC,CAAC,OAAO3B,KAAK,EAAE;QAAA;QAAAvD,cAAA,GAAAK,CAAA;QACd,MAAMkD,KAAK,CAAC,CAAC;MACf;IACF,CAAC,CAAC;EACJ,CAAC;EACDJ,MAAM,EAAE,MAAOA,MAAc,IAAI;IAAA;IAAAnD,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IAC/B,OAAO0E,cAAc,CAACX,cAAc,CAAES,IAAI,IAAK;MAAA;MAAA7E,cAAA,GAAA+B,CAAA;MAAA/B,cAAA,GAAAK,CAAA;MAAA,OAAAwE,IAAI,CAAC1B,MAAM,CAACA,MAAM,CAAC;IAAD,CAAC,CAAC;EACrE,CAAC;EACDwB,KAAK,EAAEA,CAAA,KAAM;IAAA;IAAA3E,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IAAA,OAAA0E,cAAc,CAACJ,KAAK,EAAE;EAAF,CAAE;EACnCc,WAAW,EAAGC,UAA0C,IAAI;IAAA;IAAA1F,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IAC1D,OAAO0E,cAAc,CAACX,cAAc,CAAES,IAAI,IAAI;MAAA;MAAA7E,cAAA,GAAA+B,CAAA;MAC5C,MAAM0D,WAAW;MAAA;MAAA,CAAAzF,cAAA,GAAAK,CAAA,QAAGwE,IAAI,CAACY,WAAW,CAACC,UAAU,CAAC;MAAC;MAAA1F,cAAA,GAAAK,CAAA;MACjD,OAAOoF,WAAW,CAACZ,IAAI,CAAC;IAC1B,CAAC,CAAC;EACJ,CAAC;EACDP,QAAQ,EAAEA,CAAA,KAAM;IAAA;IAAAtE,cAAA,GAAA+B,CAAA;IAAA/B,cAAA,GAAAK,CAAA;IAAA,OAAA0E,cAAc,CAACT,QAAQ,EAAE;EAAF;CACxC;AAKD;AACO,eAAenE,kBAAkBA,CAAA;EAAA;EAAAH,cAAA,GAAA+B,CAAA;EAAA/B,cAAA,GAAAK,CAAA;EACtC0C,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;EAAC;EAAAhD,cAAA,GAAAK,CAAA;EAExC,IAAI;IAAA;IAAAL,cAAA,GAAAK,CAAA;IACF;IACA,MAAMH,OAAA,CAAA8E,EAAE,CAACQ,IAAI,CAAC;;;;;;;;;;KAUb,CAAC;IAEF;IAAA;IAAAxF,cAAA,GAAAK,CAAA;IACA,MAAMH,OAAA,CAAA8E,EAAE,CAACQ,IAAI,CAAC;;;;;;;;;;;KAWb,CAAC;IAEF;IAAA;IAAAxF,cAAA,GAAAK,CAAA;IACA,MAAMH,OAAA,CAAA8E,EAAE,CAACQ,IAAI,CAAC;;;;;;;;;;;;;;KAcb,CAAC;IAEF;IAAA;IAAAxF,cAAA,GAAAK,CAAA;IACA,MAAMH,OAAA,CAAA8E,EAAE,CAACQ,IAAI,CAAC;;;;;;;;;;;;;;;;KAgBb,CAAC;IAEF;IAAA;IAAAxF,cAAA,GAAAK,CAAA;IACA,MAAMH,OAAA,CAAA8E,EAAE,CAACQ,IAAI,CAAC;;;;;;;;;;;KAWb,CAAC;IAEF;IAAA;IAAAxF,cAAA,GAAAK,CAAA;IACA,MAAMH,OAAA,CAAA8E,EAAE,CAACQ,IAAI,CAAC;;;;;;;;;;;KAWb,CAAC;IAEF;IAAA;IAAAxF,cAAA,GAAAK,CAAA;IACA,MAAMH,OAAA,CAAA8E,EAAE,CAACQ,IAAI,CAAC;;;;;;;;;KASb,CAAC;IAAC;IAAAxF,cAAA,GAAAK,CAAA;IAEH0C,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;IAAC;IAAAhD,cAAA,GAAAK,CAAA;IACjD,OAAOH,OAAA,CAAA8E,EAAE;EACX,CAAC,CAAC,OAAOzB,KAAK,EAAE;IAAA;IAAAvD,cAAA,GAAAK,CAAA;IACd0C,OAAO,CAACQ,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAAC;IAAAvD,cAAA,GAAAK,CAAA;IACrD,MAAMkD,KAAK;EACb;AACF;AAEA;AAAA;AAAAvD,cAAA,GAAAK,CAAA;AACAO,OAAO,CAAC+E,EAAE,CAAC,QAAQ,EAAE,MAAK;EAAA;EAAA3F,cAAA,GAAA+B,CAAA;EAAA/B,cAAA,GAAAK,CAAA;EACxB0C,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAAC;EAAAhD,cAAA,GAAAK,CAAA;EAC9CH,OAAA,CAAA8E,EAAE,CAACL,KAAK,EAAE;EAAC;EAAA3E,cAAA,GAAAK,CAAA;EACXO,OAAO,CAACgF,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;AAAC;AAAA5F,cAAA,GAAAK,CAAA;AAEHH,OAAA,CAAAY,OAAA,GAAeZ,OAAA,CAAA8E,EAAE","ignoreList":[]}