53b28fb26f344ed88bd8469dbf45d791
"use strict";

/* istanbul ignore next */
function cov_1m66mluqxt() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/performance.ts";
  var hash = "e8b7f07385e188769b50447c128dc8e5e5cd862e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/performance.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 18
        },
        end: {
          line: 3,
          column: 36
        }
      },
      "2": {
        start: {
          line: 4,
          column: 29
        },
        end: {
          line: 4,
          column: 82
        }
      },
      "3": {
        start: {
          line: 5,
          column: 26
        },
        end: {
          line: 5,
          column: 74
        }
      },
      "4": {
        start: {
          line: 6,
          column: 15
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "5": {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 71
        }
      },
      "6": {
        start: {
          line: 13,
          column: 0
        },
        end: {
          line: 42,
          column: 3
        }
      },
      "7": {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "8": {
        start: {
          line: 15,
          column: 69
        },
        end: {
          line: 20,
          column: 10
        }
      },
      "9": {
        start: {
          line: 21,
          column: 8
        },
        end: {
          line: 34,
          column: 11
        }
      },
      "10": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "11": {
        start: {
          line: 47,
          column: 0
        },
        end: {
          line: 81,
          column: 3
        }
      },
      "12": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "13": {
        start: {
          line: 49,
          column: 31
        },
        end: {
          line: 49,
          column: 41
        }
      },
      "14": {
        start: {
          line: 50,
          column: 22
        },
        end: {
          line: 50,
          column: 54
        }
      },
      "15": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 73,
          column: 9
        }
      },
      "16": {
        start: {
          line: 52,
          column: 28
        },
        end: {
          line: 52,
          column: 97
        }
      },
      "17": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 60,
          column: 15
        }
      },
      "18": {
        start: {
          line: 63,
          column: 32
        },
        end: {
          line: 63,
          column: 88
        }
      },
      "19": {
        start: {
          line: 64,
          column: 31
        },
        end: {
          line: 64,
          column: 86
        }
      },
      "20": {
        start: {
          line: 65,
          column: 12
        },
        end: {
          line: 72,
          column: 15
        }
      },
      "21": {
        start: {
          line: 76,
          column: 8
        },
        end: {
          line: 79,
          column: 11
        }
      },
      "22": {
        start: {
          line: 86,
          column: 0
        },
        end: {
          line: 115,
          column: 3
        }
      },
      "23": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "24": {
        start: {
          line: 88,
          column: 23
        },
        end: {
          line: 88,
          column: 80
        }
      },
      "25": {
        start: {
          line: 89,
          column: 25
        },
        end: {
          line: 89,
          column: 43
        }
      },
      "26": {
        start: {
          line: 90,
          column: 29
        },
        end: {
          line: 90,
          column: 35
        }
      },
      "27": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 93,
          column: 9
        }
      },
      "28": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 81
        }
      },
      "29": {
        start: {
          line: 92,
          column: 52
        },
        end: {
          line: 92,
          column: 79
        }
      },
      "30": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 107,
          column: 11
        }
      },
      "31": {
        start: {
          line: 101,
          column: 49
        },
        end: {
          line: 101,
          column: 74
        }
      },
      "32": {
        start: {
          line: 102,
          column: 45
        },
        end: {
          line: 102,
          column: 66
        }
      },
      "33": {
        start: {
          line: 103,
          column: 47
        },
        end: {
          line: 103,
          column: 70
        }
      },
      "34": {
        start: {
          line: 104,
          column: 44
        },
        end: {
          line: 104,
          column: 64
        }
      },
      "35": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 113,
          column: 11
        }
      },
      "36": {
        start: {
          line: 120,
          column: 0
        },
        end: {
          line: 146,
          column: 3
        }
      },
      "37": {
        start: {
          line: 121,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "38": {
        start: {
          line: 122,
          column: 30
        },
        end: {
          line: 122,
          column: 94
        }
      },
      "39": {
        start: {
          line: 123,
          column: 28
        },
        end: {
          line: 130,
          column: 9
        }
      },
      "40": {
        start: {
          line: 131,
          column: 8
        },
        end: {
          line: 138,
          column: 11
        }
      },
      "41": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 144,
          column: 11
        }
      },
      "42": {
        start: {
          line: 151,
          column: 0
        },
        end: {
          line: 185,
          column: 3
        }
      },
      "43": {
        start: {
          line: 152,
          column: 4
        },
        end: {
          line: 184,
          column: 5
        }
      },
      "44": {
        start: {
          line: 153,
          column: 29
        },
        end: {
          line: 173,
          column: 9
        }
      },
      "45": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 177,
          column: 11
        }
      },
      "46": {
        start: {
          line: 180,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "47": {
        start: {
          line: 190,
          column: 0
        },
        end: {
          line: 224,
          column: 3
        }
      },
      "48": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 223,
          column: 5
        }
      },
      "49": {
        start: {
          line: 193,
          column: 31
        },
        end: {
          line: 194,
          column: 59
        }
      },
      "50": {
        start: {
          line: 195,
          column: 27
        },
        end: {
          line: 196,
          column: 77
        }
      },
      "51": {
        start: {
          line: 198,
          column: 26
        },
        end: {
          line: 212,
          column: 9
        }
      },
      "52": {
        start: {
          line: 208,
          column: 72
        },
        end: {
          line: 208,
          column: 86
        }
      },
      "53": {
        start: {
          line: 209,
          column: 76
        },
        end: {
          line: 209,
          column: 90
        }
      },
      "54": {
        start: {
          line: 210,
          column: 82
        },
        end: {
          line: 210,
          column: 98
        }
      },
      "55": {
        start: {
          line: 213,
          column: 8
        },
        end: {
          line: 216,
          column: 11
        }
      },
      "56": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 222,
          column: 11
        }
      },
      "57": {
        start: {
          line: 229,
          column: 0
        },
        end: {
          line: 295,
          column: 3
        }
      },
      "58": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 294,
          column: 5
        }
      },
      "59": {
        start: {
          line: 231,
          column: 27
        },
        end: {
          line: 231,
          column: 82
        }
      },
      "60": {
        start: {
          line: 232,
          column: 23
        },
        end: {
          line: 232,
          column: 80
        }
      },
      "61": {
        start: {
          line: 234,
          column: 28
        },
        end: {
          line: 234,
          column: 30
        }
      },
      "62": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 243,
          column: 9
        }
      },
      "63": {
        start: {
          line: 237,
          column: 12
        },
        end: {
          line: 242,
          column: 15
        }
      },
      "64": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 252,
          column: 9
        }
      },
      "65": {
        start: {
          line: 246,
          column: 12
        },
        end: {
          line: 251,
          column: 15
        }
      },
      "66": {
        start: {
          line: 254,
          column: 8
        },
        end: {
          line: 261,
          column: 9
        }
      },
      "67": {
        start: {
          line: 255,
          column: 12
        },
        end: {
          line: 260,
          column: 15
        }
      },
      "68": {
        start: {
          line: 263,
          column: 24
        },
        end: {
          line: 264,
          column: 59
        }
      },
      "69": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 274,
          column: 11
        }
      },
      "70": {
        start: {
          line: 266,
          column: 12
        },
        end: {
          line: 273,
          column: 13
        }
      },
      "71": {
        start: {
          line: 267,
          column: 16
        },
        end: {
          line: 272,
          column: 19
        }
      },
      "72": {
        start: {
          line: 275,
          column: 8
        },
        end: {
          line: 287,
          column: 11
        }
      },
      "73": {
        start: {
          line: 281,
          column: 54
        },
        end: {
          line: 281,
          column: 79
        }
      },
      "74": {
        start: {
          line: 282,
          column: 50
        },
        end: {
          line: 282,
          column: 71
        }
      },
      "75": {
        start: {
          line: 283,
          column: 52
        },
        end: {
          line: 283,
          column: 75
        }
      },
      "76": {
        start: {
          line: 285,
          column: 54
        },
        end: {
          line: 285,
          column: 70
        }
      },
      "77": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 293,
          column: 11
        }
      },
      "78": {
        start: {
          line: 300,
          column: 0
        },
        end: {
          line: 405,
          column: 3
        }
      },
      "79": {
        start: {
          line: 301,
          column: 4
        },
        end: {
          line: 404,
          column: 5
        }
      },
      "80": {
        start: {
          line: 302,
          column: 30
        },
        end: {
          line: 302,
          column: 94
        }
      },
      "81": {
        start: {
          line: 303,
          column: 27
        },
        end: {
          line: 303,
          column: 90
        }
      },
      "82": {
        start: {
          line: 304,
          column: 27
        },
        end: {
          line: 304,
          column: 82
        }
      },
      "83": {
        start: {
          line: 305,
          column: 32
        },
        end: {
          line: 305,
          column: 34
        }
      },
      "84": {
        start: {
          line: 307,
          column: 8
        },
        end: {
          line: 320,
          column: 9
        }
      },
      "85": {
        start: {
          line: 308,
          column: 12
        },
        end: {
          line: 319,
          column: 15
        }
      },
      "86": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 335,
          column: 9
        }
      },
      "87": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 334,
          column: 15
        }
      },
      "88": {
        start: {
          line: 337,
          column: 24
        },
        end: {
          line: 338,
          column: 59
        }
      },
      "89": {
        start: {
          line: 339,
          column: 28
        },
        end: {
          line: 339,
          column: 91
        }
      },
      "90": {
        start: {
          line: 339,
          column: 75
        },
        end: {
          line: 339,
          column: 90
        }
      },
      "91": {
        start: {
          line: 340,
          column: 8
        },
        end: {
          line: 354,
          column: 9
        }
      },
      "92": {
        start: {
          line: 341,
          column: 12
        },
        end: {
          line: 353,
          column: 15
        }
      },
      "93": {
        start: {
          line: 356,
          column: 27
        },
        end: {
          line: 356,
          column: 97
        }
      },
      "94": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 370,
          column: 9
        }
      },
      "95": {
        start: {
          line: 358,
          column: 12
        },
        end: {
          line: 369,
          column: 15
        }
      },
      "96": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "97": {
        start: {
          line: 373,
          column: 12
        },
        end: {
          line: 384,
          column: 15
        }
      },
      "98": {
        start: {
          line: 386,
          column: 8
        },
        end: {
          line: 397,
          column: 11
        }
      },
      "99": {
        start: {
          line: 392,
          column: 54
        },
        end: {
          line: 392,
          column: 75
        }
      },
      "100": {
        start: {
          line: 393,
          column: 56
        },
        end: {
          line: 393,
          column: 79
        }
      },
      "101": {
        start: {
          line: 394,
          column: 53
        },
        end: {
          line: 394,
          column: 73
        }
      },
      "102": {
        start: {
          line: 400,
          column: 8
        },
        end: {
          line: 403,
          column: 11
        }
      },
      "103": {
        start: {
          line: 410,
          column: 0
        },
        end: {
          line: 442,
          column: 3
        }
      },
      "104": {
        start: {
          line: 411,
          column: 4
        },
        end: {
          line: 441,
          column: 5
        }
      },
      "105": {
        start: {
          line: 412,
          column: 50
        },
        end: {
          line: 412,
          column: 58
        }
      },
      "106": {
        start: {
          line: 413,
          column: 8
        },
        end: {
          line: 418,
          column: 9
        }
      },
      "107": {
        start: {
          line: 414,
          column: 12
        },
        end: {
          line: 417,
          column: 15
        }
      },
      "108": {
        start: {
          line: 419,
          column: 8
        },
        end: {
          line: 424,
          column: 9
        }
      },
      "109": {
        start: {
          line: 420,
          column: 12
        },
        end: {
          line: 423,
          column: 15
        }
      },
      "110": {
        start: {
          line: 425,
          column: 8
        },
        end: {
          line: 425,
          column: 92
        }
      },
      "111": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 434,
          column: 11
        }
      },
      "112": {
        start: {
          line: 437,
          column: 8
        },
        end: {
          line: 440,
          column: 11
        }
      },
      "113": {
        start: {
          line: 447,
          column: 0
        },
        end: {
          line: 463,
          column: 3
        }
      },
      "114": {
        start: {
          line: 448,
          column: 4
        },
        end: {
          line: 462,
          column: 5
        }
      },
      "115": {
        start: {
          line: 449,
          column: 8
        },
        end: {
          line: 449,
          column: 56
        }
      },
      "116": {
        start: {
          line: 450,
          column: 8
        },
        end: {
          line: 455,
          column: 11
        }
      },
      "117": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 461,
          column: 11
        }
      },
      "118": {
        start: {
          line: 468,
          column: 0
        },
        end: {
          line: 481,
          column: 3
        }
      },
      "119": {
        start: {
          line: 469,
          column: 4
        },
        end: {
          line: 480,
          column: 5
        }
      },
      "120": {
        start: {
          line: 470,
          column: 27
        },
        end: {
          line: 470,
          column: 82
        }
      },
      "121": {
        start: {
          line: 471,
          column: 8
        },
        end: {
          line: 471,
          column: 58
        }
      },
      "122": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 472,
          column: 96
        }
      },
      "123": {
        start: {
          line: 473,
          column: 8
        },
        end: {
          line: 473,
          column: 29
        }
      },
      "124": {
        start: {
          line: 476,
          column: 8
        },
        end: {
          line: 479,
          column: 11
        }
      },
      "125": {
        start: {
          line: 486,
          column: 0
        },
        end: {
          line: 512,
          column: 3
        }
      },
      "126": {
        start: {
          line: 487,
          column: 4
        },
        end: {
          line: 511,
          column: 5
        }
      },
      "127": {
        start: {
          line: 488,
          column: 24
        },
        end: {
          line: 488,
          column: 87
        }
      },
      "128": {
        start: {
          line: 489,
          column: 23
        },
        end: {
          line: 489,
          column: 80
        }
      },
      "129": {
        start: {
          line: 490,
          column: 23
        },
        end: {
          line: 498,
          column: 9
        }
      },
      "130": {
        start: {
          line: 497,
          column: 47
        },
        end: {
          line: 497,
          column: 72
        }
      },
      "131": {
        start: {
          line: 499,
          column: 27
        },
        end: {
          line: 500,
          column: 58
        }
      },
      "132": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 504,
          column: 11
        }
      },
      "133": {
        start: {
          line: 507,
          column: 8
        },
        end: {
          line: 510,
          column: 11
        }
      },
      "134": {
        start: {
          line: 513,
          column: 0
        },
        end: {
          line: 513,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 13,
            column: 25
          }
        },
        loc: {
          start: {
            line: 13,
            column: 44
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 13
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 47,
            column: 36
          },
          end: {
            line: 47,
            column: 37
          }
        },
        loc: {
          start: {
            line: 47,
            column: 50
          },
          end: {
            line: 81,
            column: 1
          }
        },
        line: 47
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 86,
            column: 22
          },
          end: {
            line: 86,
            column: 23
          }
        },
        loc: {
          start: {
            line: 86,
            column: 36
          },
          end: {
            line: 115,
            column: 1
          }
        },
        line: 86
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 92,
            column: 43
          },
          end: {
            line: 92,
            column: 44
          }
        },
        loc: {
          start: {
            line: 92,
            column: 52
          },
          end: {
            line: 92,
            column: 79
          }
        },
        line: 92
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 101,
            column: 44
          },
          end: {
            line: 101,
            column: 45
          }
        },
        loc: {
          start: {
            line: 101,
            column: 49
          },
          end: {
            line: 101,
            column: 74
          }
        },
        line: 101
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 102,
            column: 40
          },
          end: {
            line: 102,
            column: 41
          }
        },
        loc: {
          start: {
            line: 102,
            column: 45
          },
          end: {
            line: 102,
            column: 66
          }
        },
        line: 102
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 103,
            column: 42
          },
          end: {
            line: 103,
            column: 43
          }
        },
        loc: {
          start: {
            line: 103,
            column: 47
          },
          end: {
            line: 103,
            column: 70
          }
        },
        line: 103
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 104,
            column: 39
          },
          end: {
            line: 104,
            column: 40
          }
        },
        loc: {
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 64
          }
        },
        line: 104
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 120,
            column: 22
          },
          end: {
            line: 120,
            column: 23
          }
        },
        loc: {
          start: {
            line: 120,
            column: 42
          },
          end: {
            line: 146,
            column: 1
          }
        },
        line: 120
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 151,
            column: 24
          },
          end: {
            line: 151,
            column: 25
          }
        },
        loc: {
          start: {
            line: 151,
            column: 44
          },
          end: {
            line: 185,
            column: 1
          }
        },
        line: 151
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 190,
            column: 24
          },
          end: {
            line: 190,
            column: 25
          }
        },
        loc: {
          start: {
            line: 190,
            column: 44
          },
          end: {
            line: 224,
            column: 1
          }
        },
        line: 190
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 208,
            column: 57
          },
          end: {
            line: 208,
            column: 58
          }
        },
        loc: {
          start: {
            line: 208,
            column: 72
          },
          end: {
            line: 208,
            column: 86
          }
        },
        line: 208
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 209,
            column: 66
          },
          end: {
            line: 209,
            column: 67
          }
        },
        loc: {
          start: {
            line: 209,
            column: 76
          },
          end: {
            line: 209,
            column: 90
          }
        },
        line: 209
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 210,
            column: 67
          },
          end: {
            line: 210,
            column: 68
          }
        },
        loc: {
          start: {
            line: 210,
            column: 82
          },
          end: {
            line: 210,
            column: 98
          }
        },
        line: 210
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 229,
            column: 27
          },
          end: {
            line: 229,
            column: 28
          }
        },
        loc: {
          start: {
            line: 229,
            column: 47
          },
          end: {
            line: 295,
            column: 1
          }
        },
        line: 229
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 265,
            column: 40
          },
          end: {
            line: 265,
            column: 41
          }
        },
        loc: {
          start: {
            line: 265,
            column: 64
          },
          end: {
            line: 274,
            column: 9
          }
        },
        line: 265
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 281,
            column: 49
          },
          end: {
            line: 281,
            column: 50
          }
        },
        loc: {
          start: {
            line: 281,
            column: 54
          },
          end: {
            line: 281,
            column: 79
          }
        },
        line: 281
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 282,
            column: 45
          },
          end: {
            line: 282,
            column: 46
          }
        },
        loc: {
          start: {
            line: 282,
            column: 50
          },
          end: {
            line: 282,
            column: 71
          }
        },
        line: 282
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 283,
            column: 47
          },
          end: {
            line: 283,
            column: 48
          }
        },
        loc: {
          start: {
            line: 283,
            column: 52
          },
          end: {
            line: 283,
            column: 75
          }
        },
        line: 283
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 285,
            column: 49
          },
          end: {
            line: 285,
            column: 50
          }
        },
        loc: {
          start: {
            line: 285,
            column: 54
          },
          end: {
            line: 285,
            column: 70
          }
        },
        line: 285
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 300,
            column: 31
          },
          end: {
            line: 300,
            column: 32
          }
        },
        loc: {
          start: {
            line: 300,
            column: 51
          },
          end: {
            line: 405,
            column: 1
          }
        },
        line: 300
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 339,
            column: 59
          },
          end: {
            line: 339,
            column: 60
          }
        },
        loc: {
          start: {
            line: 339,
            column: 75
          },
          end: {
            line: 339,
            column: 90
          }
        },
        line: 339
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 392,
            column: 49
          },
          end: {
            line: 392,
            column: 50
          }
        },
        loc: {
          start: {
            line: 392,
            column: 54
          },
          end: {
            line: 392,
            column: 75
          }
        },
        line: 392
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 393,
            column: 51
          },
          end: {
            line: 393,
            column: 52
          }
        },
        loc: {
          start: {
            line: 393,
            column: 56
          },
          end: {
            line: 393,
            column: 79
          }
        },
        line: 393
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 394,
            column: 48
          },
          end: {
            line: 394,
            column: 49
          }
        },
        loc: {
          start: {
            line: 394,
            column: 53
          },
          end: {
            line: 394,
            column: 73
          }
        },
        line: 394
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 410,
            column: 27
          },
          end: {
            line: 410,
            column: 28
          }
        },
        loc: {
          start: {
            line: 410,
            column: 41
          },
          end: {
            line: 442,
            column: 1
          }
        },
        line: 410
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 447,
            column: 22
          },
          end: {
            line: 447,
            column: 23
          }
        },
        loc: {
          start: {
            line: 447,
            column: 36
          },
          end: {
            line: 463,
            column: 1
          }
        },
        line: 447
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 468,
            column: 22
          },
          end: {
            line: 468,
            column: 23
          }
        },
        loc: {
          start: {
            line: 468,
            column: 36
          },
          end: {
            line: 481,
            column: 1
          }
        },
        line: 468
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 486,
            column: 22
          },
          end: {
            line: 486,
            column: 23
          }
        },
        loc: {
          start: {
            line: 486,
            column: 42
          },
          end: {
            line: 512,
            column: 1
          }
        },
        line: 486
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 497,
            column: 42
          },
          end: {
            line: 497,
            column: 43
          }
        },
        loc: {
          start: {
            line: 497,
            column: 47
          },
          end: {
            line: 497,
            column: 72
          }
        },
        line: 497
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 50,
            column: 22
          },
          end: {
            line: 50,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 50,
            column: 22
          },
          end: {
            line: 50,
            column: 47
          }
        }, {
          start: {
            line: 50,
            column: 51
          },
          end: {
            line: 50,
            column: 54
          }
        }],
        line: 50
      },
      "1": {
        loc: {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 73,
            column: 9
          }
        }, {
          start: {
            line: 62,
            column: 13
          },
          end: {
            line: 73,
            column: 9
          }
        }],
        line: 51
      },
      "2": {
        loc: {
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 8
          },
          end: {
            line: 93,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "3": {
        loc: {
          start: {
            line: 154,
            column: 23
          },
          end: {
            line: 154,
            column: 113
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 154,
            column: 66
          },
          end: {
            line: 154,
            column: 108
          }
        }, {
          start: {
            line: 154,
            column: 111
          },
          end: {
            line: 154,
            column: 113
          }
        }],
        line: 154
      },
      "4": {
        loc: {
          start: {
            line: 155,
            column: 24
          },
          end: {
            line: 155,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 56
          },
          end: {
            line: 155,
            column: 87
          }
        }, {
          start: {
            line: 155,
            column: 90
          },
          end: {
            line: 155,
            column: 92
          }
        }],
        line: 155
      },
      "5": {
        loc: {
          start: {
            line: 193,
            column: 31
          },
          end: {
            line: 194,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 194,
            column: 12
          },
          end: {
            line: 194,
            column: 54
          }
        }, {
          start: {
            line: 194,
            column: 57
          },
          end: {
            line: 194,
            column: 59
          }
        }],
        line: 193
      },
      "6": {
        loc: {
          start: {
            line: 195,
            column: 27
          },
          end: {
            line: 196,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 196,
            column: 12
          },
          end: {
            line: 196,
            column: 43
          }
        }, {
          start: {
            line: 196,
            column: 46
          },
          end: {
            line: 196,
            column: 77
          }
        }],
        line: 195
      },
      "7": {
        loc: {
          start: {
            line: 207,
            column: 30
          },
          end: {
            line: 208,
            column: 133
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 208,
            column: 20
          },
          end: {
            line: 208,
            column: 129
          }
        }, {
          start: {
            line: 208,
            column: 132
          },
          end: {
            line: 208,
            column: 133
          }
        }],
        line: 207
      },
      "8": {
        loc: {
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 236,
            column: 8
          },
          end: {
            line: 243,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 236
      },
      "9": {
        loc: {
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 236,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 236,
            column: 12
          },
          end: {
            line: 236,
            column: 32
          }
        }, {
          start: {
            line: 236,
            column: 36
          },
          end: {
            line: 236,
            column: 65
          }
        }],
        line: 236
      },
      "10": {
        loc: {
          start: {
            line: 239,
            column: 26
          },
          end: {
            line: 239,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 58
          },
          end: {
            line: 239,
            column: 68
          }
        }, {
          start: {
            line: 239,
            column: 71
          },
          end: {
            line: 239,
            column: 77
          }
        }],
        line: 239
      },
      "11": {
        loc: {
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 8
          },
          end: {
            line: 252,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "12": {
        loc: {
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 245,
            column: 12
          },
          end: {
            line: 245,
            column: 35
          }
        }, {
          start: {
            line: 245,
            column: 39
          },
          end: {
            line: 245,
            column: 71
          }
        }],
        line: 245
      },
      "13": {
        loc: {
          start: {
            line: 248,
            column: 26
          },
          end: {
            line: 248,
            column: 80
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 248,
            column: 61
          },
          end: {
            line: 248,
            column: 71
          }
        }, {
          start: {
            line: 248,
            column: 74
          },
          end: {
            line: 248,
            column: 80
          }
        }],
        line: 248
      },
      "14": {
        loc: {
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 254,
            column: 8
          },
          end: {
            line: 261,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 254
      },
      "15": {
        loc: {
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 254,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 254,
            column: 12
          },
          end: {
            line: 254,
            column: 40
          }
        }, {
          start: {
            line: 254,
            column: 44
          },
          end: {
            line: 254,
            column: 83
          }
        }],
        line: 254
      },
      "16": {
        loc: {
          start: {
            line: 257,
            column: 26
          },
          end: {
            line: 257,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 257,
            column: 68
          },
          end: {
            line: 257,
            column: 78
          }
        }, {
          start: {
            line: 257,
            column: 81
          },
          end: {
            line: 257,
            column: 87
          }
        }],
        line: 257
      },
      "17": {
        loc: {
          start: {
            line: 263,
            column: 24
          },
          end: {
            line: 264,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 264,
            column: 12
          },
          end: {
            line: 264,
            column: 54
          }
        }, {
          start: {
            line: 264,
            column: 57
          },
          end: {
            line: 264,
            column: 59
          }
        }],
        line: 263
      },
      "18": {
        loc: {
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 273,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 12
          },
          end: {
            line: 273,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "19": {
        loc: {
          start: {
            line: 269,
            column: 30
          },
          end: {
            line: 269,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 48
          },
          end: {
            line: 269,
            column: 58
          }
        }, {
          start: {
            line: 269,
            column: 61
          },
          end: {
            line: 269,
            column: 96
          }
        }],
        line: 269
      },
      "20": {
        loc: {
          start: {
            line: 269,
            column: 61
          },
          end: {
            line: 269,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 79
          },
          end: {
            line: 269,
            column: 85
          }
        }, {
          start: {
            line: 269,
            column: 88
          },
          end: {
            line: 269,
            column: 96
          }
        }],
        line: 269
      },
      "21": {
        loc: {
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 307,
            column: 8
          },
          end: {
            line: 320,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 307
      },
      "22": {
        loc: {
          start: {
            line: 310,
            column: 26
          },
          end: {
            line: 310,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 310,
            column: 57
          },
          end: {
            line: 310,
            column: 63
          }
        }, {
          start: {
            line: 310,
            column: 66
          },
          end: {
            line: 310,
            column: 74
          }
        }],
        line: 310
      },
      "23": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 335,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "24": {
        loc: {
          start: {
            line: 325,
            column: 26
          },
          end: {
            line: 325,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 325,
            column: 66
          },
          end: {
            line: 325,
            column: 72
          }
        }, {
          start: {
            line: 325,
            column: 75
          },
          end: {
            line: 325,
            column: 83
          }
        }],
        line: 325
      },
      "25": {
        loc: {
          start: {
            line: 337,
            column: 24
          },
          end: {
            line: 338,
            column: 59
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 338,
            column: 12
          },
          end: {
            line: 338,
            column: 54
          }
        }, {
          start: {
            line: 338,
            column: 57
          },
          end: {
            line: 338,
            column: 59
          }
        }],
        line: 337
      },
      "26": {
        loc: {
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 340,
            column: 8
          },
          end: {
            line: 354,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 340
      },
      "27": {
        loc: {
          start: {
            line: 356,
            column: 27
          },
          end: {
            line: 356,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 356,
            column: 59
          },
          end: {
            line: 356,
            column: 90
          }
        }, {
          start: {
            line: 356,
            column: 93
          },
          end: {
            line: 356,
            column: 97
          }
        }],
        line: 356
      },
      "28": {
        loc: {
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 357,
            column: 8
          },
          end: {
            line: 370,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 357
      },
      "29": {
        loc: {
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 357,
            column: 49
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 357,
            column: 12
          },
          end: {
            line: 357,
            column: 22
          }
        }, {
          start: {
            line: 357,
            column: 26
          },
          end: {
            line: 357,
            column: 49
          }
        }],
        line: 357
      },
      "30": {
        loc: {
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 372,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 372
      },
      "31": {
        loc: {
          start: {
            line: 375,
            column: 26
          },
          end: {
            line: 375,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 375,
            column: 66
          },
          end: {
            line: 375,
            column: 72
          }
        }, {
          start: {
            line: 375,
            column: 75
          },
          end: {
            line: 375,
            column: 83
          }
        }],
        line: 375
      },
      "32": {
        loc: {
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 8
          },
          end: {
            line: 418,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "33": {
        loc: {
          start: {
            line: 413,
            column: 12
          },
          end: {
            line: 413,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 413,
            column: 12
          },
          end: {
            line: 413,
            column: 23
          }
        }, {
          start: {
            line: 413,
            column: 27
          },
          end: {
            line: 413,
            column: 54
          }
        }, {
          start: {
            line: 413,
            column: 58
          },
          end: {
            line: 413,
            column: 86
          }
        }],
        line: 413
      },
      "34": {
        loc: {
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 8
          },
          end: {
            line: 424,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "35": {
        loc: {
          start: {
            line: 499,
            column: 27
          },
          end: {
            line: 500,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 499,
            column: 65
          },
          end: {
            line: 499,
            column: 68
          }
        }, {
          start: {
            line: 500,
            column: 12
          },
          end: {
            line: 500,
            column: 58
          }
        }],
        line: 499
      },
      "36": {
        loc: {
          start: {
            line: 500,
            column: 12
          },
          end: {
            line: 500,
            column: 58
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 500,
            column: 49
          },
          end: {
            line: 500,
            column: 52
          }
        }, {
          start: {
            line: 500,
            column: 55
          },
          end: {
            line: 500,
            column: 58
          }
        }],
        line: 500
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/performance.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/performance.ts"],
      sourcesContent: ["import { Router } from 'express';\nimport { performanceMonitor } from '../services/performance/PerformanceMonitor';\nimport { AnalyticsEngine } from '../services/analytics/AnalyticsEngine';\nimport { ReportGenerator } from '../services/reports/generators/ReportGenerator';\nimport { OptimizationEngine } from '../services/optimization/OptimizationEngine';\nimport { TestQueueManager } from '../services/testing/TestQueueManager';\nimport { ProgressService } from '../services/websocket/ProgressService';\n\nconst router = Router();\n\n// Initialize services for performance monitoring\nconst analyticsEngine = AnalyticsEngine.getInstance();\n\n/**\n * GET /performance/overview\n * Get overall performance overview\n */\nrouter.get('/overview', async (req, res) => {\n  try {\n    const [\n      systemMetrics,\n      applicationMetrics,\n      summary,\n      alerts\n    ] = await Promise.all([\n      performanceMonitor.getSystemMetrics(),\n      performanceMonitor.getApplicationMetrics(),\n      performanceMonitor.getPerformanceSummary(),\n      performanceMonitor.getActiveAlerts()\n    ]);\n\n    res.json({\n      success: true,\n      data: {\n        timestamp: new Date().toISOString(),\n        systemMetrics,\n        applicationMetrics,\n        summary,\n        alerts,\n        uptime: process.uptime(),\n        version: process.version,\n        platform: process.platform,\n        arch: process.arch\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/metrics\n * Get performance metrics for a specific metric name\n */\nrouter.get('/metrics/:metricName?', (req, res) => {\n  try {\n    const { metricName } = req.params;\n    const limit = parseInt(req.query.limit as string) || 100;\n\n    if (metricName) {\n      const metrics = performanceMonitor.getMetrics(metricName, limit);\n      res.json({\n        success: true,\n        data: {\n          metricName,\n          metrics,\n          count: metrics.length\n        }\n      });\n    } else {\n      const metricNames = performanceMonitor.getMetricNames();\n      const statistics = performanceMonitor.getStatistics();\n      \n      res.json({\n        success: true,\n        data: {\n          metricNames,\n          statistics,\n          totalMetrics: metricNames.length\n        }\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/alerts\n * Get active performance alerts\n */\nrouter.get('/alerts', (req, res) => {\n  try {\n    const alerts = performanceMonitor.getActiveAlerts();\n    const severity = req.query.severity as string;\n    \n    let filteredAlerts = alerts;\n    if (severity) {\n      filteredAlerts = alerts.filter(alert => alert.severity === severity);\n    }\n\n    res.json({\n      success: true,\n      data: {\n        alerts: filteredAlerts,\n        total: alerts.length,\n        filtered: filteredAlerts.length,\n        severityBreakdown: {\n          critical: alerts.filter(a => a.severity === 'critical').length,\n          high: alerts.filter(a => a.severity === 'high').length,\n          medium: alerts.filter(a => a.severity === 'medium').length,\n          low: alerts.filter(a => a.severity === 'low').length\n        }\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/system\n * Get detailed system performance metrics\n */\nrouter.get('/system', async (req, res) => {\n  try {\n    const systemMetrics = await performanceMonitor.getSystemMetrics();\n    const nodeMetrics = {\n      memory: process.memoryUsage(),\n      cpu: process.cpuUsage(),\n      uptime: process.uptime(),\n      pid: process.pid,\n      version: process.version,\n      versions: process.versions\n    };\n\n    res.json({\n      success: true,\n      data: {\n        system: systemMetrics,\n        node: nodeMetrics,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/services\n * Get performance statistics for all services\n */\nrouter.get('/services', async (req, res) => {\n  try {\n    const serviceStats = {\n      analytics: analyticsEngine.getQueryPerformanceStats ? analyticsEngine.getQueryPerformanceStats() : {},\n      cacheStats: analyticsEngine.getCacheStats ? analyticsEngine.getCacheStats() : {},\n      optimization: {\n        // Would get from optimization engine if available\n        cacheHitRate: 0,\n        avgProcessingTime: 0\n      },\n      testing: {\n        // Would get from test queue manager if available\n        queueSize: 0,\n        activeJobs: 0,\n        avgExecutionTime: 0\n      },\n      websocket: {\n        // Would get from progress service if available\n        activeConnections: 0,\n        messagesSent: 0,\n        avgLatency: 0\n      }\n    };\n\n    res.json({\n      success: true,\n      data: serviceStats\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/database\n * Get database performance metrics\n */\nrouter.get('/database', async (req, res) => {\n  try {\n    // Get analytics engine performance stats\n    const analyticsStats = analyticsEngine.getQueryPerformanceStats ? \n      analyticsEngine.getQueryPerformanceStats() : {};\n    \n    const cacheStats = analyticsEngine.getCacheStats ? \n      analyticsEngine.getCacheStats() : { size: 0, max: 0, hitRate: 0 };\n\n    // Calculate database performance metrics\n    const dbMetrics = {\n      queryStats: analyticsStats,\n      cacheStats,\n      connections: {\n        active: 1, // SQLite is single connection\n        idle: 0,\n        total: 1\n      },\n      performance: {\n        avgQueryTime: Object.values(analyticsStats).length > 0 ? \n          Object.values(analyticsStats).reduce((sum: number, stat: any) => sum + stat.avg, 0) / Object.values(analyticsStats).length : 0,\n        slowQueries: Object.values(analyticsStats).filter((stat: any) => stat.avg > 100).length,\n        totalQueries: Object.values(analyticsStats).reduce((sum: number, stat: any) => sum + stat.count, 0)\n      }\n    };\n\n    res.json({\n      success: true,\n      data: dbMetrics\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/bottlenecks\n * Identify performance bottlenecks\n */\nrouter.get('/bottlenecks', async (req, res) => {\n  try {\n    const statistics = performanceMonitor.getStatistics();\n    const alerts = performanceMonitor.getActiveAlerts();\n    \n    // Identify bottlenecks based on performance data\n    const bottlenecks = [];\n    \n    // CPU bottlenecks\n    if (statistics.cpu_usage && statistics.cpu_usage.avg > 80) {\n      bottlenecks.push({\n        type: 'cpu',\n        severity: statistics.cpu_usage.avg > 90 ? 'critical' : 'high',\n        description: `High CPU usage: ${statistics.cpu_usage.avg.toFixed(1)}%`,\n        recommendation: 'Consider optimizing CPU-intensive operations or scaling horizontally'\n      });\n    }\n    \n    // Memory bottlenecks\n    if (statistics.memory_usage && statistics.memory_usage.avg > 85) {\n      bottlenecks.push({\n        type: 'memory',\n        severity: statistics.memory_usage.avg > 95 ? 'critical' : 'high',\n        description: `High memory usage: ${statistics.memory_usage.avg.toFixed(1)}%`,\n        recommendation: 'Consider optimizing memory usage or increasing available memory'\n      });\n    }\n    \n    // Response time bottlenecks\n    if (statistics.app_response_time && statistics.app_response_time.avg > 2000) {\n      bottlenecks.push({\n        type: 'response_time',\n        severity: statistics.app_response_time.avg > 5000 ? 'critical' : 'high',\n        description: `Slow response time: ${statistics.app_response_time.avg.toFixed(0)}ms`,\n        recommendation: 'Optimize database queries, enable caching, or improve algorithm efficiency'\n      });\n    }\n    \n    // Database query bottlenecks\n    const dbStats = analyticsEngine.getQueryPerformanceStats ? \n      analyticsEngine.getQueryPerformanceStats() : {};\n    \n    Object.entries(dbStats).forEach(([queryName, stats]: [string, any]) => {\n      if (stats.avg > 100) {\n        bottlenecks.push({\n          type: 'database',\n          severity: stats.avg > 500 ? 'critical' : stats.avg > 200 ? 'high' : 'medium',\n          description: `Slow query: ${queryName} (${stats.avg.toFixed(1)}ms avg)`,\n          recommendation: 'Add database indexes, optimize query structure, or implement query result caching'\n        });\n      }\n    });\n\n    res.json({\n      success: true,\n      data: {\n        bottlenecks,\n        totalBottlenecks: bottlenecks.length,\n        severityBreakdown: {\n          critical: bottlenecks.filter(b => b.severity === 'critical').length,\n          high: bottlenecks.filter(b => b.severity === 'high').length,\n          medium: bottlenecks.filter(b => b.severity === 'medium').length\n        },\n        recommendations: bottlenecks.map(b => b.recommendation)\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/recommendations\n * Get performance optimization recommendations\n */\nrouter.get('/recommendations', async (req, res) => {\n  try {\n    const systemMetrics = await performanceMonitor.getSystemMetrics();\n    const appMetrics = performanceMonitor.getApplicationMetrics();\n    const statistics = performanceMonitor.getStatistics();\n    \n    const recommendations = [];\n    \n    // CPU optimization recommendations\n    if (systemMetrics.cpu.usage > 70) {\n      recommendations.push({\n        category: 'cpu',\n        priority: systemMetrics.cpu.usage > 90 ? 'high' : 'medium',\n        title: 'Optimize CPU Usage',\n        description: 'High CPU usage detected. Consider implementing the following optimizations:',\n        actions: [\n          'Enable CPU-intensive task queuing',\n          'Implement worker threads for parallel processing',\n          'Optimize algorithm complexity',\n          'Consider horizontal scaling'\n        ]\n      });\n    }\n    \n    // Memory optimization recommendations\n    if (systemMetrics.memory.utilization > 80) {\n      recommendations.push({\n        category: 'memory',\n        priority: systemMetrics.memory.utilization > 95 ? 'high' : 'medium',\n        title: 'Optimize Memory Usage',\n        description: 'High memory utilization detected. Consider implementing the following optimizations:',\n        actions: [\n          'Implement memory-efficient data structures',\n          'Add result caching with TTL',\n          'Optimize object pooling',\n          'Review memory leaks'\n        ]\n      });\n    }\n    \n    // Database optimization recommendations\n    const dbStats = analyticsEngine.getQueryPerformanceStats ? \n      analyticsEngine.getQueryPerformanceStats() : {};\n    \n    const slowQueries = Object.entries(dbStats).filter(([_, stats]: [string, any]) => stats.avg > 100);\n    \n    if (slowQueries.length > 0) {\n      recommendations.push({\n        category: 'database',\n        priority: 'high',\n        title: 'Optimize Database Performance',\n        description: `${slowQueries.length} slow queries detected. Consider implementing the following optimizations:`,\n        actions: [\n          'Add indexes for frequently queried columns',\n          'Implement query result caching',\n          'Optimize database schema',\n          'Use prepared statements',\n          'Consider database connection pooling'\n        ]\n      });\n    }\n    \n    // Cache optimization recommendations\n    const cacheStats = analyticsEngine.getCacheStats ? analyticsEngine.getCacheStats() : null;\n    \n    if (cacheStats && cacheStats.hitRate < 70) {\n      recommendations.push({\n        category: 'cache',\n        priority: 'medium',\n        title: 'Improve Cache Performance',\n        description: `Cache hit rate is ${cacheStats.hitRate?.toFixed(1)}%. Consider implementing the following optimizations:`,\n        actions: [\n          'Increase cache size limits',\n          'Optimize cache TTL values',\n          'Implement cache warming',\n          'Add cache prefetching for predictable queries'\n        ]\n      });\n    }\n    \n    // Response time optimization recommendations\n    if (appMetrics.averageResponseTime > 1000) {\n      recommendations.push({\n        category: 'response_time',\n        priority: appMetrics.averageResponseTime > 3000 ? 'high' : 'medium',\n        title: 'Optimize Response Time',\n        description: `Average response time is ${appMetrics.averageResponseTime.toFixed(0)}ms. Consider implementing the following optimizations:`,\n        actions: [\n          'Implement result caching',\n          'Optimize critical path algorithms',\n          'Add async processing for non-critical operations',\n          'Consider CDN for static assets'\n        ]\n      });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        recommendations,\n        totalRecommendations: recommendations.length,\n        priorityBreakdown: {\n          high: recommendations.filter(r => r.priority === 'high').length,\n          medium: recommendations.filter(r => r.priority === 'medium').length,\n          low: recommendations.filter(r => r.priority === 'low').length\n        }\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /performance/thresholds\n * Set custom performance thresholds\n */\nrouter.post('/thresholds', (req, res) => {\n  try {\n    const { metricName, warning, critical } = req.body;\n    \n    if (!metricName || typeof warning !== 'number' || typeof critical !== 'number') {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid request body. Required: metricName, warning, critical'\n      });\n    }\n    \n    if (critical <= warning) {\n      return res.status(400).json({\n        success: false,\n        error: 'Critical threshold must be greater than warning threshold'\n      });\n    }\n    \n    performanceMonitor.setThreshold(metricName, warning, critical);\n    \n    res.json({\n      success: true,\n      data: {\n        metricName,\n        warning,\n        critical,\n        message: 'Threshold updated successfully'\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /performance/clear\n * Clear performance metrics and alerts\n */\nrouter.post('/clear', (req, res) => {\n  try {\n    performanceMonitor.clear();\n    \n    res.json({\n      success: true,\n      data: {\n        message: 'Performance metrics and alerts cleared successfully'\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/export\n * Export performance data\n */\nrouter.get('/export', (req, res) => {\n  try {\n    const exportData = performanceMonitor.exportMetrics();\n    \n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Content-Disposition', 'attachment; filename=\"performance-metrics.json\"');\n    res.send(exportData);\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/health\n * Quick health check endpoint\n */\nrouter.get('/health', async (req, res) => {\n  try {\n    const summary = performanceMonitor.getPerformanceSummary();\n    const alerts = performanceMonitor.getActiveAlerts();\n    \n    const health = {\n      status: summary.systemHealth,\n      uptime: summary.uptime,\n      timestamp: new Date().toISOString(),\n      version: process.version,\n      memory: process.memoryUsage(),\n      activeAlerts: alerts.length,\n      criticalAlerts: alerts.filter(a => a.severity === 'critical').length\n    };\n    \n    const statusCode = summary.systemHealth === 'critical' ? 503 : \n                      summary.systemHealth === 'warning' ? 200 : 200;\n    \n    res.status(statusCode).json({\n      success: true,\n      data: health\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nexport default router;"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e8b7f07385e188769b50447c128dc8e5e5cd862e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1m66mluqxt = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1m66mluqxt();
cov_1m66mluqxt().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
const express_1 =
/* istanbul ignore next */
(cov_1m66mluqxt().s[1]++, require("express"));
const PerformanceMonitor_1 =
/* istanbul ignore next */
(cov_1m66mluqxt().s[2]++, require("../services/performance/PerformanceMonitor"));
const AnalyticsEngine_1 =
/* istanbul ignore next */
(cov_1m66mluqxt().s[3]++, require("../services/analytics/AnalyticsEngine"));
const router =
/* istanbul ignore next */
(cov_1m66mluqxt().s[4]++, (0, express_1.Router)());
// Initialize services for performance monitoring
const analyticsEngine =
/* istanbul ignore next */
(cov_1m66mluqxt().s[5]++, AnalyticsEngine_1.AnalyticsEngine.getInstance());
/**
 * GET /performance/overview
 * Get overall performance overview
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[6]++;
router.get('/overview', async (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[0]++;
  cov_1m66mluqxt().s[7]++;
  try {
    const [systemMetrics, applicationMetrics, summary, alerts] =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[8]++, await Promise.all([PerformanceMonitor_1.performanceMonitor.getSystemMetrics(), PerformanceMonitor_1.performanceMonitor.getApplicationMetrics(), PerformanceMonitor_1.performanceMonitor.getPerformanceSummary(), PerformanceMonitor_1.performanceMonitor.getActiveAlerts()]));
    /* istanbul ignore next */
    cov_1m66mluqxt().s[9]++;
    res.json({
      success: true,
      data: {
        timestamp: new Date().toISOString(),
        systemMetrics,
        applicationMetrics,
        summary,
        alerts,
        uptime: process.uptime(),
        version: process.version,
        platform: process.platform,
        arch: process.arch
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[10]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /performance/metrics
 * Get performance metrics for a specific metric name
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[11]++;
router.get('/metrics/:metricName?', (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[1]++;
  cov_1m66mluqxt().s[12]++;
  try {
    const {
      metricName
    } =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[13]++, req.params);
    const limit =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[14]++,
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[0][0]++, parseInt(req.query.limit)) ||
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[0][1]++, 100));
    /* istanbul ignore next */
    cov_1m66mluqxt().s[15]++;
    if (metricName) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[1][0]++;
      const metrics =
      /* istanbul ignore next */
      (cov_1m66mluqxt().s[16]++, PerformanceMonitor_1.performanceMonitor.getMetrics(metricName, limit));
      /* istanbul ignore next */
      cov_1m66mluqxt().s[17]++;
      res.json({
        success: true,
        data: {
          metricName,
          metrics,
          count: metrics.length
        }
      });
    } else {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[1][1]++;
      const metricNames =
      /* istanbul ignore next */
      (cov_1m66mluqxt().s[18]++, PerformanceMonitor_1.performanceMonitor.getMetricNames());
      const statistics =
      /* istanbul ignore next */
      (cov_1m66mluqxt().s[19]++, PerformanceMonitor_1.performanceMonitor.getStatistics());
      /* istanbul ignore next */
      cov_1m66mluqxt().s[20]++;
      res.json({
        success: true,
        data: {
          metricNames,
          statistics,
          totalMetrics: metricNames.length
        }
      });
    }
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[21]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /performance/alerts
 * Get active performance alerts
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[22]++;
router.get('/alerts', (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[2]++;
  cov_1m66mluqxt().s[23]++;
  try {
    const alerts =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[24]++, PerformanceMonitor_1.performanceMonitor.getActiveAlerts());
    const severity =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[25]++, req.query.severity);
    let filteredAlerts =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[26]++, alerts);
    /* istanbul ignore next */
    cov_1m66mluqxt().s[27]++;
    if (severity) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[2][0]++;
      cov_1m66mluqxt().s[28]++;
      filteredAlerts = alerts.filter(alert => {
        /* istanbul ignore next */
        cov_1m66mluqxt().f[3]++;
        cov_1m66mluqxt().s[29]++;
        return alert.severity === severity;
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[2][1]++;
    }
    cov_1m66mluqxt().s[30]++;
    res.json({
      success: true,
      data: {
        alerts: filteredAlerts,
        total: alerts.length,
        filtered: filteredAlerts.length,
        severityBreakdown: {
          critical: alerts.filter(a => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[4]++;
            cov_1m66mluqxt().s[31]++;
            return a.severity === 'critical';
          }).length,
          high: alerts.filter(a => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[5]++;
            cov_1m66mluqxt().s[32]++;
            return a.severity === 'high';
          }).length,
          medium: alerts.filter(a => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[6]++;
            cov_1m66mluqxt().s[33]++;
            return a.severity === 'medium';
          }).length,
          low: alerts.filter(a => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[7]++;
            cov_1m66mluqxt().s[34]++;
            return a.severity === 'low';
          }).length
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[35]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /performance/system
 * Get detailed system performance metrics
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[36]++;
router.get('/system', async (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[8]++;
  cov_1m66mluqxt().s[37]++;
  try {
    const systemMetrics =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[38]++, await PerformanceMonitor_1.performanceMonitor.getSystemMetrics());
    const nodeMetrics =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[39]++, {
      memory: process.memoryUsage(),
      cpu: process.cpuUsage(),
      uptime: process.uptime(),
      pid: process.pid,
      version: process.version,
      versions: process.versions
    });
    /* istanbul ignore next */
    cov_1m66mluqxt().s[40]++;
    res.json({
      success: true,
      data: {
        system: systemMetrics,
        node: nodeMetrics,
        timestamp: new Date().toISOString()
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[41]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /performance/services
 * Get performance statistics for all services
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[42]++;
router.get('/services', async (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[9]++;
  cov_1m66mluqxt().s[43]++;
  try {
    const serviceStats =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[44]++, {
      analytics: analyticsEngine.getQueryPerformanceStats ?
      /* istanbul ignore next */
      (cov_1m66mluqxt().b[3][0]++, analyticsEngine.getQueryPerformanceStats()) :
      /* istanbul ignore next */
      (cov_1m66mluqxt().b[3][1]++, {}),
      cacheStats: analyticsEngine.getCacheStats ?
      /* istanbul ignore next */
      (cov_1m66mluqxt().b[4][0]++, analyticsEngine.getCacheStats()) :
      /* istanbul ignore next */
      (cov_1m66mluqxt().b[4][1]++, {}),
      optimization: {
        // Would get from optimization engine if available
        cacheHitRate: 0,
        avgProcessingTime: 0
      },
      testing: {
        // Would get from test queue manager if available
        queueSize: 0,
        activeJobs: 0,
        avgExecutionTime: 0
      },
      websocket: {
        // Would get from progress service if available
        activeConnections: 0,
        messagesSent: 0,
        avgLatency: 0
      }
    });
    /* istanbul ignore next */
    cov_1m66mluqxt().s[45]++;
    res.json({
      success: true,
      data: serviceStats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[46]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /performance/database
 * Get database performance metrics
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[47]++;
router.get('/database', async (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[10]++;
  cov_1m66mluqxt().s[48]++;
  try {
    // Get analytics engine performance stats
    const analyticsStats =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[49]++, analyticsEngine.getQueryPerformanceStats ?
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[5][0]++, analyticsEngine.getQueryPerformanceStats()) :
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[5][1]++, {}));
    const cacheStats =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[50]++, analyticsEngine.getCacheStats ?
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[6][0]++, analyticsEngine.getCacheStats()) :
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[6][1]++, {
      size: 0,
      max: 0,
      hitRate: 0
    }));
    // Calculate database performance metrics
    const dbMetrics =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[51]++, {
      queryStats: analyticsStats,
      cacheStats,
      connections: {
        active: 1,
        // SQLite is single connection
        idle: 0,
        total: 1
      },
      performance: {
        avgQueryTime: Object.values(analyticsStats).length > 0 ?
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[7][0]++, Object.values(analyticsStats).reduce((sum, stat) => {
          /* istanbul ignore next */
          cov_1m66mluqxt().f[11]++;
          cov_1m66mluqxt().s[52]++;
          return sum + stat.avg;
        }, 0) / Object.values(analyticsStats).length) :
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[7][1]++, 0),
        slowQueries: Object.values(analyticsStats).filter(stat => {
          /* istanbul ignore next */
          cov_1m66mluqxt().f[12]++;
          cov_1m66mluqxt().s[53]++;
          return stat.avg > 100;
        }).length,
        totalQueries: Object.values(analyticsStats).reduce((sum, stat) => {
          /* istanbul ignore next */
          cov_1m66mluqxt().f[13]++;
          cov_1m66mluqxt().s[54]++;
          return sum + stat.count;
        }, 0)
      }
    });
    /* istanbul ignore next */
    cov_1m66mluqxt().s[55]++;
    res.json({
      success: true,
      data: dbMetrics
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[56]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /performance/bottlenecks
 * Identify performance bottlenecks
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[57]++;
router.get('/bottlenecks', async (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[14]++;
  cov_1m66mluqxt().s[58]++;
  try {
    const statistics =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[59]++, PerformanceMonitor_1.performanceMonitor.getStatistics());
    const alerts =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[60]++, PerformanceMonitor_1.performanceMonitor.getActiveAlerts());
    // Identify bottlenecks based on performance data
    const bottlenecks =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[61]++, []);
    // CPU bottlenecks
    /* istanbul ignore next */
    cov_1m66mluqxt().s[62]++;
    if (
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[9][0]++, statistics.cpu_usage) &&
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[9][1]++, statistics.cpu_usage.avg > 80)) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[8][0]++;
      cov_1m66mluqxt().s[63]++;
      bottlenecks.push({
        type: 'cpu',
        severity: statistics.cpu_usage.avg > 90 ?
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[10][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[10][1]++, 'high'),
        description: `High CPU usage: ${statistics.cpu_usage.avg.toFixed(1)}%`,
        recommendation: 'Consider optimizing CPU-intensive operations or scaling horizontally'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[8][1]++;
    }
    // Memory bottlenecks
    cov_1m66mluqxt().s[64]++;
    if (
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[12][0]++, statistics.memory_usage) &&
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[12][1]++, statistics.memory_usage.avg > 85)) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[11][0]++;
      cov_1m66mluqxt().s[65]++;
      bottlenecks.push({
        type: 'memory',
        severity: statistics.memory_usage.avg > 95 ?
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[13][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[13][1]++, 'high'),
        description: `High memory usage: ${statistics.memory_usage.avg.toFixed(1)}%`,
        recommendation: 'Consider optimizing memory usage or increasing available memory'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[11][1]++;
    }
    // Response time bottlenecks
    cov_1m66mluqxt().s[66]++;
    if (
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[15][0]++, statistics.app_response_time) &&
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[15][1]++, statistics.app_response_time.avg > 2000)) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[14][0]++;
      cov_1m66mluqxt().s[67]++;
      bottlenecks.push({
        type: 'response_time',
        severity: statistics.app_response_time.avg > 5000 ?
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[16][0]++, 'critical') :
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[16][1]++, 'high'),
        description: `Slow response time: ${statistics.app_response_time.avg.toFixed(0)}ms`,
        recommendation: 'Optimize database queries, enable caching, or improve algorithm efficiency'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[14][1]++;
    }
    // Database query bottlenecks
    const dbStats =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[68]++, analyticsEngine.getQueryPerformanceStats ?
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[17][0]++, analyticsEngine.getQueryPerformanceStats()) :
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[17][1]++, {}));
    /* istanbul ignore next */
    cov_1m66mluqxt().s[69]++;
    Object.entries(dbStats).forEach(([queryName, stats]) => {
      /* istanbul ignore next */
      cov_1m66mluqxt().f[15]++;
      cov_1m66mluqxt().s[70]++;
      if (stats.avg > 100) {
        /* istanbul ignore next */
        cov_1m66mluqxt().b[18][0]++;
        cov_1m66mluqxt().s[71]++;
        bottlenecks.push({
          type: 'database',
          severity: stats.avg > 500 ?
          /* istanbul ignore next */
          (cov_1m66mluqxt().b[19][0]++, 'critical') :
          /* istanbul ignore next */
          (cov_1m66mluqxt().b[19][1]++, stats.avg > 200 ?
          /* istanbul ignore next */
          (cov_1m66mluqxt().b[20][0]++, 'high') :
          /* istanbul ignore next */
          (cov_1m66mluqxt().b[20][1]++, 'medium')),
          description: `Slow query: ${queryName} (${stats.avg.toFixed(1)}ms avg)`,
          recommendation: 'Add database indexes, optimize query structure, or implement query result caching'
        });
      } else
      /* istanbul ignore next */
      {
        cov_1m66mluqxt().b[18][1]++;
      }
    });
    /* istanbul ignore next */
    cov_1m66mluqxt().s[72]++;
    res.json({
      success: true,
      data: {
        bottlenecks,
        totalBottlenecks: bottlenecks.length,
        severityBreakdown: {
          critical: bottlenecks.filter(b => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[16]++;
            cov_1m66mluqxt().s[73]++;
            return b.severity === 'critical';
          }).length,
          high: bottlenecks.filter(b => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[17]++;
            cov_1m66mluqxt().s[74]++;
            return b.severity === 'high';
          }).length,
          medium: bottlenecks.filter(b => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[18]++;
            cov_1m66mluqxt().s[75]++;
            return b.severity === 'medium';
          }).length
        },
        recommendations: bottlenecks.map(b => {
          /* istanbul ignore next */
          cov_1m66mluqxt().f[19]++;
          cov_1m66mluqxt().s[76]++;
          return b.recommendation;
        })
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[77]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /performance/recommendations
 * Get performance optimization recommendations
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[78]++;
router.get('/recommendations', async (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[20]++;
  cov_1m66mluqxt().s[79]++;
  try {
    const systemMetrics =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[80]++, await PerformanceMonitor_1.performanceMonitor.getSystemMetrics());
    const appMetrics =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[81]++, PerformanceMonitor_1.performanceMonitor.getApplicationMetrics());
    const statistics =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[82]++, PerformanceMonitor_1.performanceMonitor.getStatistics());
    const recommendations =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[83]++, []);
    // CPU optimization recommendations
    /* istanbul ignore next */
    cov_1m66mluqxt().s[84]++;
    if (systemMetrics.cpu.usage > 70) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[21][0]++;
      cov_1m66mluqxt().s[85]++;
      recommendations.push({
        category: 'cpu',
        priority: systemMetrics.cpu.usage > 90 ?
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[22][0]++, 'high') :
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[22][1]++, 'medium'),
        title: 'Optimize CPU Usage',
        description: 'High CPU usage detected. Consider implementing the following optimizations:',
        actions: ['Enable CPU-intensive task queuing', 'Implement worker threads for parallel processing', 'Optimize algorithm complexity', 'Consider horizontal scaling']
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[21][1]++;
    }
    // Memory optimization recommendations
    cov_1m66mluqxt().s[86]++;
    if (systemMetrics.memory.utilization > 80) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[23][0]++;
      cov_1m66mluqxt().s[87]++;
      recommendations.push({
        category: 'memory',
        priority: systemMetrics.memory.utilization > 95 ?
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[24][0]++, 'high') :
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[24][1]++, 'medium'),
        title: 'Optimize Memory Usage',
        description: 'High memory utilization detected. Consider implementing the following optimizations:',
        actions: ['Implement memory-efficient data structures', 'Add result caching with TTL', 'Optimize object pooling', 'Review memory leaks']
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[23][1]++;
    }
    // Database optimization recommendations
    const dbStats =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[88]++, analyticsEngine.getQueryPerformanceStats ?
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[25][0]++, analyticsEngine.getQueryPerformanceStats()) :
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[25][1]++, {}));
    const slowQueries =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[89]++, Object.entries(dbStats).filter(([_, stats]) => {
      /* istanbul ignore next */
      cov_1m66mluqxt().f[21]++;
      cov_1m66mluqxt().s[90]++;
      return stats.avg > 100;
    }));
    /* istanbul ignore next */
    cov_1m66mluqxt().s[91]++;
    if (slowQueries.length > 0) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[26][0]++;
      cov_1m66mluqxt().s[92]++;
      recommendations.push({
        category: 'database',
        priority: 'high',
        title: 'Optimize Database Performance',
        description: `${slowQueries.length} slow queries detected. Consider implementing the following optimizations:`,
        actions: ['Add indexes for frequently queried columns', 'Implement query result caching', 'Optimize database schema', 'Use prepared statements', 'Consider database connection pooling']
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[26][1]++;
    }
    // Cache optimization recommendations
    const cacheStats =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[93]++, analyticsEngine.getCacheStats ?
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[27][0]++, analyticsEngine.getCacheStats()) :
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[27][1]++, null));
    /* istanbul ignore next */
    cov_1m66mluqxt().s[94]++;
    if (
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[29][0]++, cacheStats) &&
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[29][1]++, cacheStats.hitRate < 70)) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[28][0]++;
      cov_1m66mluqxt().s[95]++;
      recommendations.push({
        category: 'cache',
        priority: 'medium',
        title: 'Improve Cache Performance',
        description: `Cache hit rate is ${cacheStats.hitRate?.toFixed(1)}%. Consider implementing the following optimizations:`,
        actions: ['Increase cache size limits', 'Optimize cache TTL values', 'Implement cache warming', 'Add cache prefetching for predictable queries']
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[28][1]++;
    }
    // Response time optimization recommendations
    cov_1m66mluqxt().s[96]++;
    if (appMetrics.averageResponseTime > 1000) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[30][0]++;
      cov_1m66mluqxt().s[97]++;
      recommendations.push({
        category: 'response_time',
        priority: appMetrics.averageResponseTime > 3000 ?
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[31][0]++, 'high') :
        /* istanbul ignore next */
        (cov_1m66mluqxt().b[31][1]++, 'medium'),
        title: 'Optimize Response Time',
        description: `Average response time is ${appMetrics.averageResponseTime.toFixed(0)}ms. Consider implementing the following optimizations:`,
        actions: ['Implement result caching', 'Optimize critical path algorithms', 'Add async processing for non-critical operations', 'Consider CDN for static assets']
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[30][1]++;
    }
    cov_1m66mluqxt().s[98]++;
    res.json({
      success: true,
      data: {
        recommendations,
        totalRecommendations: recommendations.length,
        priorityBreakdown: {
          high: recommendations.filter(r => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[22]++;
            cov_1m66mluqxt().s[99]++;
            return r.priority === 'high';
          }).length,
          medium: recommendations.filter(r => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[23]++;
            cov_1m66mluqxt().s[100]++;
            return r.priority === 'medium';
          }).length,
          low: recommendations.filter(r => {
            /* istanbul ignore next */
            cov_1m66mluqxt().f[24]++;
            cov_1m66mluqxt().s[101]++;
            return r.priority === 'low';
          }).length
        }
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[102]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /performance/thresholds
 * Set custom performance thresholds
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[103]++;
router.post('/thresholds', (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[25]++;
  cov_1m66mluqxt().s[104]++;
  try {
    const {
      metricName,
      warning,
      critical
    } =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[105]++, req.body);
    /* istanbul ignore next */
    cov_1m66mluqxt().s[106]++;
    if (
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[33][0]++, !metricName) ||
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[33][1]++, typeof warning !== 'number') ||
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[33][2]++, typeof critical !== 'number')) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[32][0]++;
      cov_1m66mluqxt().s[107]++;
      return res.status(400).json({
        success: false,
        error: 'Invalid request body. Required: metricName, warning, critical'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[32][1]++;
    }
    cov_1m66mluqxt().s[108]++;
    if (critical <= warning) {
      /* istanbul ignore next */
      cov_1m66mluqxt().b[34][0]++;
      cov_1m66mluqxt().s[109]++;
      return res.status(400).json({
        success: false,
        error: 'Critical threshold must be greater than warning threshold'
      });
    } else
    /* istanbul ignore next */
    {
      cov_1m66mluqxt().b[34][1]++;
    }
    cov_1m66mluqxt().s[110]++;
    PerformanceMonitor_1.performanceMonitor.setThreshold(metricName, warning, critical);
    /* istanbul ignore next */
    cov_1m66mluqxt().s[111]++;
    res.json({
      success: true,
      data: {
        metricName,
        warning,
        critical,
        message: 'Threshold updated successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[112]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * POST /performance/clear
 * Clear performance metrics and alerts
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[113]++;
router.post('/clear', (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[26]++;
  cov_1m66mluqxt().s[114]++;
  try {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[115]++;
    PerformanceMonitor_1.performanceMonitor.clear();
    /* istanbul ignore next */
    cov_1m66mluqxt().s[116]++;
    res.json({
      success: true,
      data: {
        message: 'Performance metrics and alerts cleared successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[117]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /performance/export
 * Export performance data
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[118]++;
router.get('/export', (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[27]++;
  cov_1m66mluqxt().s[119]++;
  try {
    const exportData =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[120]++, PerformanceMonitor_1.performanceMonitor.exportMetrics());
    /* istanbul ignore next */
    cov_1m66mluqxt().s[121]++;
    res.setHeader('Content-Type', 'application/json');
    /* istanbul ignore next */
    cov_1m66mluqxt().s[122]++;
    res.setHeader('Content-Disposition', 'attachment; filename="performance-metrics.json"');
    /* istanbul ignore next */
    cov_1m66mluqxt().s[123]++;
    res.send(exportData);
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[124]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/**
 * GET /performance/health
 * Quick health check endpoint
 */
/* istanbul ignore next */
cov_1m66mluqxt().s[125]++;
router.get('/health', async (req, res) => {
  /* istanbul ignore next */
  cov_1m66mluqxt().f[28]++;
  cov_1m66mluqxt().s[126]++;
  try {
    const summary =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[127]++, PerformanceMonitor_1.performanceMonitor.getPerformanceSummary());
    const alerts =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[128]++, PerformanceMonitor_1.performanceMonitor.getActiveAlerts());
    const health =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[129]++, {
      status: summary.systemHealth,
      uptime: summary.uptime,
      timestamp: new Date().toISOString(),
      version: process.version,
      memory: process.memoryUsage(),
      activeAlerts: alerts.length,
      criticalAlerts: alerts.filter(a => {
        /* istanbul ignore next */
        cov_1m66mluqxt().f[29]++;
        cov_1m66mluqxt().s[130]++;
        return a.severity === 'critical';
      }).length
    });
    const statusCode =
    /* istanbul ignore next */
    (cov_1m66mluqxt().s[131]++, summary.systemHealth === 'critical' ?
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[35][0]++, 503) :
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[35][1]++, summary.systemHealth === 'warning' ?
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[36][0]++, 200) :
    /* istanbul ignore next */
    (cov_1m66mluqxt().b[36][1]++, 200)));
    /* istanbul ignore next */
    cov_1m66mluqxt().s[132]++;
    res.status(statusCode).json({
      success: true,
      data: health
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_1m66mluqxt().s[133]++;
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});
/* istanbul ignore next */
cov_1m66mluqxt().s[134]++;
exports.default = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,