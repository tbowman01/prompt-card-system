{"version":3,"names":["cov_1m66mluqxt","actualCoverage","s","express_1","require","PerformanceMonitor_1","AnalyticsEngine_1","router","Router","analyticsEngine","AnalyticsEngine","getInstance","get","req","res","f","systemMetrics","applicationMetrics","summary","alerts","Promise","all","performanceMonitor","getSystemMetrics","getApplicationMetrics","getPerformanceSummary","getActiveAlerts","json","success","data","timestamp","Date","toISOString","uptime","process","version","platform","arch","error","status","message","metricName","params","limit","b","parseInt","query","metrics","getMetrics","count","length","metricNames","getMetricNames","statistics","getStatistics","totalMetrics","severity","filteredAlerts","filter","alert","total","filtered","severityBreakdown","critical","a","high","medium","low","nodeMetrics","memory","memoryUsage","cpu","cpuUsage","pid","versions","system","node","serviceStats","analytics","getQueryPerformanceStats","cacheStats","getCacheStats","optimization","cacheHitRate","avgProcessingTime","testing","queueSize","activeJobs","avgExecutionTime","websocket","activeConnections","messagesSent","avgLatency","analyticsStats","size","max","hitRate","dbMetrics","queryStats","connections","active","idle","performance","avgQueryTime","Object","values","reduce","sum","stat","avg","slowQueries","totalQueries","bottlenecks","cpu_usage","push","type","description","toFixed","recommendation","memory_usage","app_response_time","dbStats","entries","forEach","queryName","stats","totalBottlenecks","recommendations","map","appMetrics","usage","category","priority","title","actions","utilization","_","averageResponseTime","totalRecommendations","priorityBreakdown","r","post","warning","body","setThreshold","clear","exportData","exportMetrics","setHeader","send","health","systemHealth","activeAlerts","criticalAlerts","statusCode","exports","default"],"sources":["/workspaces/prompt-card-system/backend/src/routes/performance.ts"],"sourcesContent":["import { Router } from 'express';\nimport { performanceMonitor } from '../services/performance/PerformanceMonitor';\nimport { AnalyticsEngine } from '../services/analytics/AnalyticsEngine';\nimport { ReportGenerator } from '../services/reports/generators/ReportGenerator';\nimport { OptimizationEngine } from '../services/optimization/OptimizationEngine';\nimport { TestQueueManager } from '../services/testing/TestQueueManager';\nimport { ProgressService } from '../services/websocket/ProgressService';\n\nconst router = Router();\n\n// Initialize services for performance monitoring\nconst analyticsEngine = AnalyticsEngine.getInstance();\n\n/**\n * GET /performance/overview\n * Get overall performance overview\n */\nrouter.get('/overview', async (req, res) => {\n  try {\n    const [\n      systemMetrics,\n      applicationMetrics,\n      summary,\n      alerts\n    ] = await Promise.all([\n      performanceMonitor.getSystemMetrics(),\n      performanceMonitor.getApplicationMetrics(),\n      performanceMonitor.getPerformanceSummary(),\n      performanceMonitor.getActiveAlerts()\n    ]);\n\n    res.json({\n      success: true,\n      data: {\n        timestamp: new Date().toISOString(),\n        systemMetrics,\n        applicationMetrics,\n        summary,\n        alerts,\n        uptime: process.uptime(),\n        version: process.version,\n        platform: process.platform,\n        arch: process.arch\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/metrics\n * Get performance metrics for a specific metric name\n */\nrouter.get('/metrics/:metricName?', (req, res) => {\n  try {\n    const { metricName } = req.params;\n    const limit = parseInt(req.query.limit as string) || 100;\n\n    if (metricName) {\n      const metrics = performanceMonitor.getMetrics(metricName, limit);\n      res.json({\n        success: true,\n        data: {\n          metricName,\n          metrics,\n          count: metrics.length\n        }\n      });\n    } else {\n      const metricNames = performanceMonitor.getMetricNames();\n      const statistics = performanceMonitor.getStatistics();\n      \n      res.json({\n        success: true,\n        data: {\n          metricNames,\n          statistics,\n          totalMetrics: metricNames.length\n        }\n      });\n    }\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/alerts\n * Get active performance alerts\n */\nrouter.get('/alerts', (req, res) => {\n  try {\n    const alerts = performanceMonitor.getActiveAlerts();\n    const severity = req.query.severity as string;\n    \n    let filteredAlerts = alerts;\n    if (severity) {\n      filteredAlerts = alerts.filter(alert => alert.severity === severity);\n    }\n\n    res.json({\n      success: true,\n      data: {\n        alerts: filteredAlerts,\n        total: alerts.length,\n        filtered: filteredAlerts.length,\n        severityBreakdown: {\n          critical: alerts.filter(a => a.severity === 'critical').length,\n          high: alerts.filter(a => a.severity === 'high').length,\n          medium: alerts.filter(a => a.severity === 'medium').length,\n          low: alerts.filter(a => a.severity === 'low').length\n        }\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/system\n * Get detailed system performance metrics\n */\nrouter.get('/system', async (req, res) => {\n  try {\n    const systemMetrics = await performanceMonitor.getSystemMetrics();\n    const nodeMetrics = {\n      memory: process.memoryUsage(),\n      cpu: process.cpuUsage(),\n      uptime: process.uptime(),\n      pid: process.pid,\n      version: process.version,\n      versions: process.versions\n    };\n\n    res.json({\n      success: true,\n      data: {\n        system: systemMetrics,\n        node: nodeMetrics,\n        timestamp: new Date().toISOString()\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/services\n * Get performance statistics for all services\n */\nrouter.get('/services', async (req, res) => {\n  try {\n    const serviceStats = {\n      analytics: analyticsEngine.getQueryPerformanceStats ? analyticsEngine.getQueryPerformanceStats() : {},\n      cacheStats: analyticsEngine.getCacheStats ? analyticsEngine.getCacheStats() : {},\n      optimization: {\n        // Would get from optimization engine if available\n        cacheHitRate: 0,\n        avgProcessingTime: 0\n      },\n      testing: {\n        // Would get from test queue manager if available\n        queueSize: 0,\n        activeJobs: 0,\n        avgExecutionTime: 0\n      },\n      websocket: {\n        // Would get from progress service if available\n        activeConnections: 0,\n        messagesSent: 0,\n        avgLatency: 0\n      }\n    };\n\n    res.json({\n      success: true,\n      data: serviceStats\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/database\n * Get database performance metrics\n */\nrouter.get('/database', async (req, res) => {\n  try {\n    // Get analytics engine performance stats\n    const analyticsStats = analyticsEngine.getQueryPerformanceStats ? \n      analyticsEngine.getQueryPerformanceStats() : {};\n    \n    const cacheStats = analyticsEngine.getCacheStats ? \n      analyticsEngine.getCacheStats() : { size: 0, max: 0, hitRate: 0 };\n\n    // Calculate database performance metrics\n    const dbMetrics = {\n      queryStats: analyticsStats,\n      cacheStats,\n      connections: {\n        active: 1, // SQLite is single connection\n        idle: 0,\n        total: 1\n      },\n      performance: {\n        avgQueryTime: Object.values(analyticsStats).length > 0 ? \n          Object.values(analyticsStats).reduce((sum: number, stat: any) => sum + stat.avg, 0) / Object.values(analyticsStats).length : 0,\n        slowQueries: Object.values(analyticsStats).filter((stat: any) => stat.avg > 100).length,\n        totalQueries: Object.values(analyticsStats).reduce((sum: number, stat: any) => sum + stat.count, 0)\n      }\n    };\n\n    res.json({\n      success: true,\n      data: dbMetrics\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/bottlenecks\n * Identify performance bottlenecks\n */\nrouter.get('/bottlenecks', async (req, res) => {\n  try {\n    const statistics = performanceMonitor.getStatistics();\n    const alerts = performanceMonitor.getActiveAlerts();\n    \n    // Identify bottlenecks based on performance data\n    const bottlenecks = [];\n    \n    // CPU bottlenecks\n    if (statistics.cpu_usage && statistics.cpu_usage.avg > 80) {\n      bottlenecks.push({\n        type: 'cpu',\n        severity: statistics.cpu_usage.avg > 90 ? 'critical' : 'high',\n        description: `High CPU usage: ${statistics.cpu_usage.avg.toFixed(1)}%`,\n        recommendation: 'Consider optimizing CPU-intensive operations or scaling horizontally'\n      });\n    }\n    \n    // Memory bottlenecks\n    if (statistics.memory_usage && statistics.memory_usage.avg > 85) {\n      bottlenecks.push({\n        type: 'memory',\n        severity: statistics.memory_usage.avg > 95 ? 'critical' : 'high',\n        description: `High memory usage: ${statistics.memory_usage.avg.toFixed(1)}%`,\n        recommendation: 'Consider optimizing memory usage or increasing available memory'\n      });\n    }\n    \n    // Response time bottlenecks\n    if (statistics.app_response_time && statistics.app_response_time.avg > 2000) {\n      bottlenecks.push({\n        type: 'response_time',\n        severity: statistics.app_response_time.avg > 5000 ? 'critical' : 'high',\n        description: `Slow response time: ${statistics.app_response_time.avg.toFixed(0)}ms`,\n        recommendation: 'Optimize database queries, enable caching, or improve algorithm efficiency'\n      });\n    }\n    \n    // Database query bottlenecks\n    const dbStats = analyticsEngine.getQueryPerformanceStats ? \n      analyticsEngine.getQueryPerformanceStats() : {};\n    \n    Object.entries(dbStats).forEach(([queryName, stats]: [string, any]) => {\n      if (stats.avg > 100) {\n        bottlenecks.push({\n          type: 'database',\n          severity: stats.avg > 500 ? 'critical' : stats.avg > 200 ? 'high' : 'medium',\n          description: `Slow query: ${queryName} (${stats.avg.toFixed(1)}ms avg)`,\n          recommendation: 'Add database indexes, optimize query structure, or implement query result caching'\n        });\n      }\n    });\n\n    res.json({\n      success: true,\n      data: {\n        bottlenecks,\n        totalBottlenecks: bottlenecks.length,\n        severityBreakdown: {\n          critical: bottlenecks.filter(b => b.severity === 'critical').length,\n          high: bottlenecks.filter(b => b.severity === 'high').length,\n          medium: bottlenecks.filter(b => b.severity === 'medium').length\n        },\n        recommendations: bottlenecks.map(b => b.recommendation)\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/recommendations\n * Get performance optimization recommendations\n */\nrouter.get('/recommendations', async (req, res) => {\n  try {\n    const systemMetrics = await performanceMonitor.getSystemMetrics();\n    const appMetrics = performanceMonitor.getApplicationMetrics();\n    const statistics = performanceMonitor.getStatistics();\n    \n    const recommendations = [];\n    \n    // CPU optimization recommendations\n    if (systemMetrics.cpu.usage > 70) {\n      recommendations.push({\n        category: 'cpu',\n        priority: systemMetrics.cpu.usage > 90 ? 'high' : 'medium',\n        title: 'Optimize CPU Usage',\n        description: 'High CPU usage detected. Consider implementing the following optimizations:',\n        actions: [\n          'Enable CPU-intensive task queuing',\n          'Implement worker threads for parallel processing',\n          'Optimize algorithm complexity',\n          'Consider horizontal scaling'\n        ]\n      });\n    }\n    \n    // Memory optimization recommendations\n    if (systemMetrics.memory.utilization > 80) {\n      recommendations.push({\n        category: 'memory',\n        priority: systemMetrics.memory.utilization > 95 ? 'high' : 'medium',\n        title: 'Optimize Memory Usage',\n        description: 'High memory utilization detected. Consider implementing the following optimizations:',\n        actions: [\n          'Implement memory-efficient data structures',\n          'Add result caching with TTL',\n          'Optimize object pooling',\n          'Review memory leaks'\n        ]\n      });\n    }\n    \n    // Database optimization recommendations\n    const dbStats = analyticsEngine.getQueryPerformanceStats ? \n      analyticsEngine.getQueryPerformanceStats() : {};\n    \n    const slowQueries = Object.entries(dbStats).filter(([_, stats]: [string, any]) => stats.avg > 100);\n    \n    if (slowQueries.length > 0) {\n      recommendations.push({\n        category: 'database',\n        priority: 'high',\n        title: 'Optimize Database Performance',\n        description: `${slowQueries.length} slow queries detected. Consider implementing the following optimizations:`,\n        actions: [\n          'Add indexes for frequently queried columns',\n          'Implement query result caching',\n          'Optimize database schema',\n          'Use prepared statements',\n          'Consider database connection pooling'\n        ]\n      });\n    }\n    \n    // Cache optimization recommendations\n    const cacheStats = analyticsEngine.getCacheStats ? analyticsEngine.getCacheStats() : null;\n    \n    if (cacheStats && cacheStats.hitRate < 70) {\n      recommendations.push({\n        category: 'cache',\n        priority: 'medium',\n        title: 'Improve Cache Performance',\n        description: `Cache hit rate is ${cacheStats.hitRate?.toFixed(1)}%. Consider implementing the following optimizations:`,\n        actions: [\n          'Increase cache size limits',\n          'Optimize cache TTL values',\n          'Implement cache warming',\n          'Add cache prefetching for predictable queries'\n        ]\n      });\n    }\n    \n    // Response time optimization recommendations\n    if (appMetrics.averageResponseTime > 1000) {\n      recommendations.push({\n        category: 'response_time',\n        priority: appMetrics.averageResponseTime > 3000 ? 'high' : 'medium',\n        title: 'Optimize Response Time',\n        description: `Average response time is ${appMetrics.averageResponseTime.toFixed(0)}ms. Consider implementing the following optimizations:`,\n        actions: [\n          'Implement result caching',\n          'Optimize critical path algorithms',\n          'Add async processing for non-critical operations',\n          'Consider CDN for static assets'\n        ]\n      });\n    }\n\n    res.json({\n      success: true,\n      data: {\n        recommendations,\n        totalRecommendations: recommendations.length,\n        priorityBreakdown: {\n          high: recommendations.filter(r => r.priority === 'high').length,\n          medium: recommendations.filter(r => r.priority === 'medium').length,\n          low: recommendations.filter(r => r.priority === 'low').length\n        }\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /performance/thresholds\n * Set custom performance thresholds\n */\nrouter.post('/thresholds', (req, res) => {\n  try {\n    const { metricName, warning, critical } = req.body;\n    \n    if (!metricName || typeof warning !== 'number' || typeof critical !== 'number') {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid request body. Required: metricName, warning, critical'\n      });\n    }\n    \n    if (critical <= warning) {\n      return res.status(400).json({\n        success: false,\n        error: 'Critical threshold must be greater than warning threshold'\n      });\n    }\n    \n    performanceMonitor.setThreshold(metricName, warning, critical);\n    \n    res.json({\n      success: true,\n      data: {\n        metricName,\n        warning,\n        critical,\n        message: 'Threshold updated successfully'\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * POST /performance/clear\n * Clear performance metrics and alerts\n */\nrouter.post('/clear', (req, res) => {\n  try {\n    performanceMonitor.clear();\n    \n    res.json({\n      success: true,\n      data: {\n        message: 'Performance metrics and alerts cleared successfully'\n      }\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/export\n * Export performance data\n */\nrouter.get('/export', (req, res) => {\n  try {\n    const exportData = performanceMonitor.exportMetrics();\n    \n    res.setHeader('Content-Type', 'application/json');\n    res.setHeader('Content-Disposition', 'attachment; filename=\"performance-metrics.json\"');\n    res.send(exportData);\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\n/**\n * GET /performance/health\n * Quick health check endpoint\n */\nrouter.get('/health', async (req, res) => {\n  try {\n    const summary = performanceMonitor.getPerformanceSummary();\n    const alerts = performanceMonitor.getActiveAlerts();\n    \n    const health = {\n      status: summary.systemHealth,\n      uptime: summary.uptime,\n      timestamp: new Date().toISOString(),\n      version: process.version,\n      memory: process.memoryUsage(),\n      activeAlerts: alerts.length,\n      criticalAlerts: alerts.filter(a => a.severity === 'critical').length\n    };\n    \n    const statusCode = summary.systemHealth === 'critical' ? 503 : \n                      summary.systemHealth === 'warning' ? 200 : 200;\n    \n    res.status(statusCode).json({\n      success: true,\n      data: health\n    });\n  } catch (error) {\n    res.status(500).json({\n      success: false,\n      error: error.message\n    });\n  }\n});\n\nexport default router;"],"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","ignoreList":[]}