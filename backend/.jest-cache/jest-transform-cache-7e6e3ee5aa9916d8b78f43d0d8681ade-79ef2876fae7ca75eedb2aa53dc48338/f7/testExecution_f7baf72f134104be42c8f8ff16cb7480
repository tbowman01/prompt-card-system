14d4411f11d46f9a00d7338342cb1508
"use strict";

/* istanbul ignore next */
function cov_jhv77uwy5() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/testExecution.ts";
  var hash = "83a464bb00326893b1cfecfb764a3240ef07ee18";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/testExecution.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 2,
          column: 62
        }
      },
      "1": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 3,
          column: 37
        }
      },
      "2": {
        start: {
          line: 4,
          column: 18
        },
        end: {
          line: 4,
          column: 36
        }
      },
      "3": {
        start: {
          line: 5,
          column: 21
        },
        end: {
          line: 5,
          column: 54
        }
      },
      "4": {
        start: {
          line: 6,
          column: 21
        },
        end: {
          line: 6,
          column: 54
        }
      },
      "5": {
        start: {
          line: 7,
          column: 15
        },
        end: {
          line: 7,
          column: 30
        }
      },
      "6": {
        start: {
          line: 8,
          column: 15
        },
        end: {
          line: 8,
          column: 38
        }
      },
      "7": {
        start: {
          line: 9,
          column: 0
        },
        end: {
          line: 9,
          column: 37
        }
      },
      "8": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 105,
          column: 3
        }
      },
      "9": {
        start: {
          line: 15,
          column: 22
        },
        end: {
          line: 15,
          column: 32
        }
      },
      "10": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 24
        }
      },
      "11": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "12": {
        start: {
          line: 18,
          column: 23
        },
        end: {
          line: 18,
          column: 33
        }
      },
      "13": {
        start: {
          line: 19,
          column: 26
        },
        end: {
          line: 19,
          column: 34
        }
      },
      "14": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 20,
          column: 39
        }
      },
      "15": {
        start: {
          line: 22,
          column: 25
        },
        end: {
          line: 30,
          column: 14
        }
      },
      "16": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 36,
          column: 9
        }
      },
      "17": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 35,
          column: 15
        }
      },
      "18": {
        start: {
          line: 38,
          column: 31
        },
        end: {
          line: 38,
          column: 67
        }
      },
      "19": {
        start: {
          line: 39,
          column: 27
        },
        end: {
          line: 39,
          column: 66
        }
      },
      "20": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 108
        }
      },
      "21": {
        start: {
          line: 43,
          column: 28
        },
        end: {
          line: 43,
          column: 81
        }
      },
      "22": {
        start: {
          line: 44,
          column: 26
        },
        end: {
          line: 44,
          column: 46
        }
      },
      "23": {
        start: {
          line: 46,
          column: 33
        },
        end: {
          line: 51,
          column: 10
        }
      },
      "24": {
        start: {
          line: 52,
          column: 36
        },
        end: {
          line: 52,
          column: 83
        }
      },
      "25": {
        start: {
          line: 52,
          column: 69
        },
        end: {
          line: 52,
          column: 82
        }
      },
      "26": {
        start: {
          line: 53,
          column: 30
        },
        end: {
          line: 53,
          column: 52
        }
      },
      "27": {
        start: {
          line: 55,
          column: 29
        },
        end: {
          line: 64,
          column: 116
        }
      },
      "28": {
        start: {
          line: 65,
          column: 23
        },
        end: {
          line: 74,
          column: 9
        }
      },
      "29": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 78,
          column: 11
        }
      },
      "30": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 98,
          column: 9
        }
      },
      "31": {
        start: {
          line: 83,
          column: 12
        },
        end: {
          line: 94,
          column: 13
        }
      },
      "32": {
        start: {
          line: 84,
          column: 16
        },
        end: {
          line: 93,
          column: 160
        }
      },
      "33": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 97,
          column: 68
        }
      },
      "34": {
        start: {
          line: 99,
          column: 8
        },
        end: {
          line: 103,
          column: 11
        }
      },
      "35": {
        start: {
          line: 110,
          column: 0
        },
        end: {
          line: 250,
          column: 3
        }
      },
      "36": {
        start: {
          line: 111,
          column: 22
        },
        end: {
          line: 111,
          column: 32
        }
      },
      "37": {
        start: {
          line: 112,
          column: 24
        },
        end: {
          line: 112,
          column: 40
        }
      },
      "38": {
        start: {
          line: 113,
          column: 4
        },
        end: {
          line: 249,
          column: 5
        }
      },
      "39": {
        start: {
          line: 114,
          column: 23
        },
        end: {
          line: 114,
          column: 33
        }
      },
      "40": {
        start: {
          line: 115,
          column: 54
        },
        end: {
          line: 115,
          column: 62
        }
      },
      "41": {
        start: {
          line: 117,
          column: 27
        },
        end: {
          line: 119,
          column: 14
        }
      },
      "42": {
        start: {
          line: 120,
          column: 8
        },
        end: {
          line: 125,
          column: 9
        }
      },
      "43": {
        start: {
          line: 121,
          column: 12
        },
        end: {
          line: 124,
          column: 15
        }
      },
      "44": {
        start: {
          line: 127,
          column: 26
        },
        end: {
          line: 129,
          column: 14
        }
      },
      "45": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 135,
          column: 9
        }
      },
      "46": {
        start: {
          line: 131,
          column: 12
        },
        end: {
          line: 134,
          column: 15
        }
      },
      "47": {
        start: {
          line: 136,
          column: 24
        },
        end: {
          line: 136,
          column: 26
        }
      },
      "48": {
        start: {
          line: 137,
          column: 25
        },
        end: {
          line: 137,
          column: 30
        }
      },
      "49": {
        start: {
          line: 139,
          column: 8
        },
        end: {
          line: 223,
          column: 9
        }
      },
      "50": {
        start: {
          line: 140,
          column: 12
        },
        end: {
          line: 141,
          column: 22
        }
      },
      "51": {
        start: {
          line: 141,
          column: 16
        },
        end: {
          line: 141,
          column: 22
        }
      },
      "52": {
        start: {
          line: 142,
          column: 34
        },
        end: {
          line: 142,
          column: 44
        }
      },
      "53": {
        start: {
          line: 143,
          column: 36
        },
        end: {
          line: 143,
          column: 67
        }
      },
      "54": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 222,
          column: 13
        }
      },
      "55": {
        start: {
          line: 146,
          column: 39
        },
        end: {
          line: 146,
          column: 75
        }
      },
      "56": {
        start: {
          line: 147,
          column: 35
        },
        end: {
          line: 147,
          column: 74
        }
      },
      "57": {
        start: {
          line: 149,
          column: 31
        },
        end: {
          line: 149,
          column: 118
        }
      },
      "58": {
        start: {
          line: 151,
          column: 36
        },
        end: {
          line: 151,
          column: 89
        }
      },
      "59": {
        start: {
          line: 152,
          column: 34
        },
        end: {
          line: 152,
          column: 54
        }
      },
      "60": {
        start: {
          line: 153,
          column: 42
        },
        end: {
          line: 153,
          column: 68
        }
      },
      "61": {
        start: {
          line: 155,
          column: 41
        },
        end: {
          line: 160,
          column: 18
        }
      },
      "62": {
        start: {
          line: 161,
          column: 44
        },
        end: {
          line: 161,
          column: 91
        }
      },
      "63": {
        start: {
          line: 161,
          column: 77
        },
        end: {
          line: 161,
          column: 90
        }
      },
      "64": {
        start: {
          line: 163,
          column: 16
        },
        end: {
          line: 172,
          column: 138
        }
      },
      "65": {
        start: {
          line: 173,
          column: 31
        },
        end: {
          line: 182,
          column: 17
        }
      },
      "66": {
        start: {
          line: 183,
          column: 16
        },
        end: {
          line: 183,
          column: 37
        }
      },
      "67": {
        start: {
          line: 185,
          column: 16
        },
        end: {
          line: 187,
          column: 17
        }
      },
      "68": {
        start: {
          line: 186,
          column: 20
        },
        end: {
          line: 186,
          column: 38
        }
      },
      "69": {
        start: {
          line: 191,
          column: 42
        },
        end: {
          line: 191,
          column: 68
        }
      },
      "70": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 206,
          column: 17
        }
      },
      "71": {
        start: {
          line: 193,
          column: 20
        },
        end: {
          line: 202,
          column: 167
        }
      },
      "72": {
        start: {
          line: 205,
          column: 20
        },
        end: {
          line: 205,
          column: 82
        }
      },
      "73": {
        start: {
          line: 207,
          column: 36
        },
        end: {
          line: 216,
          column: 17
        }
      },
      "74": {
        start: {
          line: 217,
          column: 16
        },
        end: {
          line: 217,
          column: 42
        }
      },
      "75": {
        start: {
          line: 219,
          column: 16
        },
        end: {
          line: 221,
          column: 17
        }
      },
      "76": {
        start: {
          line: 220,
          column: 20
        },
        end: {
          line: 220,
          column: 38
        }
      },
      "77": {
        start: {
          line: 224,
          column: 35
        },
        end: {
          line: 224,
          column: 57
        }
      },
      "78": {
        start: {
          line: 225,
          column: 28
        },
        end: {
          line: 225,
          column: 64
        }
      },
      "79": {
        start: {
          line: 225,
          column: 48
        },
        end: {
          line: 225,
          column: 56
        }
      },
      "80": {
        start: {
          line: 226,
          column: 28
        },
        end: {
          line: 226,
          column: 56
        }
      },
      "81": {
        start: {
          line: 227,
          column: 30
        },
        end: {
          line: 227,
          column: 47
        }
      },
      "82": {
        start: {
          line: 228,
          column: 28
        },
        end: {
          line: 237,
          column: 9
        }
      },
      "83": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 241,
          column: 11
        }
      },
      "84": {
        start: {
          line: 244,
          column: 8
        },
        end: {
          line: 248,
          column: 11
        }
      },
      "85": {
        start: {
          line: 255,
          column: 0
        },
        end: {
          line: 304,
          column: 3
        }
      },
      "86": {
        start: {
          line: 256,
          column: 4
        },
        end: {
          line: 303,
          column: 5
        }
      },
      "87": {
        start: {
          line: 257,
          column: 23
        },
        end: {
          line: 257,
          column: 33
        }
      },
      "88": {
        start: {
          line: 258,
          column: 21
        },
        end: {
          line: 258,
          column: 50
        }
      },
      "89": {
        start: {
          line: 259,
          column: 22
        },
        end: {
          line: 259,
          column: 53
        }
      },
      "90": {
        start: {
          line: 260,
          column: 23
        },
        end: {
          line: 260,
          column: 41
        }
      },
      "91": {
        start: {
          line: 262,
          column: 25
        },
        end: {
          line: 262,
          column: 98
        }
      },
      "92": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 268,
          column: 9
        }
      },
      "93": {
        start: {
          line: 264,
          column: 12
        },
        end: {
          line: 267,
          column: 15
        }
      },
      "94": {
        start: {
          line: 270,
          column: 28
        },
        end: {
          line: 272,
          column: 14
        }
      },
      "95": {
        start: {
          line: 274,
          column: 24
        },
        end: {
          line: 279,
          column: 29
        }
      },
      "96": {
        start: {
          line: 280,
          column: 27
        },
        end: {
          line: 280,
          column: 63
        }
      },
      "97": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 296,
          column: 11
        }
      },
      "98": {
        start: {
          line: 283,
          column: 41
        },
        end: {
          line: 287,
          column: 13
        }
      },
      "99": {
        start: {
          line: 299,
          column: 8
        },
        end: {
          line: 302,
          column: 11
        }
      },
      "100": {
        start: {
          line: 309,
          column: 0
        },
        end: {
          line: 343,
          column: 3
        }
      },
      "101": {
        start: {
          line: 310,
          column: 4
        },
        end: {
          line: 342,
          column: 5
        }
      },
      "102": {
        start: {
          line: 311,
          column: 32
        },
        end: {
          line: 311,
          column: 42
        }
      },
      "103": {
        start: {
          line: 312,
          column: 23
        },
        end: {
          line: 321,
          column: 23
        }
      },
      "104": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 327,
          column: 9
        }
      },
      "105": {
        start: {
          line: 323,
          column: 12
        },
        end: {
          line: 326,
          column: 15
        }
      },
      "106": {
        start: {
          line: 328,
          column: 8
        },
        end: {
          line: 335,
          column: 11
        }
      },
      "107": {
        start: {
          line: 338,
          column: 8
        },
        end: {
          line: 341,
          column: 11
        }
      },
      "108": {
        start: {
          line: 348,
          column: 0
        },
        end: {
          line: 410,
          column: 3
        }
      },
      "109": {
        start: {
          line: 349,
          column: 4
        },
        end: {
          line: 409,
          column: 5
        }
      },
      "110": {
        start: {
          line: 359,
          column: 28
        },
        end: {
          line: 359,
          column: 36
        }
      },
      "111": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 366,
          column: 9
        }
      },
      "112": {
        start: {
          line: 362,
          column: 12
        },
        end: {
          line: 365,
          column: 15
        }
      },
      "113": {
        start: {
          line: 368,
          column: 27
        },
        end: {
          line: 368,
          column: 114
        }
      },
      "114": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 374,
          column: 9
        }
      },
      "115": {
        start: {
          line: 370,
          column: 12
        },
        end: {
          line: 373,
          column: 15
        }
      },
      "116": {
        start: {
          line: 376,
          column: 29
        },
        end: {
          line: 376,
          column: 67
        }
      },
      "117": {
        start: {
          line: 376,
          column: 53
        },
        end: {
          line: 376,
          column: 56
        }
      },
      "118": {
        start: {
          line: 377,
          column: 26
        },
        end: {
          line: 379,
          column: 44
        }
      },
      "119": {
        start: {
          line: 380,
          column: 8
        },
        end: {
          line: 385,
          column: 9
        }
      },
      "120": {
        start: {
          line: 381,
          column: 12
        },
        end: {
          line: 384,
          column: 15
        }
      },
      "121": {
        start: {
          line: 387,
          column: 29
        },
        end: {
          line: 387,
          column: 56
        }
      },
      "122": {
        start: {
          line: 388,
          column: 28
        },
        end: {
          line: 394,
          column: 10
        }
      },
      "123": {
        start: {
          line: 395,
          column: 8
        },
        end: {
          line: 402,
          column: 11
        }
      },
      "124": {
        start: {
          line: 405,
          column: 8
        },
        end: {
          line: 408,
          column: 11
        }
      },
      "125": {
        start: {
          line: 415,
          column: 0
        },
        end: {
          line: 437,
          column: 3
        }
      },
      "126": {
        start: {
          line: 416,
          column: 4
        },
        end: {
          line: 436,
          column: 5
        }
      },
      "127": {
        start: {
          line: 417,
          column: 32
        },
        end: {
          line: 417,
          column: 42
        }
      },
      "128": {
        start: {
          line: 418,
          column: 32
        },
        end: {
          line: 418,
          column: 62
        }
      },
      "129": {
        start: {
          line: 419,
          column: 25
        },
        end: {
          line: 419,
          column: 71
        }
      },
      "130": {
        start: {
          line: 420,
          column: 8
        },
        end: {
          line: 425,
          column: 9
        }
      },
      "131": {
        start: {
          line: 421,
          column: 12
        },
        end: {
          line: 424,
          column: 15
        }
      },
      "132": {
        start: {
          line: 426,
          column: 8
        },
        end: {
          line: 429,
          column: 11
        }
      },
      "133": {
        start: {
          line: 432,
          column: 8
        },
        end: {
          line: 435,
          column: 11
        }
      },
      "134": {
        start: {
          line: 442,
          column: 0
        },
        end: {
          line: 463,
          column: 3
        }
      },
      "135": {
        start: {
          line: 443,
          column: 4
        },
        end: {
          line: 462,
          column: 5
        }
      },
      "136": {
        start: {
          line: 444,
          column: 32
        },
        end: {
          line: 444,
          column: 42
        }
      },
      "137": {
        start: {
          line: 445,
          column: 59
        },
        end: {
          line: 445,
          column: 67
        }
      },
      "138": {
        start: {
          line: 446,
          column: 29
        },
        end: {
          line: 446,
          column: 56
        }
      },
      "139": {
        start: {
          line: 447,
          column: 8
        },
        end: {
          line: 447,
          column: 68
        }
      },
      "140": {
        start: {
          line: 448,
          column: 8
        },
        end: {
          line: 455,
          column: 11
        }
      },
      "141": {
        start: {
          line: 458,
          column: 8
        },
        end: {
          line: 461,
          column: 11
        }
      },
      "142": {
        start: {
          line: 468,
          column: 0
        },
        end: {
          line: 483,
          column: 3
        }
      },
      "143": {
        start: {
          line: 469,
          column: 4
        },
        end: {
          line: 482,
          column: 5
        }
      },
      "144": {
        start: {
          line: 470,
          column: 29
        },
        end: {
          line: 470,
          column: 56
        }
      },
      "145": {
        start: {
          line: 471,
          column: 22
        },
        end: {
          line: 471,
          column: 56
        }
      },
      "146": {
        start: {
          line: 472,
          column: 8
        },
        end: {
          line: 475,
          column: 11
        }
      },
      "147": {
        start: {
          line: 478,
          column: 8
        },
        end: {
          line: 481,
          column: 11
        }
      },
      "148": {
        start: {
          line: 488,
          column: 0
        },
        end: {
          line: 503,
          column: 3
        }
      },
      "149": {
        start: {
          line: 489,
          column: 4
        },
        end: {
          line: 502,
          column: 5
        }
      },
      "150": {
        start: {
          line: 490,
          column: 32
        },
        end: {
          line: 490,
          column: 62
        }
      },
      "151": {
        start: {
          line: 491,
          column: 33
        },
        end: {
          line: 491,
          column: 76
        }
      },
      "152": {
        start: {
          line: 492,
          column: 8
        },
        end: {
          line: 495,
          column: 11
        }
      },
      "153": {
        start: {
          line: 498,
          column: 8
        },
        end: {
          line: 501,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 14,
            column: 28
          },
          end: {
            line: 14,
            column: 29
          }
        },
        loc: {
          start: {
            line: 14,
            column: 48
          },
          end: {
            line: 105,
            column: 1
          }
        },
        line: 14
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 52,
            column: 59
          },
          end: {
            line: 52,
            column: 60
          }
        },
        loc: {
          start: {
            line: 52,
            column: 69
          },
          end: {
            line: 52,
            column: 82
          }
        },
        line: 52
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 110,
            column: 45
          },
          end: {
            line: 110,
            column: 46
          }
        },
        loc: {
          start: {
            line: 110,
            column: 65
          },
          end: {
            line: 250,
            column: 1
          }
        },
        line: 110
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 161,
            column: 67
          },
          end: {
            line: 161,
            column: 68
          }
        },
        loc: {
          start: {
            line: 161,
            column: 77
          },
          end: {
            line: 161,
            column: 90
          }
        },
        line: 161
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 225,
            column: 43
          },
          end: {
            line: 225,
            column: 44
          }
        },
        loc: {
          start: {
            line: 225,
            column: 48
          },
          end: {
            line: 225,
            column: 56
          }
        },
        line: 225
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 255,
            column: 30
          },
          end: {
            line: 255,
            column: 31
          }
        },
        loc: {
          start: {
            line: 255,
            column: 44
          },
          end: {
            line: 304,
            column: 1
          }
        },
        line: 255
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 283,
            column: 30
          },
          end: {
            line: 283,
            column: 31
          }
        },
        loc: {
          start: {
            line: 283,
            column: 41
          },
          end: {
            line: 287,
            column: 13
          }
        },
        line: 283
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 309,
            column: 39
          },
          end: {
            line: 309,
            column: 40
          }
        },
        loc: {
          start: {
            line: 309,
            column: 53
          },
          end: {
            line: 343,
            column: 1
          }
        },
        line: 309
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 348,
            column: 33
          },
          end: {
            line: 348,
            column: 34
          }
        },
        loc: {
          start: {
            line: 348,
            column: 53
          },
          end: {
            line: 410,
            column: 1
          }
        },
        line: 348
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 376,
            column: 47
          },
          end: {
            line: 376,
            column: 48
          }
        },
        loc: {
          start: {
            line: 376,
            column: 53
          },
          end: {
            line: 376,
            column: 56
          }
        },
        line: 376
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 415,
            column: 48
          },
          end: {
            line: 415,
            column: 49
          }
        },
        loc: {
          start: {
            line: 415,
            column: 68
          },
          end: {
            line: 437,
            column: 1
          }
        },
        line: 415
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 442,
            column: 47
          },
          end: {
            line: 442,
            column: 48
          }
        },
        loc: {
          start: {
            line: 442,
            column: 67
          },
          end: {
            line: 463,
            column: 1
          }
        },
        line: 442
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 468,
            column: 27
          },
          end: {
            line: 468,
            column: 28
          }
        },
        loc: {
          start: {
            line: 468,
            column: 47
          },
          end: {
            line: 483,
            column: 1
          }
        },
        line: 468
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 488,
            column: 33
          },
          end: {
            line: 488,
            column: 34
          }
        },
        loc: {
          start: {
            line: 488,
            column: 53
          },
          end: {
            line: 503,
            column: 1
          }
        },
        line: 488
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 36,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 38
          },
          end: {
            line: 39,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 38
          },
          end: {
            line: 39,
            column: 57
          }
        }, {
          start: {
            line: 39,
            column: 61
          },
          end: {
            line: 39,
            column: 65
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 49,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 49,
            column: 24
          }
        }, {
          start: {
            line: 49,
            column: 28
          },
          end: {
            line: 49,
            column: 64
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 64,
            column: 39
          },
          end: {
            line: 64,
            column: 66
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 64,
            column: 61
          },
          end: {
            line: 64,
            column: 62
          }
        }, {
          start: {
            line: 64,
            column: 65
          },
          end: {
            line: 64,
            column: 66
          }
        }],
        line: 64
      },
      "4": {
        loc: {
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 12
          },
          end: {
            line: 94,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "5": {
        loc: {
          start: {
            line: 93,
            column: 53
          },
          end: {
            line: 93,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 93,
            column: 78
          },
          end: {
            line: 93,
            column: 91
          }
        }, {
          start: {
            line: 93,
            column: 94
          },
          end: {
            line: 93,
            column: 109
          }
        }],
        line: 93
      },
      "6": {
        loc: {
          start: {
            line: 101,
            column: 19
          },
          end: {
            line: 101,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 101,
            column: 44
          },
          end: {
            line: 101,
            column: 57
          }
        }, {
          start: {
            line: 101,
            column: 60
          },
          end: {
            line: 101,
            column: 83
          }
        }],
        line: 101
      },
      "7": {
        loc: {
          start: {
            line: 115,
            column: 23
          },
          end: {
            line: 115,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 115,
            column: 44
          },
          end: {
            line: 115,
            column: 49
          }
        }],
        line: 115
      },
      "8": {
        loc: {
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 8
          },
          end: {
            line: 125,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "9": {
        loc: {
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 130,
            column: 8
          },
          end: {
            line: 135,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 130
      },
      "10": {
        loc: {
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 141,
            column: 22
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 140,
            column: 12
          },
          end: {
            line: 141,
            column: 22
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 140
      },
      "11": {
        loc: {
          start: {
            line: 147,
            column: 46
          },
          end: {
            line: 147,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 147,
            column: 46
          },
          end: {
            line: 147,
            column: 65
          }
        }, {
          start: {
            line: 147,
            column: 69
          },
          end: {
            line: 147,
            column: 73
          }
        }],
        line: 147
      },
      "12": {
        loc: {
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 158,
            column: 27
          },
          end: {
            line: 158,
            column: 32
          }
        }, {
          start: {
            line: 158,
            column: 36
          },
          end: {
            line: 158,
            column: 72
          }
        }],
        line: 158
      },
      "13": {
        loc: {
          start: {
            line: 172,
            column: 56
          },
          end: {
            line: 172,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 172,
            column: 78
          },
          end: {
            line: 172,
            column: 79
          }
        }, {
          start: {
            line: 172,
            column: 82
          },
          end: {
            line: 172,
            column: 83
          }
        }],
        line: 172
      },
      "14": {
        loc: {
          start: {
            line: 185,
            column: 16
          },
          end: {
            line: 187,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 16
          },
          end: {
            line: 187,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      },
      "15": {
        loc: {
          start: {
            line: 185,
            column: 20
          },
          end: {
            line: 185,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 185,
            column: 20
          },
          end: {
            line: 185,
            column: 38
          }
        }, {
          start: {
            line: 185,
            column: 42
          },
          end: {
            line: 185,
            column: 62
          }
        }],
        line: 185
      },
      "16": {
        loc: {
          start: {
            line: 202,
            column: 57
          },
          end: {
            line: 202,
            column: 121
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 202,
            column: 86
          },
          end: {
            line: 202,
            column: 103
          }
        }, {
          start: {
            line: 202,
            column: 106
          },
          end: {
            line: 202,
            column: 121
          }
        }],
        line: 202
      },
      "17": {
        loc: {
          start: {
            line: 211,
            column: 42
          },
          end: {
            line: 211,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 211,
            column: 71
          },
          end: {
            line: 211,
            column: 88
          }
        }, {
          start: {
            line: 211,
            column: 91
          },
          end: {
            line: 211,
            column: 106
          }
        }],
        line: 211
      },
      "18": {
        loc: {
          start: {
            line: 214,
            column: 27
          },
          end: {
            line: 214,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 214,
            column: 27
          },
          end: {
            line: 214,
            column: 32
          }
        }, {
          start: {
            line: 214,
            column: 36
          },
          end: {
            line: 214,
            column: 45
          }
        }],
        line: 214
      },
      "19": {
        loc: {
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 221,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 16
          },
          end: {
            line: 221,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "20": {
        loc: {
          start: {
            line: 246,
            column: 19
          },
          end: {
            line: 246,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 246,
            column: 44
          },
          end: {
            line: 246,
            column: 57
          }
        }, {
          start: {
            line: 246,
            column: 60
          },
          end: {
            line: 246,
            column: 84
          }
        }],
        line: 246
      },
      "21": {
        loc: {
          start: {
            line: 258,
            column: 21
          },
          end: {
            line: 258,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 21
          },
          end: {
            line: 258,
            column: 45
          }
        }, {
          start: {
            line: 258,
            column: 49
          },
          end: {
            line: 258,
            column: 50
          }
        }],
        line: 258
      },
      "22": {
        loc: {
          start: {
            line: 259,
            column: 22
          },
          end: {
            line: 259,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 259,
            column: 22
          },
          end: {
            line: 259,
            column: 47
          }
        }, {
          start: {
            line: 259,
            column: 51
          },
          end: {
            line: 259,
            column: 53
          }
        }],
        line: 259
      },
      "23": {
        loc: {
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 263,
            column: 8
          },
          end: {
            line: 268,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 263
      },
      "24": {
        loc: {
          start: {
            line: 285,
            column: 46
          },
          end: {
            line: 285,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 285,
            column: 46
          },
          end: {
            line: 285,
            column: 70
          }
        }, {
          start: {
            line: 285,
            column: 74
          },
          end: {
            line: 285,
            column: 78
          }
        }],
        line: 285
      },
      "25": {
        loc: {
          start: {
            line: 301,
            column: 19
          },
          end: {
            line: 301,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 301,
            column: 44
          },
          end: {
            line: 301,
            column: 57
          }
        }, {
          start: {
            line: 301,
            column: 60
          },
          end: {
            line: 301,
            column: 95
          }
        }],
        line: 301
      },
      "26": {
        loc: {
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 322,
            column: 8
          },
          end: {
            line: 327,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 322
      },
      "27": {
        loc: {
          start: {
            line: 332,
            column: 46
          },
          end: {
            line: 332,
            column: 78
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 332,
            column: 46
          },
          end: {
            line: 332,
            column: 70
          }
        }, {
          start: {
            line: 332,
            column: 74
          },
          end: {
            line: 332,
            column: 78
          }
        }],
        line: 332
      },
      "28": {
        loc: {
          start: {
            line: 340,
            column: 19
          },
          end: {
            line: 340,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 340,
            column: 44
          },
          end: {
            line: 340,
            column: 57
          }
        }, {
          start: {
            line: 340,
            column: 60
          },
          end: {
            line: 340,
            column: 94
          }
        }],
        line: 340
      },
      "29": {
        loc: {
          start: {
            line: 350,
            column: 54
          },
          end: {
            line: 359,
            column: 9
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 350,
            column: 70
          },
          end: {
            line: 359,
            column: 9
          }
        }],
        line: 350
      },
      "30": {
        loc: {
          start: {
            line: 359,
            column: 11
          },
          end: {
            line: 359,
            column: 23
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 359,
            column: 22
          },
          end: {
            line: 359,
            column: 23
          }
        }],
        line: 359
      },
      "31": {
        loc: {
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 8
          },
          end: {
            line: 366,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "32": {
        loc: {
          start: {
            line: 361,
            column: 12
          },
          end: {
            line: 361,
            column: 108
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 361,
            column: 12
          },
          end: {
            line: 361,
            column: 27
          }
        }, {
          start: {
            line: 361,
            column: 31
          },
          end: {
            line: 361,
            column: 45
          }
        }, {
          start: {
            line: 361,
            column: 49
          },
          end: {
            line: 361,
            column: 78
          }
        }, {
          start: {
            line: 361,
            column: 82
          },
          end: {
            line: 361,
            column: 108
          }
        }],
        line: 361
      },
      "33": {
        loc: {
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 369,
            column: 8
          },
          end: {
            line: 374,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 369
      },
      "34": {
        loc: {
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 380,
            column: 8
          },
          end: {
            line: 385,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 380
      },
      "35": {
        loc: {
          start: {
            line: 391,
            column: 19
          },
          end: {
            line: 391,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 391,
            column: 19
          },
          end: {
            line: 391,
            column: 24
          }
        }, {
          start: {
            line: 391,
            column: 28
          },
          end: {
            line: 391,
            column: 38
          }
        }],
        line: 391
      },
      "36": {
        loc: {
          start: {
            line: 407,
            column: 19
          },
          end: {
            line: 407,
            column: 92
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 407,
            column: 44
          },
          end: {
            line: 407,
            column: 57
          }
        }, {
          start: {
            line: 407,
            column: 60
          },
          end: {
            line: 407,
            column: 92
          }
        }],
        line: 407
      },
      "37": {
        loc: {
          start: {
            line: 420,
            column: 8
          },
          end: {
            line: 425,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 420,
            column: 8
          },
          end: {
            line: 425,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 420
      },
      "38": {
        loc: {
          start: {
            line: 434,
            column: 19
          },
          end: {
            line: 434,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 434,
            column: 44
          },
          end: {
            line: 434,
            column: 57
          }
        }, {
          start: {
            line: 434,
            column: 60
          },
          end: {
            line: 434,
            column: 96
          }
        }],
        line: 434
      },
      "39": {
        loc: {
          start: {
            line: 445,
            column: 16
          },
          end: {
            line: 445,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 445,
            column: 25
          },
          end: {
            line: 445,
            column: 54
          }
        }],
        line: 445
      },
      "40": {
        loc: {
          start: {
            line: 460,
            column: 19
          },
          end: {
            line: 460,
            column: 93
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 460,
            column: 44
          },
          end: {
            line: 460,
            column: 57
          }
        }, {
          start: {
            line: 460,
            column: 60
          },
          end: {
            line: 460,
            column: 93
          }
        }],
        line: 460
      },
      "41": {
        loc: {
          start: {
            line: 480,
            column: 19
          },
          end: {
            line: 480,
            column: 94
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 480,
            column: 44
          },
          end: {
            line: 480,
            column: 57
          }
        }, {
          start: {
            line: 480,
            column: 60
          },
          end: {
            line: 480,
            column: 94
          }
        }],
        line: 480
      },
      "42": {
        loc: {
          start: {
            line: 500,
            column: 19
          },
          end: {
            line: 500,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 500,
            column: 44
          },
          end: {
            line: 500,
            column: 57
          }
        }, {
          start: {
            line: 500,
            column: 60
          },
          end: {
            line: 500,
            column: 95
          }
        }],
        line: 500
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0],
      "30": [0],
      "31": [0, 0],
      "32": [0, 0, 0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/testExecution.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/testExecution.ts"],
      sourcesContent: ["import { Router, Request, Response, Application } from 'express';\nimport { db } from '../database/connection';\nimport { llmService } from '../services/llmService';\nimport { v4 as uuidv4 } from 'uuid';\nimport { EnhancedAssertionType, EnhancedAssertionResult } from '../services/assertions/AssertionEngine';\n\nconst router = Router();\n\nexport interface TestExecutionResult {\n  execution_id: string;\n  test_case_id: number;\n  passed: boolean;\n  llm_output: string;\n  assertion_results: EnhancedAssertionResult[];\n  execution_time_ms: number;\n  model: string;\n  prompt_used: string;\n}\n\nexport interface BatchExecutionResult {\n  execution_id: string;\n  prompt_card_id: number;\n  total_tests: number;\n  passed_tests: number;\n  failed_tests: number;\n  results: TestExecutionResult[];\n  overall_passed: boolean;\n  execution_time_ms: number;\n}\n\n/**\n * Execute a single test case\n * POST /api/test-cases/:id/execute\n */\nrouter.post('/:id/execute', async (req: Request, res: Response): Promise<Response> => {\n  const startTime = Date.now();\n  let executionId = '';\n\n  try {\n    const { id } = req.params;\n    const { model } = req.body; // Optional model override\n    \n    executionId = uuidv4();\n\n    // Get test case with prompt card\n    const testCase = db.prepare(`\n      SELECT \n        tc.*,\n        pc.prompt_template,\n        pc.title as prompt_card_title\n      FROM test_cases tc\n      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id\n      WHERE tc.id = ?\n    `).get(id) as any;\n\n    if (!testCase) {\n      return res.status(404).json({\n        success: false,\n        error: 'Test case not found'\n      });\n    }\n\n    // Parse JSON fields\n    const inputVariables = JSON.parse(testCase.input_variables);\n    const assertions = JSON.parse(testCase.assertions || '[]');\n\n    // Substitute variables in prompt template\n    const prompt = llmService.substituteVariables(testCase.prompt_template, inputVariables);\n\n    // Execute prompt with LLM\n    const llmResponse = await llmService.generate(prompt, model);\n    const llmOutput = llmResponse.response;\n\n    // Validate assertions\n    const assertionResults = await llmService.validateAssertions(llmOutput, assertions, {\n      prompt: prompt,\n      variables: inputVariables,\n      model: model || llmService.defaultModel,\n      executionTime: Date.now() - startTime\n    });\n    const allAssertionsPassed = assertionResults.every(result => result.passed);\n\n    const executionTime = Date.now() - startTime;\n\n    // Store result in database\n    const insertResult = db.prepare(`\n      INSERT INTO test_results (\n        test_case_id, \n        execution_id, \n        llm_output, \n        passed, \n        assertion_results, \n        execution_time_ms\n      ) VALUES (?, ?, ?, ?, ?, ?)\n    `).run(\n      id,\n      executionId,\n      llmOutput,\n      allAssertionsPassed ? 1 : 0,\n      JSON.stringify(assertionResults),\n      executionTime\n    );\n\n    const result: TestExecutionResult = {\n      execution_id: executionId,\n      test_case_id: parseInt(id),\n      passed: allAssertionsPassed,\n      llm_output: llmOutput,\n      assertion_results: assertionResults,\n      execution_time_ms: executionTime,\n      model: llmResponse.model,\n      prompt_used: prompt\n    };\n\n    return res.json({\n      success: true,\n      data: result\n    });\n\n  } catch (error) {\n    // Log error but still try to store failed result\n    try {\n      if (executionId) {\n        db.prepare(`\n          INSERT INTO test_results (\n            test_case_id, \n            execution_id, \n            llm_output, \n            passed, \n            assertion_results, \n            execution_time_ms\n          ) VALUES (?, ?, ?, ?, ?, ?)\n        `).run(\n          req.params.id,\n          executionId,\n          `ERROR: ${error instanceof Error ? error.message : 'Unknown error'}`,\n          0,\n          JSON.stringify([]),\n          Date.now() - startTime\n        );\n      }\n    } catch (dbError) {\n      console.error('Failed to store error result:', dbError);\n    }\n\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Test execution failed',\n      execution_id: executionId\n    });\n  }\n});\n\n/**\n * Execute all test cases for a prompt card\n * POST /api/prompt-cards/:id/execute-all\n */\nrouter.post('/prompt-cards/:id/execute-all', async (req: Request, res: Response): Promise<Response> => {\n  const startTime = Date.now();\n  const executionId = uuidv4();\n\n  try {\n    const { id } = req.params;\n    const { model, stopOnFirstFailure = false } = req.body;\n\n    // Get prompt card\n    const promptCard = db.prepare(`\n      SELECT * FROM prompt_cards WHERE id = ?\n    `).get(id) as any;\n\n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    // Get all test cases for this prompt card\n    const testCases = db.prepare(`\n      SELECT * FROM test_cases WHERE prompt_card_id = ? ORDER BY created_at ASC\n    `).all(id) as any[];\n\n    if (testCases.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'No test cases found for this prompt card'\n      });\n    }\n\n    const results: TestExecutionResult[] = [];\n    let shouldStop = false;\n\n    // Execute each test case\n    for (const testCase of testCases) {\n      if (shouldStop) break;\n\n      const testStartTime = Date.now();\n      const testExecutionId = `${executionId}-${testCase.id}`;\n\n      try {\n        // Parse JSON fields\n        const inputVariables = JSON.parse(testCase.input_variables);\n        const assertions = JSON.parse(testCase.assertions || '[]');\n\n        // Substitute variables in prompt template\n        const prompt = llmService.substituteVariables(promptCard.prompt_template, inputVariables);\n\n        // Execute prompt with LLM\n        const llmResponse = await llmService.generate(prompt, model);\n        const llmOutput = llmResponse.response;\n\n        const testExecutionTime = Date.now() - testStartTime;\n\n        // Validate assertions\n        const assertionResults = await llmService.validateAssertions(llmOutput, assertions, {\n          prompt: prompt,\n          variables: inputVariables,\n          model: model || llmService.defaultModel,\n          executionTime: testExecutionTime\n        });\n        const allAssertionsPassed = assertionResults.every(result => result.passed);\n\n        // Store individual result\n        db.prepare(`\n          INSERT INTO test_results (\n            test_case_id, \n            execution_id, \n            llm_output, \n            passed, \n            assertion_results, \n            execution_time_ms\n          ) VALUES (?, ?, ?, ?, ?, ?)\n        `).run(\n          testCase.id,\n          testExecutionId,\n          llmOutput,\n          allAssertionsPassed ? 1 : 0,\n          JSON.stringify(assertionResults),\n          testExecutionTime\n        );\n\n        const result: TestExecutionResult = {\n          execution_id: testExecutionId,\n          test_case_id: testCase.id,\n          passed: allAssertionsPassed,\n          llm_output: llmOutput,\n          assertion_results: assertionResults,\n          execution_time_ms: testExecutionTime,\n          model: llmResponse.model,\n          prompt_used: prompt\n        };\n\n        results.push(result);\n\n        // Stop on first failure if requested\n        if (stopOnFirstFailure && !allAssertionsPassed) {\n          shouldStop = true;\n        }\n\n      } catch (testError) {\n        // Store failed test result\n        const testExecutionTime = Date.now() - testStartTime;\n        \n        try {\n          db.prepare(`\n            INSERT INTO test_results (\n              test_case_id, \n              execution_id, \n              llm_output, \n              passed, \n              assertion_results, \n              execution_time_ms\n            ) VALUES (?, ?, ?, ?, ?, ?)\n          `).run(\n            testCase.id,\n            testExecutionId,\n            `ERROR: ${testError instanceof Error ? testError.message : 'Unknown error'}`,\n            0,\n            JSON.stringify([]),\n            testExecutionTime\n          );\n        } catch (dbError) {\n          console.error('Failed to store failed test result:', dbError);\n        }\n\n        const errorResult: TestExecutionResult = {\n          execution_id: testExecutionId,\n          test_case_id: testCase.id,\n          passed: false,\n          llm_output: `ERROR: ${testError instanceof Error ? testError.message : 'Unknown error'}`,\n          assertion_results: [],\n          execution_time_ms: testExecutionTime,\n          model: model || 'unknown',\n          prompt_used: 'Error occurred before prompt execution'\n        };\n\n        results.push(errorResult);\n\n        // Stop on first failure if requested\n        if (stopOnFirstFailure) {\n          shouldStop = true;\n        }\n      }\n    }\n\n    const totalExecutionTime = Date.now() - startTime;\n    const passedTests = results.filter(r => r.passed).length;\n    const failedTests = results.length - passedTests;\n    const overallPassed = failedTests === 0;\n\n    const batchResult: BatchExecutionResult = {\n      execution_id: executionId,\n      prompt_card_id: parseInt(id),\n      total_tests: results.length,\n      passed_tests: passedTests,\n      failed_tests: failedTests,\n      results,\n      overall_passed: overallPassed,\n      execution_time_ms: totalExecutionTime\n    };\n\n    return res.json({\n      success: true,\n      data: batchResult\n    });\n\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Batch execution failed',\n      execution_id: executionId\n    });\n  }\n});\n\n/**\n * Get test execution history for a test case\n * GET /api/test-cases/:id/executions\n */\nrouter.get('/:id/executions', (req: Request, res: Response): Response => {\n  try {\n    const { id } = req.params;\n    const page = parseInt(req.query.page as string) || 1;\n    const limit = parseInt(req.query.limit as string) || 10;\n    const offset = (page - 1) * limit;\n\n    // Verify test case exists\n    const testCase = db.prepare('SELECT id FROM test_cases WHERE id = ?').get(id) as any;\n    if (!testCase) {\n      return res.status(404).json({\n        success: false,\n        error: 'Test case not found'\n      });\n    }\n\n    // Get total count\n    const totalResult = db.prepare(`\n      SELECT COUNT(*) as total FROM test_results WHERE test_case_id = ?\n    `).get(id) as { total: number };\n\n    // Get paginated results\n    const results = db.prepare(`\n      SELECT * FROM test_results \n      WHERE test_case_id = ? \n      ORDER BY created_at DESC \n      LIMIT ? OFFSET ?\n    `).all(id, limit, offset) as any[];\n\n    const totalPages = Math.ceil(totalResult.total / limit);\n\n    return res.json({\n      success: true,\n      data: results.map(result => ({\n        ...result,\n        assertion_results: JSON.parse(result.assertion_results || '[]'),\n        passed: Boolean(result.passed)\n      })),\n      pagination: {\n        page,\n        limit,\n        total: totalResult.total,\n        totalPages,\n        hasNext: page < totalPages,\n        hasPrev: page > 1\n      }\n    });\n\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch execution history'\n    });\n  }\n});\n\n/**\n * Get specific test execution result\n * GET /api/test-executions/:executionId\n */\nrouter.get('/executions/:executionId', (req: Request, res: Response): Response => {\n  try {\n    const { executionId } = req.params;\n\n    const result = db.prepare(`\n      SELECT \n        tr.*,\n        tc.name as test_case_name,\n        pc.title as prompt_card_title\n      FROM test_results tr\n      JOIN test_cases tc ON tr.test_case_id = tc.id\n      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id\n      WHERE tr.execution_id = ?\n    `).get(executionId) as any;\n\n    if (!result) {\n      return res.status(404).json({\n        success: false,\n        error: 'Execution result not found'\n      });\n    }\n\n    return res.json({\n      success: true,\n      data: {\n        ...result,\n        assertion_results: JSON.parse(result.assertion_results || '[]'),\n        passed: Boolean(result.passed)\n      }\n    });\n\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch execution result'\n    });\n  }\n});\n\n/**\n * Execute tests in parallel with queue management\n * POST /api/test-cases/execute-parallel\n */\nrouter.post('/execute-parallel', async (req: Request, res: Response): Promise<Response> => {\n  try {\n    const { \n      prompt_card_id, \n      test_case_ids, \n      model, \n      configuration = {\n        max_concurrent_tests: 3,\n        timeout_per_test: 30000,\n        retry_failed_tests: false,\n        max_retries: 1,\n        resource_limits: {\n          memory_mb: 1024,\n          cpu_percent: 50\n        }\n      },\n      priority = 0\n    } = req.body;\n\n    // Validate required fields\n    if (!prompt_card_id || !test_case_ids || !Array.isArray(test_case_ids) || test_case_ids.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'prompt_card_id and test_case_ids are required'\n      });\n    }\n\n    // Verify prompt card exists\n    const promptCard = db.prepare('SELECT id FROM prompt_cards WHERE id = ?').get(prompt_card_id);\n    if (!promptCard) {\n      return res.status(404).json({\n        success: false,\n        error: 'Prompt card not found'\n      });\n    }\n\n    // Verify test cases exist\n    const placeholders = test_case_ids.map(() => '?').join(',');\n    const testCases = db.prepare(`\n      SELECT id FROM test_cases WHERE id IN (${placeholders}) AND prompt_card_id = ?\n    `).all(...test_case_ids, prompt_card_id);\n\n    if (testCases.length !== test_case_ids.length) {\n      return res.status(400).json({\n        success: false,\n        error: 'Some test cases not found or do not belong to the specified prompt card'\n      });\n    }\n\n    // Queue the execution\n    const queueManager = req.app.locals.queueManager;\n    const executionId = await queueManager.queueTestExecution({\n      prompt_card_id,\n      test_case_ids,\n      model: model || 'llama3.1',\n      configuration,\n      priority\n    });\n\n    return res.json({\n      success: true,\n      data: {\n        execution_id: executionId,\n        status: 'queued',\n        message: 'Test execution queued successfully'\n      }\n    });\n\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to queue test execution'\n    });\n  }\n});\n\n/**\n * Get progress for a test execution\n * GET /api/test-cases/executions/:executionId/progress\n */\nrouter.get('/executions/:executionId/progress', async (req: Request, res: Response): Promise<Response> => {\n  try {\n    const { executionId } = req.params;\n    const progressService = req.app.locals.progressService;\n    \n    const progress = await progressService.getProgress(executionId);\n    \n    if (!progress) {\n      return res.status(404).json({\n        success: false,\n        error: 'Execution progress not found'\n      });\n    }\n\n    return res.json({\n      success: true,\n      data: progress\n    });\n\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch execution progress'\n    });\n  }\n});\n\n/**\n * Cancel a test execution\n * POST /api/test-cases/executions/:executionId/cancel\n */\nrouter.post('/executions/:executionId/cancel', async (req: Request, res: Response): Promise<Response> => {\n  try {\n    const { executionId } = req.params;\n    const { reason = 'User requested cancellation' } = req.body;\n    \n    const queueManager = req.app.locals.queueManager;\n    await queueManager.cancelTestExecution(executionId, reason);\n\n    return res.json({\n      success: true,\n      data: {\n        execution_id: executionId,\n        status: 'cancelled',\n        message: 'Test execution cancelled successfully'\n      }\n    });\n\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to cancel test execution'\n    });\n  }\n});\n\n/**\n * Get queue statistics\n * GET /api/test-cases/queue/stats\n */\nrouter.get('/queue/stats', async (req: Request, res: Response): Promise<Response> => {\n  try {\n    const queueManager = req.app.locals.queueManager;\n    const stats = await queueManager.getQueueStats();\n\n    return res.json({\n      success: true,\n      data: stats\n    });\n\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch queue statistics'\n    });\n  }\n});\n\n/**\n * Get active test executions\n * GET /api/test-cases/executions/active\n */\nrouter.get('/executions/active', async (req: Request, res: Response): Promise<Response> => {\n  try {\n    const progressService = req.app.locals.progressService;\n    const activeExecutions = await progressService.getActiveExecutions();\n\n    return res.json({\n      success: true,\n      data: activeExecutions\n    });\n\n  } catch (error) {\n    return res.status(500).json({\n      success: false,\n      error: error instanceof Error ? error.message : 'Failed to fetch active executions'\n    });\n  }\n});\n\nexport { router as testExecutionRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "83a464bb00326893b1cfecfb764a3240ef07ee18"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_jhv77uwy5 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_jhv77uwy5();
cov_jhv77uwy5().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_jhv77uwy5().s[1]++;
exports.testExecutionRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_jhv77uwy5().s[2]++, require("express"));
const connection_1 =
/* istanbul ignore next */
(cov_jhv77uwy5().s[3]++, require("../database/connection"));
const llmService_1 =
/* istanbul ignore next */
(cov_jhv77uwy5().s[4]++, require("../services/llmService"));
const uuid_1 =
/* istanbul ignore next */
(cov_jhv77uwy5().s[5]++, require("uuid"));
const router =
/* istanbul ignore next */
(cov_jhv77uwy5().s[6]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_jhv77uwy5().s[7]++;
exports.testExecutionRoutes = router;
/**
 * Execute a single test case
 * POST /api/test-cases/:id/execute
 */
/* istanbul ignore next */
cov_jhv77uwy5().s[8]++;
router.post('/:id/execute', async (req, res) => {
  /* istanbul ignore next */
  cov_jhv77uwy5().f[0]++;
  const startTime =
  /* istanbul ignore next */
  (cov_jhv77uwy5().s[9]++, Date.now());
  let executionId =
  /* istanbul ignore next */
  (cov_jhv77uwy5().s[10]++, '');
  /* istanbul ignore next */
  cov_jhv77uwy5().s[11]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[12]++, req.params);
    const {
      model
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[13]++, req.body); // Optional model override
    /* istanbul ignore next */
    cov_jhv77uwy5().s[14]++;
    executionId = (0, uuid_1.v4)();
    // Get test case with prompt card
    const testCase =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[15]++, connection_1.db.prepare(`
      SELECT 
        tc.*,
        pc.prompt_template,
        pc.title as prompt_card_title
      FROM test_cases tc
      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id
      WHERE tc.id = ?
    `).get(id));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[16]++;
    if (!testCase) {
      /* istanbul ignore next */
      cov_jhv77uwy5().b[0][0]++;
      cov_jhv77uwy5().s[17]++;
      return res.status(404).json({
        success: false,
        error: 'Test case not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_jhv77uwy5().b[0][1]++;
    }
    // Parse JSON fields
    const inputVariables =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[18]++, JSON.parse(testCase.input_variables));
    const assertions =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[19]++, JSON.parse(
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[1][0]++, testCase.assertions) ||
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[1][1]++, '[]')));
    // Substitute variables in prompt template
    const prompt =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[20]++, llmService_1.llmService.substituteVariables(testCase.prompt_template, inputVariables));
    // Execute prompt with LLM
    const llmResponse =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[21]++, await llmService_1.llmService.generate(prompt, model));
    const llmOutput =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[22]++, llmResponse.response);
    // Validate assertions
    const assertionResults =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[23]++, await llmService_1.llmService.validateAssertions(llmOutput, assertions, {
      prompt: prompt,
      variables: inputVariables,
      model:
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[2][0]++, model) ||
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[2][1]++, llmService_1.llmService.defaultModel),
      executionTime: Date.now() - startTime
    }));
    const allAssertionsPassed =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[24]++, assertionResults.every(result => {
      /* istanbul ignore next */
      cov_jhv77uwy5().f[1]++;
      cov_jhv77uwy5().s[25]++;
      return result.passed;
    }));
    const executionTime =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[26]++, Date.now() - startTime);
    // Store result in database
    const insertResult =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[27]++, connection_1.db.prepare(`
      INSERT INTO test_results (
        test_case_id, 
        execution_id, 
        llm_output, 
        passed, 
        assertion_results, 
        execution_time_ms
      ) VALUES (?, ?, ?, ?, ?, ?)
    `).run(id, executionId, llmOutput, allAssertionsPassed ?
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[3][0]++, 1) :
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[3][1]++, 0), JSON.stringify(assertionResults), executionTime));
    const result =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[28]++, {
      execution_id: executionId,
      test_case_id: parseInt(id),
      passed: allAssertionsPassed,
      llm_output: llmOutput,
      assertion_results: assertionResults,
      execution_time_ms: executionTime,
      model: llmResponse.model,
      prompt_used: prompt
    });
    /* istanbul ignore next */
    cov_jhv77uwy5().s[29]++;
    return res.json({
      success: true,
      data: result
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_jhv77uwy5().s[30]++;
    // Log error but still try to store failed result
    try {
      /* istanbul ignore next */
      cov_jhv77uwy5().s[31]++;
      if (executionId) {
        /* istanbul ignore next */
        cov_jhv77uwy5().b[4][0]++;
        cov_jhv77uwy5().s[32]++;
        connection_1.db.prepare(`
          INSERT INTO test_results (
            test_case_id, 
            execution_id, 
            llm_output, 
            passed, 
            assertion_results, 
            execution_time_ms
          ) VALUES (?, ?, ?, ?, ?, ?)
        `).run(req.params.id, executionId, `ERROR: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[5][0]++, error.message) :
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[5][1]++, 'Unknown error')}`, 0, JSON.stringify([]), Date.now() - startTime);
      } else
      /* istanbul ignore next */
      {
        cov_jhv77uwy5().b[4][1]++;
      }
    } catch (dbError) {
      /* istanbul ignore next */
      cov_jhv77uwy5().s[33]++;
      console.error('Failed to store error result:', dbError);
    }
    /* istanbul ignore next */
    cov_jhv77uwy5().s[34]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[6][1]++, 'Test execution failed'),
      execution_id: executionId
    });
  }
});
/**
 * Execute all test cases for a prompt card
 * POST /api/prompt-cards/:id/execute-all
 */
/* istanbul ignore next */
cov_jhv77uwy5().s[35]++;
router.post('/prompt-cards/:id/execute-all', async (req, res) => {
  /* istanbul ignore next */
  cov_jhv77uwy5().f[2]++;
  const startTime =
  /* istanbul ignore next */
  (cov_jhv77uwy5().s[36]++, Date.now());
  const executionId =
  /* istanbul ignore next */
  (cov_jhv77uwy5().s[37]++, (0, uuid_1.v4)());
  /* istanbul ignore next */
  cov_jhv77uwy5().s[38]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[39]++, req.params);
    const {
      model,
      stopOnFirstFailure =
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[7][0]++, false)
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[40]++, req.body);
    // Get prompt card
    const promptCard =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[41]++, connection_1.db.prepare(`
      SELECT * FROM prompt_cards WHERE id = ?
    `).get(id));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[42]++;
    if (!promptCard) {
      /* istanbul ignore next */
      cov_jhv77uwy5().b[8][0]++;
      cov_jhv77uwy5().s[43]++;
      return res.status(404).json({
        success: false,
        error: 'Prompt card not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_jhv77uwy5().b[8][1]++;
    }
    // Get all test cases for this prompt card
    const testCases =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[44]++, connection_1.db.prepare(`
      SELECT * FROM test_cases WHERE prompt_card_id = ? ORDER BY created_at ASC
    `).all(id));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[45]++;
    if (testCases.length === 0) {
      /* istanbul ignore next */
      cov_jhv77uwy5().b[9][0]++;
      cov_jhv77uwy5().s[46]++;
      return res.status(400).json({
        success: false,
        error: 'No test cases found for this prompt card'
      });
    } else
    /* istanbul ignore next */
    {
      cov_jhv77uwy5().b[9][1]++;
    }
    const results =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[47]++, []);
    let shouldStop =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[48]++, false);
    // Execute each test case
    /* istanbul ignore next */
    cov_jhv77uwy5().s[49]++;
    for (const testCase of testCases) {
      /* istanbul ignore next */
      cov_jhv77uwy5().s[50]++;
      if (shouldStop) {
        /* istanbul ignore next */
        cov_jhv77uwy5().b[10][0]++;
        cov_jhv77uwy5().s[51]++;
        break;
      } else
      /* istanbul ignore next */
      {
        cov_jhv77uwy5().b[10][1]++;
      }
      const testStartTime =
      /* istanbul ignore next */
      (cov_jhv77uwy5().s[52]++, Date.now());
      const testExecutionId =
      /* istanbul ignore next */
      (cov_jhv77uwy5().s[53]++, `${executionId}-${testCase.id}`);
      /* istanbul ignore next */
      cov_jhv77uwy5().s[54]++;
      try {
        // Parse JSON fields
        const inputVariables =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[55]++, JSON.parse(testCase.input_variables));
        const assertions =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[56]++, JSON.parse(
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[11][0]++, testCase.assertions) ||
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[11][1]++, '[]')));
        // Substitute variables in prompt template
        const prompt =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[57]++, llmService_1.llmService.substituteVariables(promptCard.prompt_template, inputVariables));
        // Execute prompt with LLM
        const llmResponse =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[58]++, await llmService_1.llmService.generate(prompt, model));
        const llmOutput =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[59]++, llmResponse.response);
        const testExecutionTime =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[60]++, Date.now() - testStartTime);
        // Validate assertions
        const assertionResults =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[61]++, await llmService_1.llmService.validateAssertions(llmOutput, assertions, {
          prompt: prompt,
          variables: inputVariables,
          model:
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[12][0]++, model) ||
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[12][1]++, llmService_1.llmService.defaultModel),
          executionTime: testExecutionTime
        }));
        const allAssertionsPassed =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[62]++, assertionResults.every(result => {
          /* istanbul ignore next */
          cov_jhv77uwy5().f[3]++;
          cov_jhv77uwy5().s[63]++;
          return result.passed;
        }));
        // Store individual result
        /* istanbul ignore next */
        cov_jhv77uwy5().s[64]++;
        connection_1.db.prepare(`
          INSERT INTO test_results (
            test_case_id, 
            execution_id, 
            llm_output, 
            passed, 
            assertion_results, 
            execution_time_ms
          ) VALUES (?, ?, ?, ?, ?, ?)
        `).run(testCase.id, testExecutionId, llmOutput, allAssertionsPassed ?
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[13][0]++, 1) :
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[13][1]++, 0), JSON.stringify(assertionResults), testExecutionTime);
        const result =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[65]++, {
          execution_id: testExecutionId,
          test_case_id: testCase.id,
          passed: allAssertionsPassed,
          llm_output: llmOutput,
          assertion_results: assertionResults,
          execution_time_ms: testExecutionTime,
          model: llmResponse.model,
          prompt_used: prompt
        });
        /* istanbul ignore next */
        cov_jhv77uwy5().s[66]++;
        results.push(result);
        // Stop on first failure if requested
        /* istanbul ignore next */
        cov_jhv77uwy5().s[67]++;
        if (
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[15][0]++, stopOnFirstFailure) &&
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[15][1]++, !allAssertionsPassed)) {
          /* istanbul ignore next */
          cov_jhv77uwy5().b[14][0]++;
          cov_jhv77uwy5().s[68]++;
          shouldStop = true;
        } else
        /* istanbul ignore next */
        {
          cov_jhv77uwy5().b[14][1]++;
        }
      } catch (testError) {
        // Store failed test result
        const testExecutionTime =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[69]++, Date.now() - testStartTime);
        /* istanbul ignore next */
        cov_jhv77uwy5().s[70]++;
        try {
          /* istanbul ignore next */
          cov_jhv77uwy5().s[71]++;
          connection_1.db.prepare(`
            INSERT INTO test_results (
              test_case_id, 
              execution_id, 
              llm_output, 
              passed, 
              assertion_results, 
              execution_time_ms
            ) VALUES (?, ?, ?, ?, ?, ?)
          `).run(testCase.id, testExecutionId, `ERROR: ${testError instanceof Error ?
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[16][0]++, testError.message) :
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[16][1]++, 'Unknown error')}`, 0, JSON.stringify([]), testExecutionTime);
        } catch (dbError) {
          /* istanbul ignore next */
          cov_jhv77uwy5().s[72]++;
          console.error('Failed to store failed test result:', dbError);
        }
        const errorResult =
        /* istanbul ignore next */
        (cov_jhv77uwy5().s[73]++, {
          execution_id: testExecutionId,
          test_case_id: testCase.id,
          passed: false,
          llm_output: `ERROR: ${testError instanceof Error ?
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[17][0]++, testError.message) :
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[17][1]++, 'Unknown error')}`,
          assertion_results: [],
          execution_time_ms: testExecutionTime,
          model:
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[18][0]++, model) ||
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[18][1]++, 'unknown'),
          prompt_used: 'Error occurred before prompt execution'
        });
        /* istanbul ignore next */
        cov_jhv77uwy5().s[74]++;
        results.push(errorResult);
        // Stop on first failure if requested
        /* istanbul ignore next */
        cov_jhv77uwy5().s[75]++;
        if (stopOnFirstFailure) {
          /* istanbul ignore next */
          cov_jhv77uwy5().b[19][0]++;
          cov_jhv77uwy5().s[76]++;
          shouldStop = true;
        } else
        /* istanbul ignore next */
        {
          cov_jhv77uwy5().b[19][1]++;
        }
      }
    }
    const totalExecutionTime =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[77]++, Date.now() - startTime);
    const passedTests =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[78]++, results.filter(r => {
      /* istanbul ignore next */
      cov_jhv77uwy5().f[4]++;
      cov_jhv77uwy5().s[79]++;
      return r.passed;
    }).length);
    const failedTests =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[80]++, results.length - passedTests);
    const overallPassed =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[81]++, failedTests === 0);
    const batchResult =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[82]++, {
      execution_id: executionId,
      prompt_card_id: parseInt(id),
      total_tests: results.length,
      passed_tests: passedTests,
      failed_tests: failedTests,
      results,
      overall_passed: overallPassed,
      execution_time_ms: totalExecutionTime
    });
    /* istanbul ignore next */
    cov_jhv77uwy5().s[83]++;
    return res.json({
      success: true,
      data: batchResult
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_jhv77uwy5().s[84]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[20][0]++, error.message) :
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[20][1]++, 'Batch execution failed'),
      execution_id: executionId
    });
  }
});
/**
 * Get test execution history for a test case
 * GET /api/test-cases/:id/executions
 */
/* istanbul ignore next */
cov_jhv77uwy5().s[85]++;
router.get('/:id/executions', (req, res) => {
  /* istanbul ignore next */
  cov_jhv77uwy5().f[5]++;
  cov_jhv77uwy5().s[86]++;
  try {
    const {
      id
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[87]++, req.params);
    const page =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[88]++,
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[21][0]++, parseInt(req.query.page)) ||
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[21][1]++, 1));
    const limit =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[89]++,
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[22][0]++, parseInt(req.query.limit)) ||
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[22][1]++, 10));
    const offset =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[90]++, (page - 1) * limit);
    // Verify test case exists
    const testCase =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[91]++, connection_1.db.prepare('SELECT id FROM test_cases WHERE id = ?').get(id));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[92]++;
    if (!testCase) {
      /* istanbul ignore next */
      cov_jhv77uwy5().b[23][0]++;
      cov_jhv77uwy5().s[93]++;
      return res.status(404).json({
        success: false,
        error: 'Test case not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_jhv77uwy5().b[23][1]++;
    }
    // Get total count
    const totalResult =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[94]++, connection_1.db.prepare(`
      SELECT COUNT(*) as total FROM test_results WHERE test_case_id = ?
    `).get(id));
    // Get paginated results
    const results =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[95]++, connection_1.db.prepare(`
      SELECT * FROM test_results 
      WHERE test_case_id = ? 
      ORDER BY created_at DESC 
      LIMIT ? OFFSET ?
    `).all(id, limit, offset));
    const totalPages =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[96]++, Math.ceil(totalResult.total / limit));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[97]++;
    return res.json({
      success: true,
      data: results.map(result => {
        /* istanbul ignore next */
        cov_jhv77uwy5().f[6]++;
        cov_jhv77uwy5().s[98]++;
        return {
          ...result,
          assertion_results: JSON.parse(
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[24][0]++, result.assertion_results) ||
          /* istanbul ignore next */
          (cov_jhv77uwy5().b[24][1]++, '[]')),
          passed: Boolean(result.passed)
        };
      }),
      pagination: {
        page,
        limit,
        total: totalResult.total,
        totalPages,
        hasNext: page < totalPages,
        hasPrev: page > 1
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_jhv77uwy5().s[99]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[25][0]++, error.message) :
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[25][1]++, 'Failed to fetch execution history')
    });
  }
});
/**
 * Get specific test execution result
 * GET /api/test-executions/:executionId
 */
/* istanbul ignore next */
cov_jhv77uwy5().s[100]++;
router.get('/executions/:executionId', (req, res) => {
  /* istanbul ignore next */
  cov_jhv77uwy5().f[7]++;
  cov_jhv77uwy5().s[101]++;
  try {
    const {
      executionId
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[102]++, req.params);
    const result =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[103]++, connection_1.db.prepare(`
      SELECT 
        tr.*,
        tc.name as test_case_name,
        pc.title as prompt_card_title
      FROM test_results tr
      JOIN test_cases tc ON tr.test_case_id = tc.id
      JOIN prompt_cards pc ON tc.prompt_card_id = pc.id
      WHERE tr.execution_id = ?
    `).get(executionId));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[104]++;
    if (!result) {
      /* istanbul ignore next */
      cov_jhv77uwy5().b[26][0]++;
      cov_jhv77uwy5().s[105]++;
      return res.status(404).json({
        success: false,
        error: 'Execution result not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_jhv77uwy5().b[26][1]++;
    }
    cov_jhv77uwy5().s[106]++;
    return res.json({
      success: true,
      data: {
        ...result,
        assertion_results: JSON.parse(
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[27][0]++, result.assertion_results) ||
        /* istanbul ignore next */
        (cov_jhv77uwy5().b[27][1]++, '[]')),
        passed: Boolean(result.passed)
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_jhv77uwy5().s[107]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[28][0]++, error.message) :
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[28][1]++, 'Failed to fetch execution result')
    });
  }
});
/**
 * Execute tests in parallel with queue management
 * POST /api/test-cases/execute-parallel
 */
/* istanbul ignore next */
cov_jhv77uwy5().s[108]++;
router.post('/execute-parallel', async (req, res) => {
  /* istanbul ignore next */
  cov_jhv77uwy5().f[8]++;
  cov_jhv77uwy5().s[109]++;
  try {
    const {
      prompt_card_id,
      test_case_ids,
      model,
      configuration =
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[29][0]++, {
        max_concurrent_tests: 3,
        timeout_per_test: 30000,
        retry_failed_tests: false,
        max_retries: 1,
        resource_limits: {
          memory_mb: 1024,
          cpu_percent: 50
        }
      }),
      priority =
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[30][0]++, 0)
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[110]++, req.body);
    // Validate required fields
    /* istanbul ignore next */
    cov_jhv77uwy5().s[111]++;
    if (
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[32][0]++, !prompt_card_id) ||
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[32][1]++, !test_case_ids) ||
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[32][2]++, !Array.isArray(test_case_ids)) ||
    /* istanbul ignore next */
    (cov_jhv77uwy5().b[32][3]++, test_case_ids.length === 0)) {
      /* istanbul ignore next */
      cov_jhv77uwy5().b[31][0]++;
      cov_jhv77uwy5().s[112]++;
      return res.status(400).json({
        success: false,
        error: 'prompt_card_id and test_case_ids are required'
      });
    } else
    /* istanbul ignore next */
    {
      cov_jhv77uwy5().b[31][1]++;
    }
    // Verify prompt card exists
    const promptCard =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[113]++, connection_1.db.prepare('SELECT id FROM prompt_cards WHERE id = ?').get(prompt_card_id));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[114]++;
    if (!promptCard) {
      /* istanbul ignore next */
      cov_jhv77uwy5().b[33][0]++;
      cov_jhv77uwy5().s[115]++;
      return res.status(404).json({
        success: false,
        error: 'Prompt card not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_jhv77uwy5().b[33][1]++;
    }
    // Verify test cases exist
    const placeholders =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[116]++, test_case_ids.map(() => {
      /* istanbul ignore next */
      cov_jhv77uwy5().f[9]++;
      cov_jhv77uwy5().s[117]++;
      return '?';
    }).join(','));
    const testCases =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[118]++, connection_1.db.prepare(`
      SELECT id FROM test_cases WHERE id IN (${placeholders}) AND prompt_card_id = ?
    `).all(...test_case_ids, prompt_card_id));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[119]++;
    if (testCases.length !== test_case_ids.length) {
      /* istanbul ignore next */
      cov_jhv77uwy5().b[34][0]++;
      cov_jhv77uwy5().s[120]++;
      return res.status(400).json({
        success: false,
        error: 'Some test cases not found or do not belong to the specified prompt card'
      });
    } else
    /* istanbul ignore next */
    {
      cov_jhv77uwy5().b[34][1]++;
    }
    // Queue the execution
    const queueManager =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[121]++, req.app.locals.queueManager);
    const executionId =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[122]++, await queueManager.queueTestExecution({
      prompt_card_id,
      test_case_ids,
      model:
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[35][0]++, model) ||
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[35][1]++, 'llama3.1'),
      configuration,
      priority
    }));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[123]++;
    return res.json({
      success: true,
      data: {
        execution_id: executionId,
        status: 'queued',
        message: 'Test execution queued successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_jhv77uwy5().s[124]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[36][0]++, error.message) :
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[36][1]++, 'Failed to queue test execution')
    });
  }
});
/**
 * Get progress for a test execution
 * GET /api/test-cases/executions/:executionId/progress
 */
/* istanbul ignore next */
cov_jhv77uwy5().s[125]++;
router.get('/executions/:executionId/progress', async (req, res) => {
  /* istanbul ignore next */
  cov_jhv77uwy5().f[10]++;
  cov_jhv77uwy5().s[126]++;
  try {
    const {
      executionId
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[127]++, req.params);
    const progressService =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[128]++, req.app.locals.progressService);
    const progress =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[129]++, await progressService.getProgress(executionId));
    /* istanbul ignore next */
    cov_jhv77uwy5().s[130]++;
    if (!progress) {
      /* istanbul ignore next */
      cov_jhv77uwy5().b[37][0]++;
      cov_jhv77uwy5().s[131]++;
      return res.status(404).json({
        success: false,
        error: 'Execution progress not found'
      });
    } else
    /* istanbul ignore next */
    {
      cov_jhv77uwy5().b[37][1]++;
    }
    cov_jhv77uwy5().s[132]++;
    return res.json({
      success: true,
      data: progress
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_jhv77uwy5().s[133]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[38][0]++, error.message) :
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[38][1]++, 'Failed to fetch execution progress')
    });
  }
});
/**
 * Cancel a test execution
 * POST /api/test-cases/executions/:executionId/cancel
 */
/* istanbul ignore next */
cov_jhv77uwy5().s[134]++;
router.post('/executions/:executionId/cancel', async (req, res) => {
  /* istanbul ignore next */
  cov_jhv77uwy5().f[11]++;
  cov_jhv77uwy5().s[135]++;
  try {
    const {
      executionId
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[136]++, req.params);
    const {
      reason =
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[39][0]++, 'User requested cancellation')
    } =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[137]++, req.body);
    const queueManager =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[138]++, req.app.locals.queueManager);
    /* istanbul ignore next */
    cov_jhv77uwy5().s[139]++;
    await queueManager.cancelTestExecution(executionId, reason);
    /* istanbul ignore next */
    cov_jhv77uwy5().s[140]++;
    return res.json({
      success: true,
      data: {
        execution_id: executionId,
        status: 'cancelled',
        message: 'Test execution cancelled successfully'
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_jhv77uwy5().s[141]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[40][0]++, error.message) :
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[40][1]++, 'Failed to cancel test execution')
    });
  }
});
/**
 * Get queue statistics
 * GET /api/test-cases/queue/stats
 */
/* istanbul ignore next */
cov_jhv77uwy5().s[142]++;
router.get('/queue/stats', async (req, res) => {
  /* istanbul ignore next */
  cov_jhv77uwy5().f[12]++;
  cov_jhv77uwy5().s[143]++;
  try {
    const queueManager =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[144]++, req.app.locals.queueManager);
    const stats =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[145]++, await queueManager.getQueueStats());
    /* istanbul ignore next */
    cov_jhv77uwy5().s[146]++;
    return res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_jhv77uwy5().s[147]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[41][0]++, error.message) :
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[41][1]++, 'Failed to fetch queue statistics')
    });
  }
});
/**
 * Get active test executions
 * GET /api/test-cases/executions/active
 */
/* istanbul ignore next */
cov_jhv77uwy5().s[148]++;
router.get('/executions/active', async (req, res) => {
  /* istanbul ignore next */
  cov_jhv77uwy5().f[13]++;
  cov_jhv77uwy5().s[149]++;
  try {
    const progressService =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[150]++, req.app.locals.progressService);
    const activeExecutions =
    /* istanbul ignore next */
    (cov_jhv77uwy5().s[151]++, await progressService.getActiveExecutions());
    /* istanbul ignore next */
    cov_jhv77uwy5().s[152]++;
    return res.json({
      success: true,
      data: activeExecutions
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_jhv77uwy5().s[153]++;
    return res.status(500).json({
      success: false,
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[42][0]++, error.message) :
      /* istanbul ignore next */
      (cov_jhv77uwy5().b[42][1]++, 'Failed to fetch active executions')
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,