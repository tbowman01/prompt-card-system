fa53d5e7a9f3e47e59161f8c498e3df9
"use strict";

/* istanbul ignore next */
function cov_298pe92cl6() {
  var path = "/workspaces/prompt-card-system/backend/src/routes/health-enhanced.ts";
  var hash = "13c76ad70fc6505acde8a31bcf262cdb49d71ee5";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/backend/src/routes/health-enhanced.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 22
        },
        end: {
          line: 4,
          column: 1
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 62
        }
      },
      "2": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 62
        }
      },
      "3": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 6,
          column: 38
        }
      },
      "4": {
        start: {
          line: 7,
          column: 18
        },
        end: {
          line: 7,
          column: 36
        }
      },
      "5": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 54
        }
      },
      "6": {
        start: {
          line: 9,
          column: 19
        },
        end: {
          line: 9,
          column: 50
        }
      },
      "7": {
        start: {
          line: 10,
          column: 16
        },
        end: {
          line: 10,
          column: 32
        }
      },
      "8": {
        start: {
          line: 11,
          column: 16
        },
        end: {
          line: 11,
          column: 49
        }
      },
      "9": {
        start: {
          line: 12,
          column: 13
        },
        end: {
          line: 12,
          column: 43
        }
      },
      "10": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 38
        }
      },
      "11": {
        start: {
          line: 14,
          column: 0
        },
        end: {
          line: 14,
          column: 38
        }
      },
      "12": {
        start: {
          line: 17,
          column: 22
        },
        end: {
          line: 17,
          column: 32
        }
      },
      "13": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "14": {
        start: {
          line: 19,
          column: 23
        },
        end: {
          line: 22,
          column: 10
        }
      },
      "15": {
        start: {
          line: 21,
          column: 39
        },
        end: {
          line: 21,
          column: 107
        }
      },
      "16": {
        start: {
          line: 21,
          column: 56
        },
        end: {
          line: 21,
          column: 97
        }
      },
      "17": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 26,
          column: 10
        }
      },
      "18": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 33,
          column: 10
        }
      },
      "19": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      "20": {
        start: {
          line: 39,
          column: 23
        },
        end: {
          line: 39,
          column: 75
        }
      },
      "21": {
        start: {
          line: 41,
          column: 22
        },
        end: {
          line: 45,
          column: 9
        }
      },
      "22": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 53,
          column: 10
        }
      },
      "23": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 59,
          column: 10
        }
      },
      "24": {
        start: {
          line: 64,
          column: 21
        },
        end: {
          line: 64,
          column: 66
        }
      },
      "25": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 89,
          column: 5
        }
      },
      "26": {
        start: {
          line: 66,
          column: 23
        },
        end: {
          line: 66,
          column: 67
        }
      },
      "27": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 31
        }
      },
      "28": {
        start: {
          line: 68,
          column: 27
        },
        end: {
          line: 68,
          column: 46
        }
      },
      "29": {
        start: {
          line: 69,
          column: 21
        },
        end: {
          line: 69,
          column: 48
        }
      },
      "30": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 34
        }
      },
      "31": {
        start: {
          line: 72,
          column: 29
        },
        end: {
          line: 72,
          column: 61
        }
      },
      "32": {
        start: {
          line: 73,
          column: 24
        },
        end: {
          line: 73,
          column: 73
        }
      },
      "33": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 81,
          column: 10
        }
      },
      "34": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 88,
          column: 10
        }
      },
      "35": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 74
        }
      },
      "36": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "37": {
        start: {
          line: 96,
          column: 32
        },
        end: {
          line: 96,
          column: 104
        }
      },
      "38": {
        start: {
          line: 98,
          column: 31
        },
        end: {
          line: 98,
          column: 100
        }
      },
      "39": {
        start: {
          line: 99,
          column: 23
        },
        end: {
          line: 99,
          column: 55
        }
      },
      "40": {
        start: {
          line: 101,
          column: 29
        },
        end: {
          line: 101,
          column: 33
        }
      },
      "41": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 115,
          column: 9
        }
      },
      "42": {
        start: {
          line: 103,
          column: 12
        },
        end: {
          line: 114,
          column: 13
        }
      },
      "43": {
        start: {
          line: 104,
          column: 37
        },
        end: {
          line: 109,
          column: 37
        }
      },
      "44": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 98
        }
      },
      "45": {
        start: {
          line: 113,
          column: 16
        },
        end: {
          line: 113,
          column: 42
        }
      },
      "46": {
        start: {
          line: 116,
          column: 8
        },
        end: {
          line: 130,
          column: 10
        }
      },
      "47": {
        start: {
          line: 123,
          column: 43
        },
        end: {
          line: 127,
          column: 17
        }
      },
      "48": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 137,
          column: 10
        }
      },
      "49": {
        start: {
          line: 142,
          column: 4
        },
        end: {
          line: 164,
          column: 5
        }
      },
      "50": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 148,
          column: 9
        }
      },
      "51": {
        start: {
          line: 144,
          column: 12
        },
        end: {
          line: 147,
          column: 14
        }
      },
      "52": {
        start: {
          line: 149,
          column: 24
        },
        end: {
          line: 149,
          column: 47
        }
      },
      "53": {
        start: {
          line: 150,
          column: 8
        },
        end: {
          line: 157,
          column: 10
        }
      },
      "54": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 163,
          column: 10
        }
      },
      "55": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 209,
          column: 5
        }
      },
      "56": {
        start: {
          line: 169,
          column: 23
        },
        end: {
          line: 169,
          column: 39
        }
      },
      "57": {
        start: {
          line: 170,
          column: 28
        },
        end: {
          line: 170,
          column: 49
        }
      },
      "58": {
        start: {
          line: 171,
          column: 28
        },
        end: {
          line: 171,
          column: 50
        }
      },
      "59": {
        start: {
          line: 173,
          column: 28
        },
        end: {
          line: 173,
          column: 51
        }
      },
      "60": {
        start: {
          line: 174,
          column: 27
        },
        end: {
          line: 174,
          column: 49
        }
      },
      "61": {
        start: {
          line: 175,
          column: 34
        },
        end: {
          line: 175,
          column: 82
        }
      },
      "62": {
        start: {
          line: 177,
          column: 21
        },
        end: {
          line: 177,
          column: 30
        }
      },
      "63": {
        start: {
          line: 178,
          column: 8
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "64": {
        start: {
          line: 179,
          column: 12
        },
        end: {
          line: 179,
          column: 33
        }
      },
      "65": {
        start: {
          line: 181,
          column: 13
        },
        end: {
          line: 183,
          column: 9
        }
      },
      "66": {
        start: {
          line: 182,
          column: 12
        },
        end: {
          line: 182,
          column: 32
        }
      },
      "67": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 202,
          column: 10
        }
      },
      "68": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 208,
          column: 10
        }
      },
      "69": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 243,
          column: 5
        }
      },
      "70": {
        start: {
          line: 214,
          column: 32
        },
        end: {
          line: 214,
          column: 79
        }
      },
      "71": {
        start: {
          line: 215,
          column: 27
        },
        end: {
          line: 215,
          column: 73
        }
      },
      "72": {
        start: {
          line: 216,
          column: 34
        },
        end: {
          line: 216,
          column: 85
        }
      },
      "73": {
        start: {
          line: 218,
          column: 21
        },
        end: {
          line: 218,
          column: 30
        }
      },
      "74": {
        start: {
          line: 219,
          column: 8
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "75": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 33
        }
      },
      "76": {
        start: {
          line: 222,
          column: 13
        },
        end: {
          line: 224,
          column: 9
        }
      },
      "77": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 223,
          column: 32
        }
      },
      "78": {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 236,
          column: 10
        }
      },
      "79": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 242,
          column: 10
        }
      },
      "80": {
        start: {
          line: 246,
          column: 0
        },
        end: {
          line: 298,
          column: 3
        }
      },
      "81": {
        start: {
          line: 247,
          column: 21
        },
        end: {
          line: 247,
          column: 50
        }
      },
      "82": {
        start: {
          line: 248,
          column: 22
        },
        end: {
          line: 248,
          column: 32
        }
      },
      "83": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 297,
          column: 5
        }
      },
      "84": {
        start: {
          line: 251,
          column: 71
        },
        end: {
          line: 258,
          column: 10
        }
      },
      "85": {
        start: {
          line: 255,
          column: 50
        },
        end: {
          line: 255,
          column: 83
        }
      },
      "86": {
        start: {
          line: 259,
          column: 25
        },
        end: {
          line: 266,
          column: 9
        }
      },
      "87": {
        start: {
          line: 268,
          column: 25
        },
        end: {
          line: 268,
          column: 67
        }
      },
      "88": {
        start: {
          line: 268,
          column: 58
        },
        end: {
          line: 268,
          column: 66
        }
      },
      "89": {
        start: {
          line: 269,
          column: 28
        },
        end: {
          line: 269,
          column: 37
        }
      },
      "90": {
        start: {
          line: 270,
          column: 8
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "91": {
        start: {
          line: 271,
          column: 12
        },
        end: {
          line: 271,
          column: 40
        }
      },
      "92": {
        start: {
          line: 273,
          column: 13
        },
        end: {
          line: 275,
          column: 9
        }
      },
      "93": {
        start: {
          line: 274,
          column: 12
        },
        end: {
          line: 274,
          column: 39
        }
      },
      "94": {
        start: {
          line: 276,
          column: 25
        },
        end: {
          line: 286,
          column: 9
        }
      },
      "95": {
        start: {
          line: 281,
          column: 110
        },
        end: {
          line: 285,
          column: 18
        }
      },
      "96": {
        start: {
          line: 287,
          column: 27
        },
        end: {
          line: 288,
          column: 52
        }
      },
      "97": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 289,
          column: 46
        }
      },
      "98": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 296,
          column: 11
        }
      },
      "99": {
        start: {
          line: 300,
          column: 0
        },
        end: {
          line: 303,
          column: 3
        }
      },
      "100": {
        start: {
          line: 301,
          column: 19
        },
        end: {
          line: 301,
          column: 70
        }
      },
      "101": {
        start: {
          line: 302,
          column: 4
        },
        end: {
          line: 302,
          column: 69
        }
      },
      "102": {
        start: {
          line: 304,
          column: 0
        },
        end: {
          line: 307,
          column: 3
        }
      },
      "103": {
        start: {
          line: 305,
          column: 19
        },
        end: {
          line: 305,
          column: 64
        }
      },
      "104": {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 306,
          column: 69
        }
      },
      "105": {
        start: {
          line: 308,
          column: 0
        },
        end: {
          line: 311,
          column: 3
        }
      },
      "106": {
        start: {
          line: 309,
          column: 19
        },
        end: {
          line: 309,
          column: 66
        }
      },
      "107": {
        start: {
          line: 310,
          column: 4
        },
        end: {
          line: 310,
          column: 69
        }
      },
      "108": {
        start: {
          line: 312,
          column: 0
        },
        end: {
          line: 315,
          column: 3
        }
      },
      "109": {
        start: {
          line: 313,
          column: 19
        },
        end: {
          line: 313,
          column: 97
        }
      },
      "110": {
        start: {
          line: 313,
          column: 63
        },
        end: {
          line: 313,
          column: 96
        }
      },
      "111": {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 314,
          column: 69
        }
      },
      "112": {
        start: {
          line: 316,
          column: 0
        },
        end: {
          line: 319,
          column: 3
        }
      },
      "113": {
        start: {
          line: 317,
          column: 19
        },
        end: {
          line: 317,
          column: 66
        }
      },
      "114": {
        start: {
          line: 318,
          column: 4
        },
        end: {
          line: 318,
          column: 69
        }
      },
      "115": {
        start: {
          line: 320,
          column: 0
        },
        end: {
          line: 323,
          column: 3
        }
      },
      "116": {
        start: {
          line: 321,
          column: 19
        },
        end: {
          line: 321,
          column: 70
        }
      },
      "117": {
        start: {
          line: 322,
          column: 4
        },
        end: {
          line: 322,
          column: 69
        }
      },
      "118": {
        start: {
          line: 325,
          column: 0
        },
        end: {
          line: 339,
          column: 3
        }
      },
      "119": {
        start: {
          line: 327,
          column: 41
        },
        end: {
          line: 331,
          column: 6
        }
      },
      "120": {
        start: {
          line: 332,
          column: 20
        },
        end: {
          line: 334,
          column: 39
        }
      },
      "121": {
        start: {
          line: 335,
          column: 4
        },
        end: {
          line: 338,
          column: 7
        }
      },
      "122": {
        start: {
          line: 341,
          column: 0
        },
        end: {
          line: 348,
          column: 3
        }
      },
      "123": {
        start: {
          line: 343,
          column: 4
        },
        end: {
          line: 347,
          column: 7
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 2,
            column: 57
          }
        },
        loc: {
          start: {
            line: 2,
            column: 71
          },
          end: {
            line: 4,
            column: 1
          }
        },
        line: 2
      },
      "1": {
        name: "performHealthCheck",
        decl: {
          start: {
            line: 16,
            column: 15
          },
          end: {
            line: 16,
            column: 33
          }
        },
        loc: {
          start: {
            line: 16,
            column: 65
          },
          end: {
            line: 35,
            column: 1
          }
        },
        line: 16
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 21,
            column: 24
          },
          end: {
            line: 21,
            column: 25
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 21,
            column: 107
          }
        },
        line: 21
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 21,
            column: 50
          },
          end: {
            line: 21,
            column: 51
          }
        },
        loc: {
          start: {
            line: 21,
            column: 56
          },
          end: {
            line: 21,
            column: 97
          }
        },
        line: 21
      },
      "4": {
        name: "checkDatabase",
        decl: {
          start: {
            line: 37,
            column: 15
          },
          end: {
            line: 37,
            column: 28
          }
        },
        loc: {
          start: {
            line: 37,
            column: 31
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 37
      },
      "5": {
        name: "checkRedis",
        decl: {
          start: {
            line: 63,
            column: 15
          },
          end: {
            line: 63,
            column: 25
          }
        },
        loc: {
          start: {
            line: 63,
            column: 28
          },
          end: {
            line: 90,
            column: 1
          }
        },
        line: 63
      },
      "6": {
        name: "checkOllama",
        decl: {
          start: {
            line: 92,
            column: 15
          },
          end: {
            line: 92,
            column: 26
          }
        },
        loc: {
          start: {
            line: 92,
            column: 29
          },
          end: {
            line: 139,
            column: 1
          }
        },
        line: 92
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 123,
            column: 35
          },
          end: {
            line: 123,
            column: 36
          }
        },
        loc: {
          start: {
            line: 123,
            column: 43
          },
          end: {
            line: 127,
            column: 17
          }
        },
        line: 123
      },
      "8": {
        name: "checkWebSocket",
        decl: {
          start: {
            line: 141,
            column: 15
          },
          end: {
            line: 141,
            column: 29
          }
        },
        loc: {
          start: {
            line: 141,
            column: 34
          },
          end: {
            line: 165,
            column: 1
          }
        },
        line: 141
      },
      "9": {
        name: "checkSystem",
        decl: {
          start: {
            line: 167,
            column: 15
          },
          end: {
            line: 167,
            column: 26
          }
        },
        loc: {
          start: {
            line: 167,
            column: 29
          },
          end: {
            line: 210,
            column: 1
          }
        },
        line: 167
      },
      "10": {
        name: "checkSecurity",
        decl: {
          start: {
            line: 212,
            column: 15
          },
          end: {
            line: 212,
            column: 28
          }
        },
        loc: {
          start: {
            line: 212,
            column: 31
          },
          end: {
            line: 244,
            column: 1
          }
        },
        line: 212
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 246,
            column: 16
          },
          end: {
            line: 246,
            column: 17
          }
        },
        loc: {
          start: {
            line: 246,
            column: 36
          },
          end: {
            line: 298,
            column: 1
          }
        },
        line: 246
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 255,
            column: 44
          },
          end: {
            line: 255,
            column: 45
          }
        },
        loc: {
          start: {
            line: 255,
            column: 50
          },
          end: {
            line: 255,
            column: 83
          }
        },
        line: 255
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 268,
            column: 53
          },
          end: {
            line: 268,
            column: 54
          }
        },
        loc: {
          start: {
            line: 268,
            column: 58
          },
          end: {
            line: 268,
            column: 66
          }
        },
        line: 268
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 281,
            column: 92
          },
          end: {
            line: 281,
            column: 93
          }
        },
        loc: {
          start: {
            line: 281,
            column: 110
          },
          end: {
            line: 285,
            column: 18
          }
        },
        line: 281
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 300,
            column: 24
          },
          end: {
            line: 300,
            column: 25
          }
        },
        loc: {
          start: {
            line: 300,
            column: 44
          },
          end: {
            line: 303,
            column: 1
          }
        },
        line: 300
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 304,
            column: 21
          },
          end: {
            line: 304,
            column: 22
          }
        },
        loc: {
          start: {
            line: 304,
            column: 41
          },
          end: {
            line: 307,
            column: 1
          }
        },
        line: 304
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 308,
            column: 22
          },
          end: {
            line: 308,
            column: 23
          }
        },
        loc: {
          start: {
            line: 308,
            column: 42
          },
          end: {
            line: 311,
            column: 1
          }
        },
        line: 308
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 312,
            column: 25
          },
          end: {
            line: 312,
            column: 26
          }
        },
        loc: {
          start: {
            line: 312,
            column: 45
          },
          end: {
            line: 315,
            column: 1
          }
        },
        line: 312
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 313,
            column: 57
          },
          end: {
            line: 313,
            column: 58
          }
        },
        loc: {
          start: {
            line: 313,
            column: 63
          },
          end: {
            line: 313,
            column: 96
          }
        },
        line: 313
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 316,
            column: 22
          },
          end: {
            line: 316,
            column: 23
          }
        },
        loc: {
          start: {
            line: 316,
            column: 42
          },
          end: {
            line: 319,
            column: 1
          }
        },
        line: 316
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 320,
            column: 24
          },
          end: {
            line: 320,
            column: 25
          }
        },
        loc: {
          start: {
            line: 320,
            column: 44
          },
          end: {
            line: 323,
            column: 1
          }
        },
        line: 320
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 325,
            column: 21
          },
          end: {
            line: 325,
            column: 22
          }
        },
        loc: {
          start: {
            line: 325,
            column: 41
          },
          end: {
            line: 339,
            column: 1
          }
        },
        line: 325
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 341,
            column: 20
          },
          end: {
            line: 341,
            column: 21
          }
        },
        loc: {
          start: {
            line: 341,
            column: 34
          },
          end: {
            line: 348,
            column: 1
          }
        },
        line: 341
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 22
          },
          end: {
            line: 4,
            column: 1
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 2,
            column: 23
          },
          end: {
            line: 2,
            column: 27
          }
        }, {
          start: {
            line: 2,
            column: 31
          },
          end: {
            line: 2,
            column: 51
          }
        }, {
          start: {
            line: 2,
            column: 56
          },
          end: {
            line: 4,
            column: 1
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 3,
            column: 11
          },
          end: {
            line: 3,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 3,
            column: 37
          },
          end: {
            line: 3,
            column: 40
          }
        }, {
          start: {
            line: 3,
            column: 43
          },
          end: {
            line: 3,
            column: 61
          }
        }],
        line: 3
      },
      "2": {
        loc: {
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 33
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 3,
            column: 12
          },
          end: {
            line: 3,
            column: 15
          }
        }, {
          start: {
            line: 3,
            column: 19
          },
          end: {
            line: 3,
            column: 33
          }
        }],
        line: 3
      },
      "3": {
        loc: {
          start: {
            line: 16,
            column: 49
          },
          end: {
            line: 16,
            column: 63
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 16,
            column: 59
          },
          end: {
            line: 16,
            column: 63
          }
        }],
        line: 16
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 21
          },
          end: {
            line: 31,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 46
          },
          end: {
            line: 31,
            column: 59
          }
        }, {
          start: {
            line: 31,
            column: 62
          },
          end: {
            line: 31,
            column: 77
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 47,
            column: 20
          },
          end: {
            line: 47,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 47,
            column: 44
          },
          end: {
            line: 47,
            column: 53
          }
        }, {
          start: {
            line: 47,
            column: 56
          },
          end: {
            line: 47,
            column: 67
          }
        }],
        line: 47
      },
      "6": {
        loc: {
          start: {
            line: 58,
            column: 21
          },
          end: {
            line: 58,
            column: 90
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 58,
            column: 46
          },
          end: {
            line: 58,
            column: 59
          }
        }, {
          start: {
            line: 58,
            column: 62
          },
          end: {
            line: 58,
            column: 90
          }
        }],
        line: 58
      },
      "7": {
        loc: {
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 42
          }
        }, {
          start: {
            line: 64,
            column: 46
          },
          end: {
            line: 64,
            column: 66
          }
        }],
        line: 64
      },
      "8": {
        loc: {
          start: {
            line: 73,
            column: 24
          },
          end: {
            line: 73,
            column: 73
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 73,
            column: 61
          }
        }, {
          start: {
            line: 73,
            column: 64
          },
          end: {
            line: 73,
            column: 73
          }
        }],
        line: 73
      },
      "9": {
        loc: {
          start: {
            line: 75,
            column: 20
          },
          end: {
            line: 75,
            column: 67
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 75,
            column: 44
          },
          end: {
            line: 75,
            column: 53
          }
        }, {
          start: {
            line: 75,
            column: 56
          },
          end: {
            line: 75,
            column: 67
          }
        }],
        line: 75
      },
      "10": {
        loc: {
          start: {
            line: 86,
            column: 49
          },
          end: {
            line: 86,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 86,
            column: 74
          },
          end: {
            line: 86,
            column: 87
          }
        }, {
          start: {
            line: 86,
            column: 90
          },
          end: {
            line: 86,
            column: 105
          }
        }],
        line: 86
      },
      "11": {
        loc: {
          start: {
            line: 93,
            column: 22
          },
          end: {
            line: 93,
            column: 74
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 93,
            column: 22
          },
          end: {
            line: 93,
            column: 49
          }
        }, {
          start: {
            line: 93,
            column: 53
          },
          end: {
            line: 93,
            column: 74
          }
        }],
        line: 93
      },
      "12": {
        loc: {
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 99,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 99,
            column: 23
          },
          end: {
            line: 99,
            column: 49
          }
        }, {
          start: {
            line: 99,
            column: 53
          },
          end: {
            line: 99,
            column: 55
          }
        }],
        line: 99
      },
      "13": {
        loc: {
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 8
          },
          end: {
            line: 115,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      },
      "14": {
        loc: {
          start: {
            line: 110,
            column: 33
          },
          end: {
            line: 110,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 110,
            column: 78
          },
          end: {
            line: 110,
            column: 86
          }
        }, {
          start: {
            line: 110,
            column: 89
          },
          end: {
            line: 110,
            column: 97
          }
        }],
        line: 110
      },
      "15": {
        loc: {
          start: {
            line: 117,
            column: 20
          },
          end: {
            line: 117,
            column: 62
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 117,
            column: 40
          },
          end: {
            line: 117,
            column: 49
          }
        }, {
          start: {
            line: 117,
            column: 52
          },
          end: {
            line: 117,
            column: 62
          }
        }],
        line: 117
      },
      "16": {
        loc: {
          start: {
            line: 118,
            column: 21
          },
          end: {
            line: 118,
            column: 76
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 118,
            column: 43
          },
          end: {
            line: 118,
            column: 64
          }
        }, {
          start: {
            line: 118,
            column: 67
          },
          end: {
            line: 118,
            column: 76
          }
        }],
        line: 118
      },
      "17": {
        loc: {
          start: {
            line: 135,
            column: 50
          },
          end: {
            line: 135,
            column: 106
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 135,
            column: 75
          },
          end: {
            line: 135,
            column: 88
          }
        }, {
          start: {
            line: 135,
            column: 91
          },
          end: {
            line: 135,
            column: 106
          }
        }],
        line: 135
      },
      "18": {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 148,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "19": {
        loc: {
          start: {
            line: 162,
            column: 21
          },
          end: {
            line: 162,
            column: 86
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 162,
            column: 46
          },
          end: {
            line: 162,
            column: 59
          }
        }, {
          start: {
            line: 162,
            column: 62
          },
          end: {
            line: 162,
            column: 86
          }
        }],
        line: 162
      },
      "20": {
        loc: {
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 178,
            column: 8
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: 181,
            column: 13
          },
          end: {
            line: 183,
            column: 9
          }
        }],
        line: 178
      },
      "21": {
        loc: {
          start: {
            line: 181,
            column: 13
          },
          end: {
            line: 183,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 13
          },
          end: {
            line: 183,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "22": {
        loc: {
          start: {
            line: 181,
            column: 17
          },
          end: {
            line: 181,
            column: 90
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 181,
            column: 17
          },
          end: {
            line: 181,
            column: 39
          }
        }, {
          start: {
            line: 181,
            column: 43
          },
          end: {
            line: 181,
            column: 90
          }
        }],
        line: 181
      },
      "23": {
        loc: {
          start: {
            line: 207,
            column: 21
          },
          end: {
            line: 207,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 207,
            column: 46
          },
          end: {
            line: 207,
            column: 59
          }
        }, {
          start: {
            line: 207,
            column: 62
          },
          end: {
            line: 207,
            column: 83
          }
        }],
        line: 207
      },
      "24": {
        loc: {
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 8
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: 222,
            column: 13
          },
          end: {
            line: 224,
            column: 9
          }
        }],
        line: 219
      },
      "25": {
        loc: {
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 82
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 12
          },
          end: {
            line: 219,
            column: 55
          }
        }, {
          start: {
            line: 219,
            column: 59
          },
          end: {
            line: 219,
            column: 82
          }
        }],
        line: 219
      },
      "26": {
        loc: {
          start: {
            line: 222,
            column: 13
          },
          end: {
            line: 224,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 13
          },
          end: {
            line: 224,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "27": {
        loc: {
          start: {
            line: 222,
            column: 17
          },
          end: {
            line: 222,
            column: 95
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 222,
            column: 17
          },
          end: {
            line: 222,
            column: 55
          }
        }, {
          start: {
            line: 222,
            column: 59
          },
          end: {
            line: 222,
            column: 95
          }
        }],
        line: 222
      },
      "28": {
        loc: {
          start: {
            line: 241,
            column: 21
          },
          end: {
            line: 241,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 241,
            column: 46
          },
          end: {
            line: 241,
            column: 59
          }
        }, {
          start: {
            line: 241,
            column: 62
          },
          end: {
            line: 241,
            column: 85
          }
        }],
        line: 241
      },
      "29": {
        loc: {
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 8
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: 273,
            column: 13
          },
          end: {
            line: 275,
            column: 9
          }
        }],
        line: 270
      },
      "30": {
        loc: {
          start: {
            line: 273,
            column: 13
          },
          end: {
            line: 275,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 13
          },
          end: {
            line: 275,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "31": {
        loc: {
          start: {
            line: 280,
            column: 25
          },
          end: {
            line: 280,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 280,
            column: 25
          },
          end: {
            line: 280,
            column: 45
          }
        }, {
          start: {
            line: 280,
            column: 49
          },
          end: {
            line: 280,
            column: 62
          }
        }],
        line: 280
      },
      "32": {
        loc: {
          start: {
            line: 281,
            column: 22
          },
          end: {
            line: 285,
            column: 20
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 281,
            column: 33
          },
          end: {
            line: 281,
            column: 41
          }
        }, {
          start: {
            line: 281,
            column: 44
          },
          end: {
            line: 285,
            column: 20
          }
        }],
        line: 281
      },
      "33": {
        loc: {
          start: {
            line: 287,
            column: 27
          },
          end: {
            line: 288,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 287,
            column: 57
          },
          end: {
            line: 287,
            column: 60
          }
        }, {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 288,
            column: 52
          }
        }],
        line: 287
      },
      "34": {
        loc: {
          start: {
            line: 288,
            column: 12
          },
          end: {
            line: 288,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 288,
            column: 43
          },
          end: {
            line: 288,
            column: 46
          }
        }, {
          start: {
            line: 288,
            column: 49
          },
          end: {
            line: 288,
            column: 52
          }
        }],
        line: 288
      },
      "35": {
        loc: {
          start: {
            line: 294,
            column: 19
          },
          end: {
            line: 294,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 294,
            column: 44
          },
          end: {
            line: 294,
            column: 57
          }
        }, {
          start: {
            line: 294,
            column: 60
          },
          end: {
            line: 294,
            column: 81
          }
        }],
        line: 294
      },
      "36": {
        loc: {
          start: {
            line: 302,
            column: 15
          },
          end: {
            line: 302,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 302,
            column: 45
          },
          end: {
            line: 302,
            column: 48
          }
        }, {
          start: {
            line: 302,
            column: 51
          },
          end: {
            line: 302,
            column: 54
          }
        }],
        line: 302
      },
      "37": {
        loc: {
          start: {
            line: 306,
            column: 15
          },
          end: {
            line: 306,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 306,
            column: 45
          },
          end: {
            line: 306,
            column: 48
          }
        }, {
          start: {
            line: 306,
            column: 51
          },
          end: {
            line: 306,
            column: 54
          }
        }],
        line: 306
      },
      "38": {
        loc: {
          start: {
            line: 310,
            column: 15
          },
          end: {
            line: 310,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 310,
            column: 45
          },
          end: {
            line: 310,
            column: 48
          }
        }, {
          start: {
            line: 310,
            column: 51
          },
          end: {
            line: 310,
            column: 54
          }
        }],
        line: 310
      },
      "39": {
        loc: {
          start: {
            line: 314,
            column: 15
          },
          end: {
            line: 314,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 314,
            column: 45
          },
          end: {
            line: 314,
            column: 48
          }
        }, {
          start: {
            line: 314,
            column: 51
          },
          end: {
            line: 314,
            column: 54
          }
        }],
        line: 314
      },
      "40": {
        loc: {
          start: {
            line: 318,
            column: 15
          },
          end: {
            line: 318,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 318,
            column: 45
          },
          end: {
            line: 318,
            column: 48
          }
        }, {
          start: {
            line: 318,
            column: 51
          },
          end: {
            line: 318,
            column: 54
          }
        }],
        line: 318
      },
      "41": {
        loc: {
          start: {
            line: 322,
            column: 15
          },
          end: {
            line: 322,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 45
          },
          end: {
            line: 322,
            column: 48
          }
        }, {
          start: {
            line: 322,
            column: 51
          },
          end: {
            line: 322,
            column: 54
          }
        }],
        line: 322
      },
      "42": {
        loc: {
          start: {
            line: 332,
            column: 20
          },
          end: {
            line: 334,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 332,
            column: 20
          },
          end: {
            line: 332,
            column: 49
          }
        }, {
          start: {
            line: 333,
            column: 9
          },
          end: {
            line: 333,
            column: 36
          }
        }, {
          start: {
            line: 333,
            column: 40
          },
          end: {
            line: 333,
            column: 68
          }
        }, {
          start: {
            line: 334,
            column: 8
          },
          end: {
            line: 334,
            column: 39
          }
        }],
        line: 332
      },
      "43": {
        loc: {
          start: {
            line: 335,
            column: 15
          },
          end: {
            line: 335,
            column: 34
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 335,
            column: 25
          },
          end: {
            line: 335,
            column: 28
          }
        }, {
          start: {
            line: 335,
            column: 31
          },
          end: {
            line: 335,
            column: 34
          }
        }],
        line: 335
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    b: {
      "0": [0, 0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0, 0, 0],
      "43": [0, 0]
    },
    inputSourceMap: {
      file: "/workspaces/prompt-card-system/backend/src/routes/health-enhanced.ts",
      mappings: "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",
      names: [],
      sources: ["/workspaces/prompt-card-system/backend/src/routes/health-enhanced.ts"],
      sourcesContent: ["import { Router, Request, Response } from 'express';\nimport { db } from '../database/connection';\nimport { llmService } from '../services/llmService';\nimport { performanceMonitor } from '../services/performance/PerformanceMonitor';\nimport { securityMonitor, logAggregator, alertingSystem, complianceChecker } from '../services/security';\nimport { createClient } from 'redis';\nimport axios from 'axios';\nimport os from 'os';\nimport { Server as SocketIOServer } from 'socket.io';\n\nconst router = Router();\n\ninterface HealthCheckResult {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  message?: string;\n  responseTime?: number;\n  details?: any;\n}\n\ninterface ServiceHealth {\n  [key: string]: HealthCheckResult;\n}\n\n// Utility function to perform health check with timeout\nasync function performHealthCheck(\n  name: string,\n  checkFn: () => Promise<HealthCheckResult>,\n  timeout = 5000\n): Promise<HealthCheckResult> {\n  const startTime = Date.now();\n  \n  try {\n    const result = await Promise.race([\n      checkFn(),\n      new Promise<HealthCheckResult>((_, reject) => \n        setTimeout(() => reject(new Error('Health check timeout')), timeout)\n      )\n    ]);\n    \n    return {\n      ...result,\n      responseTime: Date.now() - startTime\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'Unknown error',\n      responseTime: Date.now() - startTime\n    };\n  }\n}\n\n// Database health check\nasync function checkDatabase(): Promise<HealthCheckResult> {\n  try {\n    const result = db.prepare('SELECT 1 as healthy').get() as { healthy: number };\n    \n    // Get database stats\n    const stats = {\n      promptCards: db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get() as { count: number },\n      testCases: db.prepare('SELECT COUNT(*) as count FROM test_cases').get() as { count: number },\n      testExecutions: db.prepare('SELECT COUNT(*) as count FROM test_executions').get() as { count: number }\n    };\n    \n    return {\n      status: result?.healthy === 1 ? 'healthy' : 'unhealthy',\n      details: {\n        type: 'SQLite',\n        path: process.env.DATABASE_PATH,\n        stats\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'Database connection failed'\n    };\n  }\n}\n\n// Redis health check\nasync function checkRedis(): Promise<HealthCheckResult> {\n  const redisUrl = process.env.REDIS_URL || 'redis://redis:6379';\n  \n  try {\n    const client = createClient({ url: redisUrl });\n    await client.connect();\n    \n    const pingResult = await client.ping();\n    const info = await client.info('server');\n    \n    await client.disconnect();\n    \n    // Extract version from info\n    const versionMatch = info.match(/redis_version:(.+)/);\n    const version = versionMatch ? versionMatch[1].trim() : 'unknown';\n    \n    return {\n      status: pingResult === 'PONG' ? 'healthy' : 'unhealthy',\n      details: {\n        url: redisUrl,\n        version,\n        ping: pingResult\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: `Redis connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      details: { url: redisUrl }\n    };\n  }\n}\n\n// Ollama/LLM health check\nasync function checkOllama(): Promise<HealthCheckResult> {\n  const ollamaUrl = process.env.OLLAMA_BASE_URL || 'http://ollama:11434';\n  \n  try {\n    // Check Ollama API version\n    const versionResponse = await axios.get(`${ollamaUrl}/api/version`, { timeout: 3000 });\n    \n    // Get available models\n    const modelsResponse = await axios.get(`${ollamaUrl}/api/tags`, { timeout: 3000 });\n    const models = modelsResponse.data.models || [];\n    \n    // Try a simple generation with the first available model\n    let generationTest = null;\n    if (models.length > 0) {\n      try {\n        const testResponse = await axios.post(\n          `${ollamaUrl}/api/generate`,\n          {\n            model: models[0].name,\n            prompt: 'Respond with OK',\n            stream: false,\n            options: { num_predict: 5 }\n          },\n          { timeout: 5000 }\n        );\n        generationTest = testResponse.data.response?.includes('OK') ? 'passed' : 'failed';\n      } catch (e) {\n        generationTest = 'failed';\n      }\n    }\n    \n    return {\n      status: models.length > 0 ? 'healthy' : 'degraded',\n      message: models.length === 0 ? 'No models available' : undefined,\n      details: {\n        url: ollamaUrl,\n        version: versionResponse.data.version,\n        modelCount: models.length,\n        models: models.map((m: any) => ({\n          name: m.name,\n          size: m.size,\n          modified: m.modified_at\n        })),\n        generationTest\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: `Ollama connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\n      details: { url: ollamaUrl }\n    };\n  }\n}\n\n// WebSocket health check\nasync function checkWebSocket(io?: SocketIOServer): Promise<HealthCheckResult> {\n  try {\n    if (!io) {\n      return {\n        status: 'unhealthy',\n        message: 'WebSocket server not initialized'\n      };\n    }\n    \n    const sockets = await io.fetchSockets();\n    \n    return {\n      status: 'healthy',\n      details: {\n        engine: io.engine.constructor.name,\n        connectedClients: sockets.length,\n        transports: io.engine.opts.transports\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'WebSocket check failed'\n    };\n  }\n}\n\n// System health check\nasync function checkSystem(): Promise<HealthCheckResult> {\n  try {\n    const uptime = process.uptime();\n    const memoryUsage = process.memoryUsage();\n    const loadAverage = os.loadavg();\n    \n    // Check memory usage\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemoryPercent = ((totalMemory - freeMemory) / totalMemory) * 100;\n    \n    // Determine health based on metrics\n    let status: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n    if (usedMemoryPercent > 90) {\n      status = 'unhealthy';\n    } else if (usedMemoryPercent > 80 || loadAverage[0] > os.cpus().length * 2) {\n      status = 'degraded';\n    }\n    \n    return {\n      status,\n      details: {\n        uptime: Math.floor(uptime),\n        memory: {\n          rss: Math.floor(memoryUsage.rss / 1024 / 1024),\n          heapTotal: Math.floor(memoryUsage.heapTotal / 1024 / 1024),\n          heapUsed: Math.floor(memoryUsage.heapUsed / 1024 / 1024),\n          external: Math.floor(memoryUsage.external / 1024 / 1024),\n          systemUsedPercent: Math.floor(usedMemoryPercent)\n        },\n        cpu: {\n          loadAverage,\n          cores: os.cpus().length\n        },\n        platform: os.platform(),\n        nodeVersion: process.version\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'System check failed'\n    };\n  }\n}\n\n// Security health check\nasync function checkSecurity(): Promise<HealthCheckResult> {\n  try {\n    const securityMetrics = securityMonitor.getSecurityMetrics();\n    const alertStats = alertingSystem.getAlertStatistics();\n    const complianceMetrics = complianceChecker.getComplianceMetrics();\n    \n    // Determine health based on security metrics\n    let status: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n    if (securityMetrics.criticalVulnerabilities > 0 || alertStats.critical > 0) {\n      status = 'unhealthy';\n    } else if (securityMetrics.threatLevel === 'high' || complianceMetrics.criticalIssues > 0) {\n      status = 'degraded';\n    }\n    \n    return {\n      status,\n      details: {\n        securityScore: securityMetrics.securityScore,\n        threatLevel: securityMetrics.threatLevel,\n        criticalVulnerabilities: securityMetrics.criticalVulnerabilities,\n        eventsLast24h: securityMetrics.eventsLast24h,\n        complianceScore: complianceMetrics.currentScore,\n        criticalAlerts: alertStats.critical,\n        lastScanTimestamp: securityMetrics.lastScanTimestamp\n      }\n    };\n  } catch (error) {\n    return {\n      status: 'unhealthy',\n      message: error instanceof Error ? error.message : 'Security check failed'\n    };\n  }\n}\n\n// Comprehensive health check endpoint\nrouter.get('/', async (req: Request, res: Response) => {\n  const detailed = req.query.detailed === 'true';\n  const startTime = Date.now();\n  \n  try {\n    // Run all health checks in parallel\n    const [database, redis, ollama, websocket, system, security] = await Promise.all([\n      performHealthCheck('database', checkDatabase),\n      performHealthCheck('redis', checkRedis),\n      performHealthCheck('ollama', checkOllama),\n      performHealthCheck('websocket', () => checkWebSocket(req.app.get('io'))),\n      performHealthCheck('system', checkSystem),\n      performHealthCheck('security', checkSecurity)\n    ]);\n    \n    const services: ServiceHealth = {\n      database,\n      redis,\n      ollama,\n      websocket,\n      system,\n      security\n    };\n    \n    // Calculate overall status\n    const statuses = Object.values(services).map(s => s.status);\n    let overallStatus: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n    \n    if (statuses.includes('unhealthy')) {\n      overallStatus = 'unhealthy';\n    } else if (statuses.includes('degraded')) {\n      overallStatus = 'degraded';\n    }\n    \n    const response = {\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      totalResponseTime: Date.now() - startTime,\n      environment: process.env.NODE_ENV || 'development',\n      services: detailed ? services : Object.fromEntries(\n        Object.entries(services).map(([key, value]) => [key, {\n          status: value.status,\n          message: value.message,\n          responseTime: value.responseTime\n        }])\n      )\n    };\n    \n    const statusCode = overallStatus === 'healthy' ? 200 : \n                      overallStatus === 'degraded' ? 200 : 503;\n    \n    res.status(statusCode).json(response);\n  } catch (error) {\n    res.status(500).json({\n      status: 'unhealthy',\n      error: error instanceof Error ? error.message : 'Health check failed',\n      timestamp: new Date().toISOString()\n    });\n  }\n});\n\n// Individual service health checks\nrouter.get('/database', async (req: Request, res: Response) => {\n  const result = await performHealthCheck('database', checkDatabase);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/redis', async (req: Request, res: Response) => {\n  const result = await performHealthCheck('redis', checkRedis);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/ollama', async (req: Request, res: Response) => {\n  const result = await performHealthCheck('ollama', checkOllama);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/websocket', async (req: Request, res: Response) => {\n  const result = await performHealthCheck('websocket', () => checkWebSocket(req.app.get('io')));\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/system', async (req: Request, res: Response) => {\n  const result = await performHealthCheck('system', checkSystem);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\nrouter.get('/security', async (req: Request, res: Response) => {\n  const result = await performHealthCheck('security', checkSecurity);\n  res.status(result.status === 'healthy' ? 200 : 503).json(result);\n});\n\n// Readiness check (for k8s/docker)\nrouter.get('/ready', async (req: Request, res: Response) => {\n  // Check only critical services for readiness\n  const [database, ollama, security] = await Promise.all([\n    performHealthCheck('database', checkDatabase),\n    performHealthCheck('ollama', checkOllama),\n    performHealthCheck('security', checkSecurity)\n  ]);\n  \n  const isReady = database.status === 'healthy' && \n                  (ollama.status === 'healthy' || ollama.status === 'degraded') &&\n                  security.status !== 'unhealthy';\n  \n  res.status(isReady ? 200 : 503).json({\n    ready: isReady,\n    services: { database, ollama, security }\n  });\n});\n\n// Liveness check (for k8s/docker)\nrouter.get('/live', (req: Request, res: Response) => {\n  // Simple liveness check - just verify the process is running\n  res.status(200).json({\n    alive: true,\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime()\n  });\n});\n\nexport { router as enhancedHealthRoutes };"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "13c76ad70fc6505acde8a31bcf262cdb49d71ee5"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_298pe92cl6 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_298pe92cl6();
var __importDefault =
/* istanbul ignore next */
(cov_298pe92cl6().s[0]++,
/* istanbul ignore next */
(cov_298pe92cl6().b[0][0]++, this) &&
/* istanbul ignore next */
(cov_298pe92cl6().b[0][1]++, this.__importDefault) ||
/* istanbul ignore next */
(cov_298pe92cl6().b[0][2]++, function (mod) {
  /* istanbul ignore next */
  cov_298pe92cl6().f[0]++;
  cov_298pe92cl6().s[1]++;
  return /* istanbul ignore next */(cov_298pe92cl6().b[2][0]++, mod) &&
  /* istanbul ignore next */
  (cov_298pe92cl6().b[2][1]++, mod.__esModule) ?
  /* istanbul ignore next */
  (cov_298pe92cl6().b[1][0]++, mod) :
  /* istanbul ignore next */
  (cov_298pe92cl6().b[1][1]++, {
    "default": mod
  });
}));
/* istanbul ignore next */
cov_298pe92cl6().s[2]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_298pe92cl6().s[3]++;
exports.enhancedHealthRoutes = void 0;
const express_1 =
/* istanbul ignore next */
(cov_298pe92cl6().s[4]++, require("express"));
const connection_1 =
/* istanbul ignore next */
(cov_298pe92cl6().s[5]++, require("../database/connection"));
const security_1 =
/* istanbul ignore next */
(cov_298pe92cl6().s[6]++, require("../services/security"));
const redis_1 =
/* istanbul ignore next */
(cov_298pe92cl6().s[7]++, require("redis"));
const axios_1 =
/* istanbul ignore next */
(cov_298pe92cl6().s[8]++, __importDefault(require("axios")));
const os_1 =
/* istanbul ignore next */
(cov_298pe92cl6().s[9]++, __importDefault(require("os")));
const router =
/* istanbul ignore next */
(cov_298pe92cl6().s[10]++, (0, express_1.Router)());
/* istanbul ignore next */
cov_298pe92cl6().s[11]++;
exports.enhancedHealthRoutes = router;
// Utility function to perform health check with timeout
async function performHealthCheck(name, checkFn, timeout =
/* istanbul ignore next */
(cov_298pe92cl6().b[3][0]++, 5000)) {
  /* istanbul ignore next */
  cov_298pe92cl6().f[1]++;
  const startTime =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[12]++, Date.now());
  /* istanbul ignore next */
  cov_298pe92cl6().s[13]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[14]++, await Promise.race([checkFn(), new Promise((_, reject) => {
      /* istanbul ignore next */
      cov_298pe92cl6().f[2]++;
      cov_298pe92cl6().s[15]++;
      return setTimeout(() => {
        /* istanbul ignore next */
        cov_298pe92cl6().f[3]++;
        cov_298pe92cl6().s[16]++;
        return reject(new Error('Health check timeout'));
      }, timeout);
    })]));
    /* istanbul ignore next */
    cov_298pe92cl6().s[17]++;
    return {
      ...result,
      responseTime: Date.now() - startTime
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_298pe92cl6().s[18]++;
    return {
      status: 'unhealthy',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[4][1]++, 'Unknown error'),
      responseTime: Date.now() - startTime
    };
  }
}
// Database health check
async function checkDatabase() {
  /* istanbul ignore next */
  cov_298pe92cl6().f[4]++;
  cov_298pe92cl6().s[19]++;
  try {
    const result =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[20]++, connection_1.db.prepare('SELECT 1 as healthy').get());
    // Get database stats
    const stats =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[21]++, {
      promptCards: connection_1.db.prepare('SELECT COUNT(*) as count FROM prompt_cards').get(),
      testCases: connection_1.db.prepare('SELECT COUNT(*) as count FROM test_cases').get(),
      testExecutions: connection_1.db.prepare('SELECT COUNT(*) as count FROM test_executions').get()
    });
    /* istanbul ignore next */
    cov_298pe92cl6().s[22]++;
    return {
      status: result?.healthy === 1 ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[5][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[5][1]++, 'unhealthy'),
      details: {
        type: 'SQLite',
        path: process.env.DATABASE_PATH,
        stats
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_298pe92cl6().s[23]++;
    return {
      status: 'unhealthy',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[6][0]++, error.message) :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[6][1]++, 'Database connection failed')
    };
  }
}
// Redis health check
async function checkRedis() {
  /* istanbul ignore next */
  cov_298pe92cl6().f[5]++;
  const redisUrl =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[24]++,
  /* istanbul ignore next */
  (cov_298pe92cl6().b[7][0]++, process.env.REDIS_URL) ||
  /* istanbul ignore next */
  (cov_298pe92cl6().b[7][1]++, 'redis://redis:6379'));
  /* istanbul ignore next */
  cov_298pe92cl6().s[25]++;
  try {
    const client =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[26]++, (0, redis_1.createClient)({
      url: redisUrl
    }));
    /* istanbul ignore next */
    cov_298pe92cl6().s[27]++;
    await client.connect();
    const pingResult =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[28]++, await client.ping());
    const info =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[29]++, await client.info('server'));
    /* istanbul ignore next */
    cov_298pe92cl6().s[30]++;
    await client.disconnect();
    // Extract version from info
    const versionMatch =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[31]++, info.match(/redis_version:(.+)/));
    const version =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[32]++, versionMatch ?
    /* istanbul ignore next */
    (cov_298pe92cl6().b[8][0]++, versionMatch[1].trim()) :
    /* istanbul ignore next */
    (cov_298pe92cl6().b[8][1]++, 'unknown'));
    /* istanbul ignore next */
    cov_298pe92cl6().s[33]++;
    return {
      status: pingResult === 'PONG' ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[9][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[9][1]++, 'unhealthy'),
      details: {
        url: redisUrl,
        version,
        ping: pingResult
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_298pe92cl6().s[34]++;
    return {
      status: 'unhealthy',
      message: `Redis connection failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[10][0]++, error.message) :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[10][1]++, 'Unknown error')}`,
      details: {
        url: redisUrl
      }
    };
  }
}
// Ollama/LLM health check
async function checkOllama() {
  /* istanbul ignore next */
  cov_298pe92cl6().f[6]++;
  const ollamaUrl =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[35]++,
  /* istanbul ignore next */
  (cov_298pe92cl6().b[11][0]++, process.env.OLLAMA_BASE_URL) ||
  /* istanbul ignore next */
  (cov_298pe92cl6().b[11][1]++, 'http://ollama:11434'));
  /* istanbul ignore next */
  cov_298pe92cl6().s[36]++;
  try {
    // Check Ollama API version
    const versionResponse =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[37]++, await axios_1.default.get(`${ollamaUrl}/api/version`, {
      timeout: 3000
    }));
    // Get available models
    const modelsResponse =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[38]++, await axios_1.default.get(`${ollamaUrl}/api/tags`, {
      timeout: 3000
    }));
    const models =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[39]++,
    /* istanbul ignore next */
    (cov_298pe92cl6().b[12][0]++, modelsResponse.data.models) ||
    /* istanbul ignore next */
    (cov_298pe92cl6().b[12][1]++, []));
    // Try a simple generation with the first available model
    let generationTest =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[40]++, null);
    /* istanbul ignore next */
    cov_298pe92cl6().s[41]++;
    if (models.length > 0) {
      /* istanbul ignore next */
      cov_298pe92cl6().b[13][0]++;
      cov_298pe92cl6().s[42]++;
      try {
        const testResponse =
        /* istanbul ignore next */
        (cov_298pe92cl6().s[43]++, await axios_1.default.post(`${ollamaUrl}/api/generate`, {
          model: models[0].name,
          prompt: 'Respond with OK',
          stream: false,
          options: {
            num_predict: 5
          }
        }, {
          timeout: 5000
        }));
        /* istanbul ignore next */
        cov_298pe92cl6().s[44]++;
        generationTest = testResponse.data.response?.includes('OK') ?
        /* istanbul ignore next */
        (cov_298pe92cl6().b[14][0]++, 'passed') :
        /* istanbul ignore next */
        (cov_298pe92cl6().b[14][1]++, 'failed');
      } catch (e) {
        /* istanbul ignore next */
        cov_298pe92cl6().s[45]++;
        generationTest = 'failed';
      }
    } else
    /* istanbul ignore next */
    {
      cov_298pe92cl6().b[13][1]++;
    }
    cov_298pe92cl6().s[46]++;
    return {
      status: models.length > 0 ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[15][0]++, 'healthy') :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[15][1]++, 'degraded'),
      message: models.length === 0 ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[16][0]++, 'No models available') :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[16][1]++, undefined),
      details: {
        url: ollamaUrl,
        version: versionResponse.data.version,
        modelCount: models.length,
        models: models.map(m => {
          /* istanbul ignore next */
          cov_298pe92cl6().f[7]++;
          cov_298pe92cl6().s[47]++;
          return {
            name: m.name,
            size: m.size,
            modified: m.modified_at
          };
        }),
        generationTest
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_298pe92cl6().s[48]++;
    return {
      status: 'unhealthy',
      message: `Ollama connection failed: ${error instanceof Error ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[17][0]++, error.message) :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[17][1]++, 'Unknown error')}`,
      details: {
        url: ollamaUrl
      }
    };
  }
}
// WebSocket health check
async function checkWebSocket(io) {
  /* istanbul ignore next */
  cov_298pe92cl6().f[8]++;
  cov_298pe92cl6().s[49]++;
  try {
    /* istanbul ignore next */
    cov_298pe92cl6().s[50]++;
    if (!io) {
      /* istanbul ignore next */
      cov_298pe92cl6().b[18][0]++;
      cov_298pe92cl6().s[51]++;
      return {
        status: 'unhealthy',
        message: 'WebSocket server not initialized'
      };
    } else
    /* istanbul ignore next */
    {
      cov_298pe92cl6().b[18][1]++;
    }
    const sockets =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[52]++, await io.fetchSockets());
    /* istanbul ignore next */
    cov_298pe92cl6().s[53]++;
    return {
      status: 'healthy',
      details: {
        engine: io.engine.constructor.name,
        connectedClients: sockets.length,
        transports: io.engine.opts.transports
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_298pe92cl6().s[54]++;
    return {
      status: 'unhealthy',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[19][0]++, error.message) :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[19][1]++, 'WebSocket check failed')
    };
  }
}
// System health check
async function checkSystem() {
  /* istanbul ignore next */
  cov_298pe92cl6().f[9]++;
  cov_298pe92cl6().s[55]++;
  try {
    const uptime =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[56]++, process.uptime());
    const memoryUsage =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[57]++, process.memoryUsage());
    const loadAverage =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[58]++, os_1.default.loadavg());
    // Check memory usage
    const totalMemory =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[59]++, os_1.default.totalmem());
    const freeMemory =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[60]++, os_1.default.freemem());
    const usedMemoryPercent =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[61]++, (totalMemory - freeMemory) / totalMemory * 100);
    // Determine health based on metrics
    let status =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[62]++, 'healthy');
    /* istanbul ignore next */
    cov_298pe92cl6().s[63]++;
    if (usedMemoryPercent > 90) {
      /* istanbul ignore next */
      cov_298pe92cl6().b[20][0]++;
      cov_298pe92cl6().s[64]++;
      status = 'unhealthy';
    } else {
      /* istanbul ignore next */
      cov_298pe92cl6().b[20][1]++;
      cov_298pe92cl6().s[65]++;
      if (
      /* istanbul ignore next */
      (cov_298pe92cl6().b[22][0]++, usedMemoryPercent > 80) ||
      /* istanbul ignore next */
      (cov_298pe92cl6().b[22][1]++, loadAverage[0] > os_1.default.cpus().length * 2)) {
        /* istanbul ignore next */
        cov_298pe92cl6().b[21][0]++;
        cov_298pe92cl6().s[66]++;
        status = 'degraded';
      } else
      /* istanbul ignore next */
      {
        cov_298pe92cl6().b[21][1]++;
      }
    }
    /* istanbul ignore next */
    cov_298pe92cl6().s[67]++;
    return {
      status,
      details: {
        uptime: Math.floor(uptime),
        memory: {
          rss: Math.floor(memoryUsage.rss / 1024 / 1024),
          heapTotal: Math.floor(memoryUsage.heapTotal / 1024 / 1024),
          heapUsed: Math.floor(memoryUsage.heapUsed / 1024 / 1024),
          external: Math.floor(memoryUsage.external / 1024 / 1024),
          systemUsedPercent: Math.floor(usedMemoryPercent)
        },
        cpu: {
          loadAverage,
          cores: os_1.default.cpus().length
        },
        platform: os_1.default.platform(),
        nodeVersion: process.version
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_298pe92cl6().s[68]++;
    return {
      status: 'unhealthy',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[23][0]++, error.message) :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[23][1]++, 'System check failed')
    };
  }
}
// Security health check
async function checkSecurity() {
  /* istanbul ignore next */
  cov_298pe92cl6().f[10]++;
  cov_298pe92cl6().s[69]++;
  try {
    const securityMetrics =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[70]++, security_1.securityMonitor.getSecurityMetrics());
    const alertStats =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[71]++, security_1.alertingSystem.getAlertStatistics());
    const complianceMetrics =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[72]++, security_1.complianceChecker.getComplianceMetrics());
    // Determine health based on security metrics
    let status =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[73]++, 'healthy');
    /* istanbul ignore next */
    cov_298pe92cl6().s[74]++;
    if (
    /* istanbul ignore next */
    (cov_298pe92cl6().b[25][0]++, securityMetrics.criticalVulnerabilities > 0) ||
    /* istanbul ignore next */
    (cov_298pe92cl6().b[25][1]++, alertStats.critical > 0)) {
      /* istanbul ignore next */
      cov_298pe92cl6().b[24][0]++;
      cov_298pe92cl6().s[75]++;
      status = 'unhealthy';
    } else {
      /* istanbul ignore next */
      cov_298pe92cl6().b[24][1]++;
      cov_298pe92cl6().s[76]++;
      if (
      /* istanbul ignore next */
      (cov_298pe92cl6().b[27][0]++, securityMetrics.threatLevel === 'high') ||
      /* istanbul ignore next */
      (cov_298pe92cl6().b[27][1]++, complianceMetrics.criticalIssues > 0)) {
        /* istanbul ignore next */
        cov_298pe92cl6().b[26][0]++;
        cov_298pe92cl6().s[77]++;
        status = 'degraded';
      } else
      /* istanbul ignore next */
      {
        cov_298pe92cl6().b[26][1]++;
      }
    }
    /* istanbul ignore next */
    cov_298pe92cl6().s[78]++;
    return {
      status,
      details: {
        securityScore: securityMetrics.securityScore,
        threatLevel: securityMetrics.threatLevel,
        criticalVulnerabilities: securityMetrics.criticalVulnerabilities,
        eventsLast24h: securityMetrics.eventsLast24h,
        complianceScore: complianceMetrics.currentScore,
        criticalAlerts: alertStats.critical,
        lastScanTimestamp: securityMetrics.lastScanTimestamp
      }
    };
  } catch (error) {
    /* istanbul ignore next */
    cov_298pe92cl6().s[79]++;
    return {
      status: 'unhealthy',
      message: error instanceof Error ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[28][0]++, error.message) :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[28][1]++, 'Security check failed')
    };
  }
}
// Comprehensive health check endpoint
/* istanbul ignore next */
cov_298pe92cl6().s[80]++;
router.get('/', async (req, res) => {
  /* istanbul ignore next */
  cov_298pe92cl6().f[11]++;
  const detailed =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[81]++, req.query.detailed === 'true');
  const startTime =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[82]++, Date.now());
  /* istanbul ignore next */
  cov_298pe92cl6().s[83]++;
  try {
    // Run all health checks in parallel
    const [database, redis, ollama, websocket, system, security] =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[84]++, await Promise.all([performHealthCheck('database', checkDatabase), performHealthCheck('redis', checkRedis), performHealthCheck('ollama', checkOllama), performHealthCheck('websocket', () => {
      /* istanbul ignore next */
      cov_298pe92cl6().f[12]++;
      cov_298pe92cl6().s[85]++;
      return checkWebSocket(req.app.get('io'));
    }), performHealthCheck('system', checkSystem), performHealthCheck('security', checkSecurity)]));
    const services =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[86]++, {
      database,
      redis,
      ollama,
      websocket,
      system,
      security
    });
    // Calculate overall status
    const statuses =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[87]++, Object.values(services).map(s => {
      /* istanbul ignore next */
      cov_298pe92cl6().f[13]++;
      cov_298pe92cl6().s[88]++;
      return s.status;
    }));
    let overallStatus =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[89]++, 'healthy');
    /* istanbul ignore next */
    cov_298pe92cl6().s[90]++;
    if (statuses.includes('unhealthy')) {
      /* istanbul ignore next */
      cov_298pe92cl6().b[29][0]++;
      cov_298pe92cl6().s[91]++;
      overallStatus = 'unhealthy';
    } else {
      /* istanbul ignore next */
      cov_298pe92cl6().b[29][1]++;
      cov_298pe92cl6().s[92]++;
      if (statuses.includes('degraded')) {
        /* istanbul ignore next */
        cov_298pe92cl6().b[30][0]++;
        cov_298pe92cl6().s[93]++;
        overallStatus = 'degraded';
      } else
      /* istanbul ignore next */
      {
        cov_298pe92cl6().b[30][1]++;
      }
    }
    const response =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[94]++, {
      status: overallStatus,
      timestamp: new Date().toISOString(),
      totalResponseTime: Date.now() - startTime,
      environment:
      /* istanbul ignore next */
      (cov_298pe92cl6().b[31][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_298pe92cl6().b[31][1]++, 'development'),
      services: detailed ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[32][0]++, services) :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[32][1]++, Object.fromEntries(Object.entries(services).map(([key, value]) => {
        /* istanbul ignore next */
        cov_298pe92cl6().f[14]++;
        cov_298pe92cl6().s[95]++;
        return [key, {
          status: value.status,
          message: value.message,
          responseTime: value.responseTime
        }];
      })))
    });
    const statusCode =
    /* istanbul ignore next */
    (cov_298pe92cl6().s[96]++, overallStatus === 'healthy' ?
    /* istanbul ignore next */
    (cov_298pe92cl6().b[33][0]++, 200) :
    /* istanbul ignore next */
    (cov_298pe92cl6().b[33][1]++, overallStatus === 'degraded' ?
    /* istanbul ignore next */
    (cov_298pe92cl6().b[34][0]++, 200) :
    /* istanbul ignore next */
    (cov_298pe92cl6().b[34][1]++, 503)));
    /* istanbul ignore next */
    cov_298pe92cl6().s[97]++;
    res.status(statusCode).json(response);
  } catch (error) {
    /* istanbul ignore next */
    cov_298pe92cl6().s[98]++;
    res.status(500).json({
      status: 'unhealthy',
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_298pe92cl6().b[35][0]++, error.message) :
      /* istanbul ignore next */
      (cov_298pe92cl6().b[35][1]++, 'Health check failed'),
      timestamp: new Date().toISOString()
    });
  }
});
// Individual service health checks
/* istanbul ignore next */
cov_298pe92cl6().s[99]++;
router.get('/database', async (req, res) => {
  /* istanbul ignore next */
  cov_298pe92cl6().f[15]++;
  const result =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[100]++, await performHealthCheck('database', checkDatabase));
  /* istanbul ignore next */
  cov_298pe92cl6().s[101]++;
  res.status(result.status === 'healthy' ?
  /* istanbul ignore next */
  (cov_298pe92cl6().b[36][0]++, 200) :
  /* istanbul ignore next */
  (cov_298pe92cl6().b[36][1]++, 503)).json(result);
});
/* istanbul ignore next */
cov_298pe92cl6().s[102]++;
router.get('/redis', async (req, res) => {
  /* istanbul ignore next */
  cov_298pe92cl6().f[16]++;
  const result =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[103]++, await performHealthCheck('redis', checkRedis));
  /* istanbul ignore next */
  cov_298pe92cl6().s[104]++;
  res.status(result.status === 'healthy' ?
  /* istanbul ignore next */
  (cov_298pe92cl6().b[37][0]++, 200) :
  /* istanbul ignore next */
  (cov_298pe92cl6().b[37][1]++, 503)).json(result);
});
/* istanbul ignore next */
cov_298pe92cl6().s[105]++;
router.get('/ollama', async (req, res) => {
  /* istanbul ignore next */
  cov_298pe92cl6().f[17]++;
  const result =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[106]++, await performHealthCheck('ollama', checkOllama));
  /* istanbul ignore next */
  cov_298pe92cl6().s[107]++;
  res.status(result.status === 'healthy' ?
  /* istanbul ignore next */
  (cov_298pe92cl6().b[38][0]++, 200) :
  /* istanbul ignore next */
  (cov_298pe92cl6().b[38][1]++, 503)).json(result);
});
/* istanbul ignore next */
cov_298pe92cl6().s[108]++;
router.get('/websocket', async (req, res) => {
  /* istanbul ignore next */
  cov_298pe92cl6().f[18]++;
  const result =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[109]++, await performHealthCheck('websocket', () => {
    /* istanbul ignore next */
    cov_298pe92cl6().f[19]++;
    cov_298pe92cl6().s[110]++;
    return checkWebSocket(req.app.get('io'));
  }));
  /* istanbul ignore next */
  cov_298pe92cl6().s[111]++;
  res.status(result.status === 'healthy' ?
  /* istanbul ignore next */
  (cov_298pe92cl6().b[39][0]++, 200) :
  /* istanbul ignore next */
  (cov_298pe92cl6().b[39][1]++, 503)).json(result);
});
/* istanbul ignore next */
cov_298pe92cl6().s[112]++;
router.get('/system', async (req, res) => {
  /* istanbul ignore next */
  cov_298pe92cl6().f[20]++;
  const result =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[113]++, await performHealthCheck('system', checkSystem));
  /* istanbul ignore next */
  cov_298pe92cl6().s[114]++;
  res.status(result.status === 'healthy' ?
  /* istanbul ignore next */
  (cov_298pe92cl6().b[40][0]++, 200) :
  /* istanbul ignore next */
  (cov_298pe92cl6().b[40][1]++, 503)).json(result);
});
/* istanbul ignore next */
cov_298pe92cl6().s[115]++;
router.get('/security', async (req, res) => {
  /* istanbul ignore next */
  cov_298pe92cl6().f[21]++;
  const result =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[116]++, await performHealthCheck('security', checkSecurity));
  /* istanbul ignore next */
  cov_298pe92cl6().s[117]++;
  res.status(result.status === 'healthy' ?
  /* istanbul ignore next */
  (cov_298pe92cl6().b[41][0]++, 200) :
  /* istanbul ignore next */
  (cov_298pe92cl6().b[41][1]++, 503)).json(result);
});
// Readiness check (for k8s/docker)
/* istanbul ignore next */
cov_298pe92cl6().s[118]++;
router.get('/ready', async (req, res) => {
  /* istanbul ignore next */
  cov_298pe92cl6().f[22]++;
  // Check only critical services for readiness
  const [database, ollama, security] =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[119]++, await Promise.all([performHealthCheck('database', checkDatabase), performHealthCheck('ollama', checkOllama), performHealthCheck('security', checkSecurity)]));
  const isReady =
  /* istanbul ignore next */
  (cov_298pe92cl6().s[120]++,
  /* istanbul ignore next */
  (cov_298pe92cl6().b[42][0]++, database.status === 'healthy') && (
  /* istanbul ignore next */
  (cov_298pe92cl6().b[42][1]++, ollama.status === 'healthy') ||
  /* istanbul ignore next */
  (cov_298pe92cl6().b[42][2]++, ollama.status === 'degraded')) &&
  /* istanbul ignore next */
  (cov_298pe92cl6().b[42][3]++, security.status !== 'unhealthy'));
  /* istanbul ignore next */
  cov_298pe92cl6().s[121]++;
  res.status(isReady ?
  /* istanbul ignore next */
  (cov_298pe92cl6().b[43][0]++, 200) :
  /* istanbul ignore next */
  (cov_298pe92cl6().b[43][1]++, 503)).json({
    ready: isReady,
    services: {
      database,
      ollama,
      security
    }
  });
});
// Liveness check (for k8s/docker)
/* istanbul ignore next */
cov_298pe92cl6().s[122]++;
router.get('/live', (req, res) => {
  /* istanbul ignore next */
  cov_298pe92cl6().f[23]++;
  cov_298pe92cl6().s[123]++;
  // Simple liveness check - just verify the process is running
  res.status(200).json({
    alive: true,
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,