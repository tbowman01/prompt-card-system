version: '3.8'

services:
  # Main Application Services
  backend:
    build: 
      context: .
      dockerfile: Dockerfile.prod
    container_name: prompt-card-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: sqlite:/app/data/database.db
      REDIS_HOST: redis
      REDIS_PORT: 6379
      OLLAMA_BASE_URL: http://ollama:11434
      OLLAMA_DEFAULT_MODEL: llama3
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
      MAX_CONCURRENT_TESTS: 10
      MAX_CPU_PERCENT: 80
      MAX_MEMORY_MB: 4096
    ports:
      - "3001:3001"
    volumes:
      - backend_data:/app/data
    depends_on:
      - redis
      - ollama
    networks:
      - prompt_card_network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile.prod
    container_name: prompt-card-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:3001}
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - prompt_card_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Infrastructure Services
  redis:
    image: redis:7-alpine
    container_name: prompt-card-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - prompt_card_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  ollama:
    image: ollama/ollama:latest
    container_name: prompt-card-ollama
    restart: unless-stopped
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      OLLAMA_ORIGINS: "*"
      OLLAMA_HOST: 0.0.0.0
    networks:
      - prompt_card_network
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prompt-card-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - prompt_card_network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  grafana:
    image: grafana/grafana:latest
    container_name: prompt-card-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - prompt_card_network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: prompt-card-jaeger
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
    volumes:
      - jaeger_data:/badger
    networks:
      - prompt_card_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: prompt-card-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - prompt_card_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # Backup Service
  backup:
    image: alpine:latest
    container_name: prompt-card-backup
    restart: unless-stopped
    command: |
      sh -c "
        while true; do
          echo 'Starting backup at $(date)'
          tar -czf /backups/backup-$(date +%Y%m%d-%H%M%S).tar.gz -C /data .
          find /backups -name '*.tar.gz' -mtime +7 -delete
          echo 'Backup completed at $(date)'
          sleep 86400
        done
      "
    volumes:
      - backend_data:/data:ro
      - redis_data:/redis_data:ro
      - ollama_data:/ollama_data:ro
      - backup_data:/backups
    networks:
      - prompt_card_network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

networks:
  prompt_card_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  backend_data:
    driver: local
  redis_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  jaeger_data:
    driver: local
  backup_data:
    driver: local

# Production deployment with scaling
x-production-scaling: &production-scaling
  backend:
    replicas: 2
    update_config:
      parallelism: 1
      delay: 10s
      failure_action: rollback
    restart_policy:
      condition: on-failure
      delay: 5s
      max_attempts: 3
      window: 120s
  
  frontend:
    replicas: 2
    update_config:
      parallelism: 1
      delay: 10s
    restart_policy:
      condition: on-failure