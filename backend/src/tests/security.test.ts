import request from 'supertest';\nimport app from '../server';\nimport { generateTokens, hashPassword } from '../middleware/auth';\nimport { generateCSRFToken } from '../middleware/security';\n\ndescribe('Security Features', () => {\n  const testUser = {\n    email: 'test@example.com',\n    password: 'TestPass123!',\n    role: 'user',\n    permissions: ['read', 'write']\n  };\n\n  let authToken: string;\n  let csrfToken: string;\n  let sessionId: string;\n\n  beforeAll(async () => {\n    // Generate auth token for protected routes\n    const tokens = generateTokens({\n      id: '1',\n      email: testUser.email,\n      role: testUser.role,\n      permissions: testUser.permissions\n    });\n    authToken = tokens.accessToken;\n\n    // Get CSRF token\n    const csrfResponse = await request(app)\n      .get('/api/security/csrf-token');\n    \n    csrfToken = csrfResponse.body.data.csrfToken;\n    sessionId = csrfResponse.body.data.sessionId;\n  });\n\n  describe('Rate Limiting', () => {\n    it('should enforce general rate limits', async () => {\n      // Make multiple requests quickly to trigger rate limit\n      const requests = Array(110).fill(null).map(() => \n        request(app).get('/api/health')\n      );\n      \n      const responses = await Promise.all(requests);\n      const rateLimitedResponses = responses.filter(res => res.status === 429);\n      \n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    }, 30000);\n\n    it('should enforce auth rate limits', async () => {\n      // Make multiple login attempts to trigger auth rate limit\n      const requests = Array(7).fill(null).map(() => \n        request(app)\n          .post('/api/auth/login')\n          .send({ email: 'wrong@email.com', password: 'wrongpassword' })\n      );\n      \n      const responses = await Promise.all(requests);\n      const rateLimitedResponses = responses.filter(res => res.status === 429);\n      \n      expect(rateLimitedResponses.length).toBeGreaterThan(0);\n    }, 30000);\n\n    it('should include rate limit headers', async () => {\n      const response = await request(app).get('/api/health');\n      \n      expect(response.headers).toHaveProperty('x-ratelimit-limit');\n      expect(response.headers).toHaveProperty('x-ratelimit-remaining');\n    });\n  });\n\n  describe('Security Headers', () => {\n    it('should include security headers', async () => {\n      const response = await request(app).get('/api/health');\n      \n      expect(response.headers).toHaveProperty('x-frame-options', 'DENY');\n      expect(response.headers).toHaveProperty('x-content-type-options', 'nosniff');\n      expect(response.headers).toHaveProperty('x-xss-protection', '1; mode=block');\n      expect(response.headers).toHaveProperty('strict-transport-security');\n      expect(response.headers).toHaveProperty('referrer-policy', 'no-referrer');\n      expect(response.headers).toHaveProperty('content-security-policy');\n    });\n\n    it('should not expose server information', async () => {\n      const response = await request(app).get('/api/health');\n      \n      expect(response.headers).not.toHaveProperty('x-powered-by');\n      expect(response.headers).not.toHaveProperty('server');\n    });\n\n    it('should include request ID', async () => {\n      const response = await request(app).get('/api/health');\n      \n      expect(response.headers).toHaveProperty('x-request-id');\n      expect(response.headers['x-request-id']).toMatch(/^[a-f0-9]{32}$/);\n    });\n  });\n\n  describe('Input Validation', () => {\n    it('should reject requests with dangerous scripts', async () => {\n      const maliciousData = {\n        title: '<script>alert(\"xss\")</script>Malicious Title',\n        description: 'Safe description',\n        prompt_template: 'javascript:void(0)'\n      };\n\n      const response = await request(app)\n        .post('/api/prompt-cards')\n        .set('Authorization', `Bearer ${authToken}`)\n        .set('X-CSRF-Token', csrfToken)\n        .set('X-Session-ID', sessionId)\n        .send(maliciousData);\n\n      expect(response.status).toBe(400);\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should sanitize HTML input', async () => {\n      const dataWithHtml = {\n        title: 'Normal Title',\n        description: '<p>Description with <strong>HTML</strong></p>',\n        prompt_template: 'Normal template'\n      };\n\n      const response = await request(app)\n        .post('/api/prompt-cards')\n        .set('Authorization', `Bearer ${authToken}`)\n        .set('X-CSRF-Token', csrfToken)\n        .set('X-Session-ID', sessionId)\n        .send(dataWithHtml);\n\n      // Should pass validation but HTML should be sanitized\n      if (response.status === 201) {\n        expect(response.body.data.description).not.toContain('<script>');\n      }\n    });\n\n    it('should enforce request size limits', async () => {\n      const largeData = {\n        title: 'A'.repeat(1000),\n        description: 'B'.repeat(10000),\n        prompt_template: 'C'.repeat(100000) // Very large template\n      };\n\n      const response = await request(app)\n        .post('/api/prompt-cards')\n        .set('Authorization', `Bearer ${authToken}`)\n        .set('X-CSRF-Token', csrfToken)\n        .set('X-Session-ID', sessionId)\n        .send(largeData);\n\n      expect(response.status).toBe(400);\n    });\n  });\n\n  describe('Authentication', () => {\n    it('should reject requests without valid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me');\n\n      expect(response.status).toBe(401);\n      expect(response.body.success).toBe(false);\n      expect(response.body.code).toBe('NO_TOKEN');\n    });\n\n    it('should reject requests with invalid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', 'Bearer invalid-token');\n\n      expect(response.status).toBe(401);\n      expect(response.body.success).toBe(false);\n      expect(response.body.code).toBe('INVALID_TOKEN');\n    });\n\n    it('should accept requests with valid token', async () => {\n      const response = await request(app)\n        .get('/api/auth/me')\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data.user.email).toBe(testUser.email);\n    });\n\n    it('should validate password strength on registration', async () => {\n      const weakPasswordData = {\n        email: 'newuser@example.com',\n        password: '123', // Weak password\n        confirmPassword: '123'\n      };\n\n      const response = await request(app)\n        .post('/api/auth/register')\n        .send(weakPasswordData);\n\n      expect(response.status).toBe(400);\n      expect(response.body.success).toBe(false);\n    });\n\n    it('should hash passwords securely', async () => {\n      const password = 'TestPassword123!';\n      const hashedPassword = await hashPassword(password);\n      \n      expect(hashedPassword).not.toBe(password);\n      expect(hashedPassword).toMatch(/^\\$2[aby]\\$\\d+\\$/);\n      expect(hashedPassword.length).toBeGreaterThan(50);\n    });\n  });\n\n  describe('CSRF Protection', () => {\n    it('should provide CSRF token', async () => {\n      const response = await request(app)\n        .get('/api/security/csrf-token');\n\n      expect(response.status).toBe(200);\n      expect(response.body.success).toBe(true);\n      expect(response.body.data).toHaveProperty('csrfToken');\n      expect(response.body.data).toHaveProperty('sessionId');\n    });\n\n    it('should reject POST requests without CSRF token', async () => {\n      const response = await request(app)\n        .post('/api/prompt-cards')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          title: 'Test Title',\n          prompt_template: 'Test template'\n        });\n\n      expect(response.status).toBe(403);\n      expect(response.body.code).toBe('CSRF_TOKEN_INVALID');\n    });\n\n    it('should accept POST requests with valid CSRF token', async () => {\n      const response = await request(app)\n        .post('/api/prompt-cards')\n        .set('Authorization', `Bearer ${authToken}`)\n        .set('X-CSRF-Token', csrfToken)\n        .set('X-Session-ID', sessionId)\n        .send({\n          title: 'Test Title',\n          prompt_template: 'Test template'\n        });\n\n      // Should not fail due to CSRF (may fail for other reasons like missing fields)\n      expect(response.status).not.toBe(403);\n    });\n\n    it('should skip CSRF for GET requests', async () => {\n      const response = await request(app)\n        .get('/api/health');\n\n      expect(response.status).toBe(200);\n    });\n\n    it('should skip CSRF for Bearer token requests', async () => {\n      const response = await request(app)\n        .post('/api/prompt-cards')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({\n          title: 'Test Title',\n          prompt_template: 'Test template'\n        });\n\n      // Should skip CSRF for Bearer token requests\n      // May still fail for validation reasons\n      expect(response.status).not.toBe(403);\n    });\n  });\n\n  describe('Authorization', () => {\n    it('should enforce role-based access control', async () => {\n      // Try to access admin endpoint with user token\n      const response = await request(app)\n        .get('/api/auth/users')\n        .set('Authorization', `Bearer ${authToken}`);\n\n      expect(response.status).toBe(403);\n      expect(response.body.code).toBe('INSUFFICIENT_ROLE');\n    });\n\n    it('should allow access with sufficient permissions', async () => {\n      // Generate admin token\n      const adminTokens = generateTokens({\n        id: '1',\n        email: 'admin@example.com',\n        role: 'admin',\n        permissions: ['read', 'write', 'delete', 'admin']\n      });\n\n      const response = await request(app)\n        .get('/api/auth/users')\n        .set('Authorization', `Bearer ${adminTokens.accessToken}`);\n\n      expect(response.status).toBe(200);\n    });\n  });\n\n  describe('CORS', () => {\n    it('should include CORS headers', async () => {\n      const response = await request(app)\n        .options('/api/health')\n        .set('Origin', 'http://localhost:3000');\n\n      expect(response.headers).toHaveProperty('access-control-allow-origin');\n      expect(response.headers).toHaveProperty('access-control-allow-methods');\n      expect(response.headers).toHaveProperty('access-control-allow-headers');\n    });\n\n    it('should reject requests from unauthorized origins', async () => {\n      const response = await request(app)\n        .get('/api/health')\n        .set('Origin', 'https://malicious-site.com');\n\n      // CORS should block or not include permissive headers\n      expect(response.headers['access-control-allow-origin']).not.toBe('https://malicious-site.com');\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('should not leak sensitive information in errors', async () => {\n      const response = await request(app)\n        .post('/api/auth/login')\n        .send({\n          email: 'nonexistent@example.com',\n          password: 'wrongpassword'\n        });\n\n      expect(response.status).toBe(401);\n      expect(response.body.error).toBe('Invalid credentials');\n      expect(response.body.error).not.toContain('user not found');\n      expect(response.body.error).not.toContain('password');\n    });\n\n    it('should handle validation errors securely', async () => {\n      const response = await request(app)\n        .post('/api/prompt-cards')\n        .set('Authorization', `Bearer ${authToken}`)\n        .send({}); // Empty body to trigger validation\n\n      expect(response.status).toBe(400);\n      expect(response.body.success).toBe(false);\n      expect(response.body).toHaveProperty('error');\n      expect(response.body).toHaveProperty('details');\n    });\n  });\n\n  describe('Request Logging', () => {\n    it('should include request ID in responses', async () => {\n      const response = await request(app).get('/api/health');\n      \n      expect(response.headers).toHaveProperty('x-request-id');\n    });\n\n    it('should log security events', async () => {\n      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();\n      \n      await request(app).get('/api/health');\n      \n      expect(consoleSpy).toHaveBeenCalledWith(\n        expect.stringContaining('Security Log - Request:')\n      );\n      \n      consoleSpy.mockRestore();\n    });\n  });\n\n  describe('File Upload Security', () => {\n    it('should reject oversized uploads', async () => {\n      const largeBuffer = Buffer.alloc(15 * 1024 * 1024); // 15MB\n      \n      const response = await request(app)\n        .post('/api/prompt-cards')\n        .set('Authorization', `Bearer ${authToken}`)\n        .set('Content-Type', 'application/json')\n        .send(largeBuffer);\n\n      expect(response.status).toBe(413);\n    });\n\n    it('should validate content types', async () => {\n      const response = await request(app)\n        .post('/api/prompt-cards')\n        .set('Authorization', `Bearer ${authToken}`)\n        .set('Content-Type', 'application/x-executable')\n        .send('malicious content');\n\n      expect(response.status).toBe(415);\n    });\n  });\n});\n\ndescribe('Security Utilities', () => {\n  describe('CSRF Token Generation', () => {\n    it('should generate unique tokens', () => {\n      const sessionId1 = 'session1';\n      const sessionId2 = 'session2';\n      \n      const token1 = generateCSRFToken(sessionId1);\n      const token2 = generateCSRFToken(sessionId2);\n      \n      expect(token1).not.toBe(token2);\n      expect(token1).toMatch(/^[a-f0-9]{64}$/);\n      expect(token2).toMatch(/^[a-f0-9]{64}$/);\n    });\n  });\n});