diff --git a/src/cli/simple-commands/hive-mind/session-manager.js b/src/cli/simple-commands/hive-mind/session-manager.js
index 1234567..abcdefg 100644
--- a/src/cli/simple-commands/hive-mind/session-manager.js
+++ b/src/cli/simple-commands/hive-mind/session-manager.js
@@ -885,7 +885,16 @@ class HiveMindSessionManager {
       await this.logSessionEvent(sessionId, 'info', 'Child process added', null, { pid });
       return true;
     }
     
-    const session = this.db.prepare('SELECT child_pids FROM sessions WHERE id = ?').get(sessionId);
+    // Check if database connection is still open
+    if (!this.db) {
+      console.warn('Database connection not available for addChildPid operation');
+      return false;
+    }
+    
+    try {
+      const session = this.db.prepare('SELECT child_pids FROM sessions WHERE id = ?').get(sessionId);
+    } catch (error) {
+      if (error.message.includes('database connection is not open') || error.message.includes('database is closed')) {
+        console.warn(`Database connection closed during addChildPid operation: ${error.message}`);
+        return false;
+      }
+      // Re-throw other errors
+      throw error;
+    }
     if (!session) return false;

     const childPids = session.child_pids ? sessionSerializer.deserializeLogData(session.child_pids) : [];
@@ -929,7 +938,16 @@ class HiveMindSessionManager {
       return true;
     }
     
-    const session = this.db.prepare('SELECT child_pids FROM sessions WHERE id = ?').get(sessionId);
+    // Check if database connection is still open
+    if (!this.db) {
+      console.warn('Database connection not available for removeChildPid operation');
+      return false;
+    }
+    
+    try {
+      const session = this.db.prepare('SELECT child_pids FROM sessions WHERE id = ?').get(sessionId);
+    } catch (error) {
+      if (error.message.includes('database connection is not open') || error.message.includes('database is closed')) {
+        console.warn(`Database connection closed during removeChildPid operation: ${error.message}`);
+        return false;
+      }
+      // Re-throw other errors
+      throw error;
+    }
     if (!session) return false;

     const childPids = session.child_pids ? sessionSerializer.deserializeLogData(session.child_pids) : [];
@@ -978,8 +986,18 @@ class HiveMindSessionManager {
       if (!session || !session.child_pids) return [];
       return sessionSerializer.deserializeLogData(session.child_pids);
     } else {
-      // Use SQLite
-      const session = this.db.prepare('SELECT child_pids FROM sessions WHERE id = ?').get(sessionId);
+      // Check if database connection is still open
+      if (!this.db) {
+        console.warn('Database connection not available for getChildPids operation');
+        return [];
+      }
+      
+      try {
+        // Use SQLite
+        const session = this.db.prepare('SELECT child_pids FROM sessions WHERE id = ?').get(sessionId);
+      } catch (error) {
+        if (error.message.includes('database connection is not open') || error.message.includes('database is closed')) {
+          console.warn(`Database connection closed during getChildPids operation: ${error.message}`);
+          return [];
+        }
+        // Re-throw other errors
+        throw error;
+      }
       if (!session || !session.child_pids) return [];
       return sessionSerializer.deserializeLogData(session.child_pids);
     }