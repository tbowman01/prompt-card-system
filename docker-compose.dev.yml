services:
  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    profiles: ["default", "gpu", "cpu"]
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - prompt-card-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend Development Server (GPU profile)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    profiles: ["gpu"]
    ports:
      - "3001:3001"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_PATH=/app/data/database.sqlite
      - OLLAMA_BASE_URL=http://ollama:11434
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=http://localhost:3000
      - DEBUG=prompt-card:*
      - DEMO_MODE=true
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./data:/app/data
      - ./backend/logs:/app/logs
    depends_on:
      - ollama
      - redis
    networks:
      - prompt-card-network
    restart: unless-stopped
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health/v2/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend Development Server (CPU profile)
  backend-cpu:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    profiles: ["cpu"]
    ports:
      - "3001:3001"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_PATH=/app/data/database.sqlite
      - OLLAMA_BASE_URL=http://ollama-cpu:11434
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGIN=http://localhost:3000
      - DEBUG=prompt-card:*
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./data:/app/data
      - ./backend/logs:/app/logs
    depends_on:
      - ollama-cpu
      - redis
    networks:
      - prompt-card-network
    restart: unless-stopped
    command: npm run dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health/v2/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Ollama LLM Service (GPU)
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_MAX_LOADED_MODELS=3
      - OLLAMA_NUM_PARALLEL=2
      - OLLAMA_LOAD_TIMEOUT=10m
    volumes:
      - ollama_models:/root/.ollama
    networks:
      - prompt-card-network
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - gpu
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Ollama CPU-only (fallback)
  ollama-cpu:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=*
      - OLLAMA_NUM_PARALLEL=2
    volumes:
      - ollama_models:/root/.ollama
    networks:
      - prompt-card-network
    restart: unless-stopped
    profiles:
      - cpu
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and queuing
  redis:
    image: redis:7-alpine
    profiles: ["default", "gpu", "cpu"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - prompt-card-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s

  # Model initialization service
  model-init:
    image: ollama/ollama:latest
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_MAX_LOADED_MODELS=3
    volumes:
      - ./scripts:/scripts
      - ollama_models:/root/.ollama
    networks:
      - prompt-card-network
    restart: "no"
    entrypoint: ["/scripts/init-models.sh"]
    profiles:
      - init

  # Development database viewer (SQLite)
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=sqlite
    volumes:
      - ./data:/var/lib/adminer/data
    networks:
      - prompt-card-network
    restart: unless-stopped
    profiles:
      - tools

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    depends_on:
      - redis
    networks:
      - prompt-card-network
    restart: unless-stopped
    profiles:
      - tools

  # PostgreSQL for production-like development
  postgres:
    image: postgres:16-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=promptcard_dev
      - POSTGRES_USER=promptcard
      - POSTGRES_PASSWORD=promptcard_dev_password
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - prompt-card-network
    restart: unless-stopped
    profiles:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U promptcard -d promptcard_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # PgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "8082:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - prompt-card-network
    restart: unless-stopped
    profiles:
      - postgres

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - prompt-card-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - prompt-card-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  ollama_models:
    driver: local
  redis_data:
    driver: local
  postgres_dev_data:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  prompt-card-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16