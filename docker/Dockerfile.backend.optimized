# syntax=docker/dockerfile:1.7-labs
# Multi-platform optimized backend Dockerfile with advanced BuildKit features

# ================================
# OPTIMIZED MULTI-STAGE BUILD
# ================================

# Base image with security updates and multi-arch support
FROM --platform=$BUILDPLATFORM node:20-alpine AS base
ARG BUILDPLATFORM
ARG TARGETPLATFORM

# Enable BuildKit experimental features
# syntax=docker/dockerfile:experimental

# Security updates and native dependencies with enhanced caching
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    sqlite \
    python3 \
    make \
    g++ \
    cairo-dev \
    jpeg-dev \
    pango-dev \
    musl-dev \
    giflib-dev \
    pixman-dev \
    pangomm-dev \
    libjpeg-turbo-dev \
    freetype-dev \
    ca-certificates \
    tzdata \
    && rm -rf /var/cache/apk/* \
    && update-ca-certificates

# Optimize for specific architecture with GPU support detection
RUN if [ "$TARGETPLATFORM" = "linux/arm64" ]; then \
      echo "Optimizing for ARM64 with NEON instructions"; \
      export CFLAGS="-mcpu=cortex-a72 -mtune=cortex-a72"; \
    elif [ "$TARGETPLATFORM" = "linux/amd64" ]; then \
      echo "Optimizing for AMD64 with SSE4.2 and AVX"; \
      export CFLAGS="-march=x86-64-v2 -mtune=generic"; \
    fi

# Set timezone and create optimized user
ENV TZ=UTC
RUN cp /usr/share/zoneinfo/UTC /etc/localtime && \
    addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nodejs

WORKDIR /app

# ================================
# DEPENDENCY CACHING LAYER
# ================================
FROM base AS deps
ARG TARGETPLATFORM

# Copy package files with enhanced caching
COPY --link package*.json ./
COPY --link tsconfig.json ./

# Optimized npm configuration with platform-specific optimizations
ENV npm_config_cache=/app/.npm-cache
ENV npm_config_prefer_offline=true
ENV npm_config_no_audit=true
ENV npm_config_no_fund=true
ENV npm_config_maxsockets=50
ENV npm_config_fetch_retries=5
ENV npm_config_fetch_retry_factor=2

# Advanced npm installation with build cache and cross-compilation support
RUN --mount=type=cache,target=/app/.npm-cache,sharing=locked \
    --mount=type=cache,target=/root/.npm,sharing=locked \
    npm ci --only=production \
    --ignore-scripts \
    --platform=$TARGETPLATFORM \
    --target_arch=$(echo $TARGETPLATFORM | cut -d'/' -f2) \
    && npm cache clean --force \
    && rm -rf ~/.npm

# ================================
# BUILD OPTIMIZATION LAYER
# ================================
FROM base AS build-deps
ARG TARGETPLATFORM

# Copy package files
COPY --link package*.json ./
COPY --link tsconfig.json ./

# Install build dependencies with enhanced caching and platform optimization
RUN --mount=type=cache,target=/app/.npm-cache,sharing=locked \
    --mount=type=cache,target=/root/.npm,sharing=locked \
    npm ci --ignore-scripts \
    --platform=$TARGETPLATFORM \
    --target_arch=$(echo $TARGETPLATFORM | cut -d'/' -f2)

# ================================
# SOURCE CODE PREPARATION
# ================================
FROM build-deps AS source
ARG TARGETPLATFORM

# Enhanced .dockerignore patterns - only copy what we need
COPY --link . .

# Remove unnecessary files to optimize build context
RUN --mount=type=cache,target=/tmp/cleanup \
    find . -name "*.md" -not -path "./README.md" -delete && \
    find . -name "*.test.*" -delete && \
    find . -name "*.spec.*" -delete && \
    rm -rf \
    .git \
    .github \
    coverage \
    __tests__ \
    tests \
    docs \
    .vscode \
    .idea \
    *.log \
    .DS_Store \
    playwright-report \
    test-results

# ================================
# BUILD STAGE WITH OPTIMIZATIONS
# ================================
FROM source AS builder
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Build environment variables for optimization
ENV NODE_ENV=production
ENV CI=true

# Platform-specific Node.js and build optimizations
ENV NODE_OPTIONS="--max-old-space-size=4096 --max-semi-space-size=256"
ENV UV_THREADPOOL_SIZE=8
ENV MAKE_OPTS="-j$(nproc)"

# Use BuildKit cache mounts for TypeScript build cache
RUN --mount=type=cache,target=/app/node_modules/.cache,sharing=locked \
    --mount=type=cache,target=/tmp/tsc-cache,sharing=locked \
    npm run build

# Optimize build output and clean unnecessary artifacts
RUN --mount=type=cache,target=/tmp/build-cache \
    npm prune --production --no-audit && \
    rm -rf src/ tests/ node_modules/.cache/ && \
    find dist -name "*.js" -exec gzip -k {} \; && \
    find dist -name "*.map" -delete

# ================================
# RUNTIME PREPARATION
# ================================
FROM base AS runtime-prep
ARG TARGETPLATFORM

# Install only runtime system dependencies with minimal footprint
RUN --mount=type=cache,target=/var/cache/apk,sharing=locked \
    apk add --no-cache \
    cairo \
    jpeg \
    pango \
    musl \
    giflib \
    pixman \
    libjpeg-turbo \
    freetype \
    && rm -rf /var/cache/apk/*

# Create required directories with proper permissions
RUN mkdir -p /app/{data,logs,uploads,temp,cache} && \
    chown -R nodejs:nodejs /app && \
    chmod 755 /app/{data,logs,uploads,temp,cache}

# ================================
# PRODUCTION STAGE (MINIMAL)
# ================================
FROM runtime-prep AS production
ARG TARGETPLATFORM

# Copy production dependencies from deps stage with optimization
COPY --from=deps --chown=nodejs:nodejs /app/node_modules ./node_modules

# Copy built application with optimized copying
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/package.json ./package.json

# Advanced security configurations
RUN chmod -R 755 /app && \
    find /app -type d -exec chmod 755 {} \; && \
    find /app -type f -exec chmod 644 {} \; && \
    chmod +x /usr/bin/dumb-init && \
    chmod +x /app/dist/server.js 2>/dev/null || true

# Switch to non-root user
USER nodejs

# Environment variables for production optimization
ENV NODE_ENV=production
ENV UV_THREADPOOL_SIZE=8
ENV NODE_OPTIONS="--max-old-space-size=2048 --max-semi-space-size=128 --optimize-for-size --enable-source-maps"
ENV HOSTNAME="0.0.0.0"

# Expose port
EXPOSE 3001

# Enhanced health check with comprehensive monitoring
HEALTHCHECK --interval=15s --timeout=5s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:3001/api/health/comprehensive \
        --connect-timeout 3 \
        --max-time 5 \
        --retry 2 \
        --retry-delay 1 \
        --retry-max-time 10 \
        || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Optimized Node.js startup with platform-specific flags
CMD ["node", \
     "--max-old-space-size=2048", \
     "--max-semi-space-size=128", \
     "--optimize-for-size", \
     "--enable-source-maps", \
     "--experimental-worker", \
     "--experimental-import-meta-resolve", \
     "dist/server.js"]

# ================================
# METADATA AND LABELS
# ================================
LABEL maintainer="Docker Specialist <docker@promptcard.io>"
LABEL org.opencontainers.image.title="Prompt Card Backend"
LABEL org.opencontainers.image.description="Optimized Node.js backend for AI prompt management with SQLite and Canvas support"
LABEL org.opencontainers.image.version="1.0.0"
LABEL org.opencontainers.image.architecture=$TARGETPLATFORM
LABEL docker.optimization.level="advanced"
LABEL docker.buildkit.cache="enabled"
LABEL docker.multi-platform="true"
LABEL docker.native.deps="cairo,canvas,sqlite"