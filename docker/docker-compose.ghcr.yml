# Production Docker Compose with GitHub Container Registry Images
# Uses pre-built images from GitHub Container Registry (GHCR)

version: '3.8'

services:
  # NGINX Reverse Proxy with SSL
  nginx:
    image: nginx:1.25-alpine
    container_name: prompt-nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - auth
    networks:
      - prompt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend - GitHub Container Registry
  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/tbowman01/prompt-card-system-frontend:latest}
    container_name: prompt-frontend
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:3001}
      - NEXT_PUBLIC_WS_URL=${NEXT_PUBLIC_WS_URL:-ws://localhost:3001}
      - NEXT_PUBLIC_AUTH_URL=${NEXT_PUBLIC_AUTH_URL:-http://localhost:8005}
    networks:
      - prompt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend - GitHub Container Registry
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/tbowman01/prompt-card-system-backend:latest}
    container_name: prompt-backend
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL:-sqlite:./data/database.sqlite}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - OLLAMA_HOST=${OLLAMA_HOST:-http://ollama:11434}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-1000}
      - MONITORING_ENABLED=${MONITORING_ENABLED:-true}
    volumes:
      - backend_data:/app/data
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      - redis
      - ollama
    networks:
      - prompt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s

  # Auth Service - GitHub Container Registry
  auth:
    image: ${AUTH_IMAGE:-ghcr.io/tbowman01/prompt-card-system-auth:latest}
    container_name: prompt-auth
    environment:
      - NODE_ENV=production
      - PORT=8005
      - DATABASE_URL=${AUTH_DATABASE_URL:-sqlite:./data/auth.sqlite}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - SESSION_SECRET=${SESSION_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - auth_data:/app/data
    depends_on:
      - redis
    networks:
      - prompt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8005/auth/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Ollama LLM Service - GitHub Container Registry (with preloaded models)
  ollama:
    image: ${OLLAMA_IMAGE:-ghcr.io/tbowman01/prompt-card-system-ollama:latest}
    container_name: prompt-ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_ORIGINS=${OLLAMA_ORIGINS:-*}
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-2}
      - DOWNLOAD_ADDITIONAL_MODELS=${DOWNLOAD_ADDITIONAL_MODELS:-true}
    volumes:
      - ollama_models:/root/.ollama
    networks:
      - prompt-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: ${OLLAMA_MEMORY_LIMIT:-8G}
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 300s

  # Redis Cache & Session Store
  redis:
    image: redis:7.2-alpine
    container_name: prompt-redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - prompt-network
    restart: unless-stopped
    command: >
      sh -c "
      if [ -n '$$REDIS_PASSWORD' ]; then
        redis-server /usr/local/etc/redis/redis.conf --requirepass $$REDIS_PASSWORD
      else
        redis-server /usr/local/etc/redis/redis.conf
      fi
      "
    healthcheck:
      test: |
        if [ -n "$REDIS_PASSWORD" ]; then
          redis-cli -a "$REDIS_PASSWORD" ping
        else
          redis-cli ping
        fi
      interval: 10s
      timeout: 5s
      retries: 3

  # Monitoring: Prometheus
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prompt-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.external-url=/prometheus'
      - '--web.route-prefix=/prometheus'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - prompt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring: Grafana
  grafana:
    image: grafana/grafana:10.2.0
    container_name: prompt-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL:-http://localhost:3000/grafana}
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_INSTALL_PLUGINS=redis-datasource,prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - prompt-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Volumes for persistent data
volumes:
  backend_data:
    driver: local
  auth_data:
    driver: local
  redis_data:
    driver: local
  ollama_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local

# Network for service communication
networks:
  prompt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

# Health check configuration
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 30s