version: '3.8'

# Enable BuildKit for modern Docker builds
x-buildkit-config: &buildkit-config
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

services:
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      # Modern BuildKit configuration
      target: production
      # Multi-stage build arguments for optimization
      args:
        - NODE_ENV=production
        - BUILDKIT_INLINE_CACHE=1
      # BuildKit cache configuration
      cache_from:
        - node:20-alpine
        - type=gha
      cache_to:
        - type=gha,mode=max
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      <<: *buildkit-config
      NEXT_PUBLIC_API_URL: http://backend:3001
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1
    # Remove volumes for production builds - use built images
    # volumes:
    #   - ./frontend:/app
    #   - /app/node_modules
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      # Modern BuildKit configuration
      target: production
      # Multi-stage build arguments for optimization
      args:
        - NODE_ENV=production
        - BUILDKIT_INLINE_CACHE=1
      # BuildKit cache configuration
      cache_from:
        - node:20-alpine
        - type=gha
      cache_to:
        - type=gha,mode=max
    ports:
      - "3001:3001"
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      <<: *buildkit-config
      NODE_ENV: production
      OLLAMA_BASE_URL: http://ollama:11434
      DATABASE_PATH: /app/data/database.sqlite
      CORS_ORIGIN: http://frontend:3000
    # Remove volumes for production builds - use built images
    # volumes:
    #   - ./backend:/app
    #   - /app/node_modules
    volumes:
      - ./data:/app/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  ollama:
    build:
      context: ./ollama
      dockerfile: Dockerfile
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_KEEP_ALIVE=24h
      - OLLAMA_HOST=0.0.0.0
      - DOWNLOAD_MODELS=true
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  auth:
    build:
      context: .
      dockerfile: auth/Dockerfile
      target: production
    ports:
      - "8005:8005"
    environment:
      NODE_ENV: production
      AUTH_SECRET: ${AUTH_SECRET:-default-secret-change-in-production}
      DATABASE_URL: ${AUTH_DATABASE_URL:-postgres://auth:auth@db:5432/auth}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8005/auth/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Model initialization service - runs once to download model
  model-loader:
    image: ollama/ollama:latest
    depends_on:
      ollama:
        condition: service_healthy
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=http://ollama:11434
    command: ["sh", "-c", "ollama pull llama2:7b && ollama pull llama2:13b"]
    networks:
      - app-network
    restart: "no"

volumes:
  ollama-data:
    driver: local
  app-data:
    driver: local

networks:
  app-network:
    driver: bridge