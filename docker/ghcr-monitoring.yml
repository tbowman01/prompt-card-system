# GHCR Monitoring Configuration
# Advanced monitoring for GitHub Container Registry operations

version: '3.8'

networks:
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

services:
  # ===== GHCR METRICS EXPORTER =====
  ghcr-exporter:
    image: prom/node-exporter:latest
    container_name: ghcr-metrics-exporter
    command:
      - '--path.rootfs=/host'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.docker'
      - '--collector.processes'
      - '--web.listen-address=:9100'
    ports:
      - "9100:9100"
    volumes:
      - /:/host:ro,rslave
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      monitoring.service: "ghcr-exporter"
      monitoring.type: "metrics"

  # ===== DOCKER REGISTRY METRICS =====
  registry-exporter:
    image: quay.io/prometheus/registry-exporter:latest
    container_name: registry-metrics
    command:
      - '--registry.url=https://ghcr.io'
      - '--web.listen-address=:9101'
      - '--log.level=info'
    ports:
      - "9101:9101"
    environment:
      REGISTRY_URL: "https://ghcr.io"
      REGISTRY_USERNAME: "${GITHUB_ACTOR}"
      REGISTRY_PASSWORD: "${GITHUB_TOKEN}"
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      monitoring.service: "registry-exporter"
      monitoring.type: "metrics"

  # ===== PROMETHEUS FOR GHCR MONITORING =====
  prometheus-ghcr:
    image: prom/prometheus:v2.48.0
    container_name: prometheus-ghcr
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.wal-compression'
      - '--web.external-url=http://localhost:9092'
    ports:
      - "9092:9090"
    volumes:
      - ./monitoring/ghcr-prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/ghcr-alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_ghcr_data:/prometheus
    networks:
      - monitoring
    depends_on:
      - ghcr-exporter
      - registry-exporter
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      monitoring.service: "prometheus-ghcr"
      monitoring.type: "tsdb"

  # ===== ALERTMANAGER FOR GHCR =====
  alertmanager-ghcr:
    image: prom/alertmanager:v0.26.0
    container_name: alertmanager-ghcr
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--web.route-prefix=/'
      - '--cluster.listen-address='
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/ghcr-alertmanager.yml:/etc/alertmanager/config.yml:ro
      - alertmanager_ghcr_data:/alertmanager
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      monitoring.service: "alertmanager-ghcr"
      monitoring.type: "alerting"

  # ===== GRAFANA FOR GHCR DASHBOARDS =====
  grafana-ghcr:
    image: grafana/grafana:10.2.0
    container_name: grafana-ghcr
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_INSTALL_PLUGINS: "grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel"
      GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH: "/var/lib/grafana/dashboards/ghcr-overview.json"
    ports:
      - "3002:3000"
    volumes:
      - grafana_ghcr_data:/var/lib/grafana
      - ./monitoring/grafana/ghcr-dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/ghcr-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./monitoring/grafana/ghcr-dashboard-provider.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    networks:
      - monitoring
    depends_on:
      - prometheus-ghcr
    restart: unless-stopped
    labels:
      monitoring.service: "grafana-ghcr"
      monitoring.type: "visualization"

  # ===== GHCR HEALTH CHECKER =====
  ghcr-health-checker:
    image: alpine/curl:latest
    container_name: ghcr-health-checker
    command: >
      sh -c "
      while true; do
        echo 'üîç Checking GHCR health...'
        
        # Check registry status
        if curl -f -s https://ghcr.io/v2/ > /dev/null; then
          echo '‚úÖ GHCR is accessible'
        else
          echo '‚ùå GHCR is not accessible'
        fi
        
        # Check our packages
        echo 'üì¶ Checking package accessibility...'
        for service in backend frontend auth ollama; do
          if curl -f -s -H 'Authorization: Bearer ${GITHUB_TOKEN}' \
             https://ghcr.io/v2/${NAMESPACE}/prompt-card-\$service/manifests/latest > /dev/null; then
            echo \"‚úÖ prompt-card-\$service:latest is accessible\"
          else
            echo \"‚ö†Ô∏è prompt-card-\$service:latest is not accessible\"
          fi
        done
        
        echo '‚è∞ Next check in 5 minutes...'
        sleep 300
      done
      "
    environment:
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      NAMESPACE: ${NAMESPACE:-tbowman01}
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      monitoring.service: "ghcr-health"
      monitoring.type: "health-check"

  # ===== DOCKER IMAGE ANALYZER =====
  image-analyzer:
    image: wagoodman/dive:latest
    container_name: image-analyzer
    entrypoint: >
      sh -c "
      echo 'üî¨ Docker Image Analyzer Ready'
      echo 'To analyze an image:'
      echo 'docker exec -it image-analyzer dive ghcr.io/tbowman01/prompt-card-backend:latest'
      tail -f /dev/null
      "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      monitoring.service: "image-analyzer"
      monitoring.type: "analysis"

  # ===== GHCR CACHE ANALYZER =====
  cache-analyzer:
    image: alpine:latest
    container_name: cache-analyzer
    command: >
      sh -c "
      apk add --no-cache docker-cli curl jq
      
      while true; do
        echo 'üíæ Analyzing build cache usage...'
        
        # Get cache information
        docker system df --format 'table {{.Type}}\t{{.Total}}\t{{.Active}}\t{{.Size}}\t{{.Reclaimable}}'
        
        echo 'üìä Build cache statistics:'
        docker builder du --verbose 2>/dev/null || echo 'No buildx data available'
        
        echo '‚è∞ Next analysis in 1 hour...'
        sleep 3600
      done
      "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitoring
    restart: unless-stopped
    labels:
      monitoring.service: "cache-analyzer"
      monitoring.type: "analysis"

volumes:
  prometheus_ghcr_data:
    driver: local
    labels:
      volume.purpose: "ghcr-prometheus-data"
  
  alertmanager_ghcr_data:
    driver: local
    labels:
      volume.purpose: "ghcr-alertmanager-data"
  
  grafana_ghcr_data:
    driver: local
    labels:
      volume.purpose: "ghcr-grafana-data"