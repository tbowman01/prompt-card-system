2806e0115f2db27171203b1c07c27d51
"use strict";

/* istanbul ignore next */
function cov_a6jn65hxx() {
  var path = "/workspaces/prompt-card-system/frontend/src/app/api/health/route.ts";
  var hash = "3bffea4f6a256fd4996c3f96c2806213f5ff4ad3";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/frontend/src/app/api/health/route.ts",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 0
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "2": {
        start: {
          line: 6,
          column: 24
        },
        end: {
          line: 9,
          column: 7
        }
      },
      "3": {
        start: {
          line: 11,
          column: 0
        },
        end: {
          line: 18,
          column: 3
        }
      },
      "4": {
        start: {
          line: 13,
          column: 8
        },
        end: {
          line: 13,
          column: 19
        }
      },
      "5": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 16,
          column: 20
        }
      },
      "6": {
        start: {
          line: 19,
          column: 16
        },
        end: {
          line: 19,
          column: 38
        }
      },
      "7": {
        start: {
          line: 20,
          column: 26
        },
        end: {
          line: 20,
          column: 65
        }
      },
      "8": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 6
        }
      },
      "9": {
        start: {
          line: 27,
          column: 22
        },
        end: {
          line: 27,
          column: 32
        }
      },
      "10": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "11": {
        start: {
          line: 30,
          column: 28
        },
        end: {
          line: 30,
          column: 49
        }
      },
      "12": {
        start: {
          line: 31,
          column: 28
        },
        end: {
          line: 31,
          column: 50
        }
      },
      "13": {
        start: {
          line: 32,
          column: 27
        },
        end: {
          line: 32,
          column: 48
        }
      },
      "14": {
        start: {
          line: 33,
          column: 27
        },
        end: {
          line: 33,
          column: 51
        }
      },
      "15": {
        start: {
          line: 34,
          column: 33
        },
        end: {
          line: 34,
          column: 63
        }
      },
      "16": {
        start: {
          line: 36,
          column: 28
        },
        end: {
          line: 36,
          column: 39
        }
      },
      "17": {
        start: {
          line: 37,
          column: 29
        },
        end: {
          line: 37,
          column: 31
        }
      },
      "18": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 52,
          column: 9
        }
      },
      "19": {
        start: {
          line: 39,
          column: 31
        },
        end: {
          line: 39,
          column: 89
        }
      },
      "20": {
        start: {
          line: 40,
          column: 36
        },
        end: {
          line: 42,
          column: 14
        }
      },
      "21": {
        start: {
          line: 43,
          column: 12
        },
        end: {
          line: 48,
          column: 13
        }
      },
      "22": {
        start: {
          line: 44,
          column: 16
        },
        end: {
          line: 44,
          column: 42
        }
      },
      "23": {
        start: {
          line: 46,
          column: 16
        },
        end: {
          line: 46,
          column: 43
        }
      },
      "24": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 78
        }
      },
      "25": {
        start: {
          line: 50,
          column: 12
        },
        end: {
          line: 50,
          column: 40
        }
      },
      "26": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 98
        }
      },
      "27": {
        start: {
          line: 54,
          column: 28
        },
        end: {
          line: 54,
          column: 37
        }
      },
      "28": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "29": {
        start: {
          line: 56,
          column: 12
        },
        end: {
          line: 56,
          column: 40
        }
      },
      "30": {
        start: {
          line: 57,
          column: 15
        },
        end: {
          line: 59,
          column: 9
        }
      },
      "31": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 39
        }
      },
      "32": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 91,
          column: 9
        }
      },
      "33": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 98,
          column: 11
        }
      },
      "34": {
        start: {
          line: 100,
          column: 8
        },
        end: {
          line: 108,
          column: 11
        }
      },
      "35": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "36": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 116,
          column: 11
        }
      },
      "37": {
        start: {
          line: 118,
          column: 8
        },
        end: {
          line: 120,
          column: 11
        }
      }
    },
    fnMap: {
      "0": {
        name: "_export",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 16
          }
        },
        loc: {
          start: {
            line: 5,
            column: 30
          },
          end: {
            line: 10,
            column: 1
          }
        },
        line: 5
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 12,
            column: 9
          },
          end: {
            line: 12,
            column: 10
          }
        },
        loc: {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 14,
            column: 5
          }
        },
        line: 12
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 15,
            column: 10
          },
          end: {
            line: 15,
            column: 11
          }
        },
        loc: {
          start: {
            line: 15,
            column: 21
          },
          end: {
            line: 17,
            column: 5
          }
        },
        line: 15
      },
      "3": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 33
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 21
      },
      "4": {
        name: "GET",
        decl: {
          start: {
            line: 26,
            column: 15
          },
          end: {
            line: 26,
            column: 18
          }
        },
        loc: {
          start: {
            line: 26,
            column: 28
          },
          end: {
            line: 110,
            column: 1
          }
        },
        line: 26
      },
      "5": {
        name: "HEAD",
        decl: {
          start: {
            line: 111,
            column: 15
          },
          end: {
            line: 111,
            column: 19
          }
        },
        loc: {
          start: {
            line: 111,
            column: 29
          },
          end: {
            line: 122,
            column: 1
          }
        },
        line: 111
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 22,
            column: 38
          }
        }, {
          start: {
            line: 22,
            column: 41
          },
          end: {
            line: 24,
            column: 5
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 14
          }
        }, {
          start: {
            line: 22,
            column: 18
          },
          end: {
            line: 22,
            column: 32
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 39,
            column: 31
          },
          end: {
            line: 39,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 39,
            column: 31
          },
          end: {
            line: 39,
            column: 62
          }
        }, {
          start: {
            line: 39,
            column: 66
          },
          end: {
            line: 39,
            column: 89
          }
        }],
        line: 39
      },
      "3": {
        loc: {
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 12
          },
          end: {
            line: 48,
            column: 13
          }
        }, {
          start: {
            line: 45,
            column: 19
          },
          end: {
            line: 48,
            column: 13
          }
        }],
        line: 43
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 29
          },
          end: {
            line: 51,
            column: 97
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 54
          },
          end: {
            line: 51,
            column: 67
          }
        }, {
          start: {
            line: 51,
            column: 70
          },
          end: {
            line: 51,
            column: 97
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 59,
            column: 9
          }
        }],
        line: 55
      },
      "6": {
        loc: {
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 55,
            column: 12
          },
          end: {
            line: 55,
            column: 41
          }
        }, {
          start: {
            line: 55,
            column: 45
          },
          end: {
            line: 55,
            column: 66
          }
        }],
        line: 55
      },
      "7": {
        loc: {
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 59,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 15
          },
          end: {
            line: 59,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "8": {
        loc: {
          start: {
            line: 57,
            column: 19
          },
          end: {
            line: 57,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 57,
            column: 19
          },
          end: {
            line: 57,
            column: 47
          }
        }, {
          start: {
            line: 57,
            column: 51
          },
          end: {
            line: 57,
            column: 72
          }
        }],
        line: 57
      },
      "9": {
        loc: {
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 64,
            column: 21
          },
          end: {
            line: 64,
            column: 52
          }
        }, {
          start: {
            line: 64,
            column: 56
          },
          end: {
            line: 64,
            column: 63
          }
        }],
        line: 64
      },
      "10": {
        loc: {
          start: {
            line: 65,
            column: 25
          },
          end: {
            line: 65,
            column: 62
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 65,
            column: 25
          },
          end: {
            line: 65,
            column: 45
          }
        }, {
          start: {
            line: 65,
            column: 49
          },
          end: {
            line: 65,
            column: 62
          }
        }],
        line: 65
      },
      "11": {
        loc: {
          start: {
            line: 75,
            column: 29
          },
          end: {
            line: 75,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 29
          },
          end: {
            line: 75,
            column: 43
          }
        }, {
          start: {
            line: 75,
            column: 47
          },
          end: {
            line: 75,
            column: 56
          }
        }],
        line: 75
      },
      "12": {
        loc: {
          start: {
            line: 76,
            column: 25
          },
          end: {
            line: 76,
            column: 83
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 25
          },
          end: {
            line: 76,
            column: 56
          }
        }, {
          start: {
            line: 76,
            column: 60
          },
          end: {
            line: 76,
            column: 83
          }
        }],
        line: 76
      },
      "13": {
        loc: {
          start: {
            line: 93,
            column: 20
          },
          end: {
            line: 93,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 93,
            column: 50
          },
          end: {
            line: 93,
            column: 53
          }
        }, {
          start: {
            line: 93,
            column: 56
          },
          end: {
            line: 93,
            column: 96
          }
        }],
        line: 93
      },
      "14": {
        loc: {
          start: {
            line: 93,
            column: 56
          },
          end: {
            line: 93,
            column: 96
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 93,
            column: 87
          },
          end: {
            line: 93,
            column: 90
          }
        }, {
          start: {
            line: 93,
            column: 93
          },
          end: {
            line: 93,
            column: 96
          }
        }],
        line: 93
      },
      "15": {
        loc: {
          start: {
            line: 104,
            column: 19
          },
          end: {
            line: 104,
            column: 81
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 104,
            column: 44
          },
          end: {
            line: 104,
            column: 57
          }
        }, {
          start: {
            line: 104,
            column: 60
          },
          end: {
            line: 104,
            column: 81
          }
        }],
        line: 104
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/workspaces/prompt-card-system/frontend/src/app/api/health/route.ts"],
      sourcesContent: ["import { NextRequest, NextResponse } from 'next/server';\nimport os from 'os';\n\ninterface HealthStatus {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: string;\n  service: string;\n  version: string;\n  environment: string;\n  uptime: number;\n  memory: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  details?: {\n    [key: string]: any;\n  };\n}\n\nexport async function GET(request: NextRequest) {\n  const startTime = Date.now();\n  \n  try {\n    // Get memory usage\n    const memoryUsage = process.memoryUsage();\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemory = totalMemory - freeMemory;\n    const memoryPercentage = (usedMemory / totalMemory) * 100;\n    \n    // Check backend connectivity\n    let backendStatus: 'healthy' | 'degraded' | 'unhealthy' = 'unhealthy';\n    let backendMessage = '';\n    \n    try {\n      const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\n      const backendResponse = await fetch(`${backendUrl}/api/health`, {\n        signal: AbortSignal.timeout(3000)\n      });\n      \n      if (backendResponse.ok) {\n        backendStatus = 'healthy';\n      } else {\n        backendStatus = 'degraded';\n        backendMessage = `Backend returned ${backendResponse.status}`;\n      }\n    } catch (error) {\n      backendStatus = 'unhealthy';\n      backendMessage = error instanceof Error ? error.message : 'Backend connection failed';\n    }\n    \n    // Determine overall health\n    let overallStatus: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n    \n    if (backendStatus === 'unhealthy' || memoryPercentage > 90) {\n      overallStatus = 'unhealthy';\n    } else if (backendStatus === 'degraded' || memoryPercentage > 80) {\n      overallStatus = 'degraded';\n    }\n    \n    const health: HealthStatus = {\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      service: 'prompt-card-frontend',\n      version: process.env.npm_package_version || '1.0.0',\n      environment: process.env.NODE_ENV || 'development',\n      uptime: process.uptime(),\n      memory: {\n        used: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n        total: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n        percentage: Math.round((memoryUsage.heapUsed / memoryUsage.heapTotal) * 100)\n      },\n      details: {\n        backend: {\n          status: backendStatus,\n          message: backendMessage || undefined,\n          url: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001'\n        },\n        system: {\n          platform: os.platform(),\n          nodeVersion: process.version,\n          cpus: os.cpus().length,\n          loadAverage: os.loadavg(),\n          systemMemory: {\n            used: Math.round(usedMemory / 1024 / 1024 / 1024 * 100) / 100,\n            total: Math.round(totalMemory / 1024 / 1024 / 1024 * 100) / 100,\n            percentage: Math.round(memoryPercentage)\n          }\n        },\n        responseTime: Date.now() - startTime\n      }\n    };\n    \n    return NextResponse.json(health, {\n      status: overallStatus === 'healthy' ? 200 : overallStatus === 'degraded' ? 200 : 503,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'X-Health-Status': overallStatus\n      }\n    });\n  } catch (error) {\n    return NextResponse.json(\n      {\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        service: 'prompt-card-frontend',\n        error: error instanceof Error ? error.message : 'Health check failed',\n        responseTime: Date.now() - startTime\n      },\n      { status: 503 }\n    );\n  }\n}\n\n// Readiness endpoint for container orchestration\nexport async function HEAD(request: NextRequest) {\n  try {\n    // Simple check - if we can respond, we're ready\n    return new NextResponse(null, { status: 200 });\n  } catch (error) {\n    return new NextResponse(null, { status: 503 });\n  }\n}"],
      names: ["GET", "HEAD", "request", "startTime", "Date", "now", "memoryUsage", "process", "totalMemory", "os", "totalmem", "freeMemory", "freemem", "usedMemory", "memoryPercentage", "backendStatus", "backendMessage", "backendUrl", "env", "NEXT_PUBLIC_API_URL", "backendResponse", "fetch", "signal", "AbortSignal", "timeout", "ok", "status", "error", "Error", "message", "overallStatus", "health", "timestamp", "toISOString", "service", "version", "npm_package_version", "environment", "NODE_ENV", "uptime", "memory", "used", "Math", "round", "heapUsed", "total", "heapTotal", "percentage", "details", "backend", "undefined", "url", "system", "platform", "nodeVersion", "cpus", "length", "loadAverage", "loadavg", "systemMemory", "responseTime", "NextResponse", "json", "headers"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3bffea4f6a256fd4996c3f96c2806213f5ff4ad3"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_a6jn65hxx = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_a6jn65hxx();
cov_a6jn65hxx().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
function _export(target, all) {
  /* istanbul ignore next */
  cov_a6jn65hxx().f[0]++;
  cov_a6jn65hxx().s[1]++;
  for (var name in all) {
    /* istanbul ignore next */
    cov_a6jn65hxx().s[2]++;
    Object.defineProperty(target, name, {
      enumerable: true,
      get: all[name]
    });
  }
}
/* istanbul ignore next */
cov_a6jn65hxx().s[3]++;
_export(exports, {
  GET: function () {
    /* istanbul ignore next */
    cov_a6jn65hxx().f[1]++;
    cov_a6jn65hxx().s[4]++;
    return GET;
  },
  HEAD: function () {
    /* istanbul ignore next */
    cov_a6jn65hxx().f[2]++;
    cov_a6jn65hxx().s[5]++;
    return HEAD;
  }
});
const _server =
/* istanbul ignore next */
(cov_a6jn65hxx().s[6]++, require("next/server"));
const _os =
/* istanbul ignore next */
(/*#__PURE__*/cov_a6jn65hxx().s[7]++, _interop_require_default(require("os")));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_a6jn65hxx().f[3]++;
  cov_a6jn65hxx().s[8]++;
  return /* istanbul ignore next */(cov_a6jn65hxx().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_a6jn65hxx().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_a6jn65hxx().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_a6jn65hxx().b[0][1]++, {
    default: obj
  });
}
async function GET(request) {
  /* istanbul ignore next */
  cov_a6jn65hxx().f[4]++;
  const startTime =
  /* istanbul ignore next */
  (cov_a6jn65hxx().s[9]++, Date.now());
  /* istanbul ignore next */
  cov_a6jn65hxx().s[10]++;
  try {
    // Get memory usage
    const memoryUsage =
    /* istanbul ignore next */
    (cov_a6jn65hxx().s[11]++, process.memoryUsage());
    const totalMemory =
    /* istanbul ignore next */
    (cov_a6jn65hxx().s[12]++, _os.default.totalmem());
    const freeMemory =
    /* istanbul ignore next */
    (cov_a6jn65hxx().s[13]++, _os.default.freemem());
    const usedMemory =
    /* istanbul ignore next */
    (cov_a6jn65hxx().s[14]++, totalMemory - freeMemory);
    const memoryPercentage =
    /* istanbul ignore next */
    (cov_a6jn65hxx().s[15]++, usedMemory / totalMemory * 100);
    // Check backend connectivity
    let backendStatus =
    /* istanbul ignore next */
    (cov_a6jn65hxx().s[16]++, "unhealthy");
    let backendMessage =
    /* istanbul ignore next */
    (cov_a6jn65hxx().s[17]++, "");
    /* istanbul ignore next */
    cov_a6jn65hxx().s[18]++;
    try {
      const backendUrl =
      /* istanbul ignore next */
      (cov_a6jn65hxx().s[19]++,
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[2][0]++, process.env.NEXT_PUBLIC_API_URL) ||
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[2][1]++, "http://localhost:3001"));
      const backendResponse =
      /* istanbul ignore next */
      (cov_a6jn65hxx().s[20]++, await fetch(`${backendUrl}/api/health`, {
        signal: AbortSignal.timeout(3000)
      }));
      /* istanbul ignore next */
      cov_a6jn65hxx().s[21]++;
      if (backendResponse.ok) {
        /* istanbul ignore next */
        cov_a6jn65hxx().b[3][0]++;
        cov_a6jn65hxx().s[22]++;
        backendStatus = "healthy";
      } else {
        /* istanbul ignore next */
        cov_a6jn65hxx().b[3][1]++;
        cov_a6jn65hxx().s[23]++;
        backendStatus = "degraded";
        /* istanbul ignore next */
        cov_a6jn65hxx().s[24]++;
        backendMessage = `Backend returned ${backendResponse.status}`;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_a6jn65hxx().s[25]++;
      backendStatus = "unhealthy";
      /* istanbul ignore next */
      cov_a6jn65hxx().s[26]++;
      backendMessage = error instanceof Error ?
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[4][0]++, error.message) :
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[4][1]++, "Backend connection failed");
    }
    // Determine overall health
    let overallStatus =
    /* istanbul ignore next */
    (cov_a6jn65hxx().s[27]++, "healthy");
    /* istanbul ignore next */
    cov_a6jn65hxx().s[28]++;
    if (
    /* istanbul ignore next */
    (cov_a6jn65hxx().b[6][0]++, backendStatus === "unhealthy") ||
    /* istanbul ignore next */
    (cov_a6jn65hxx().b[6][1]++, memoryPercentage > 90)) {
      /* istanbul ignore next */
      cov_a6jn65hxx().b[5][0]++;
      cov_a6jn65hxx().s[29]++;
      overallStatus = "unhealthy";
    } else {
      /* istanbul ignore next */
      cov_a6jn65hxx().b[5][1]++;
      cov_a6jn65hxx().s[30]++;
      if (
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[8][0]++, backendStatus === "degraded") ||
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[8][1]++, memoryPercentage > 80)) {
        /* istanbul ignore next */
        cov_a6jn65hxx().b[7][0]++;
        cov_a6jn65hxx().s[31]++;
        overallStatus = "degraded";
      } else
      /* istanbul ignore next */
      {
        cov_a6jn65hxx().b[7][1]++;
      }
    }
    const health =
    /* istanbul ignore next */
    (cov_a6jn65hxx().s[32]++, {
      status: overallStatus,
      timestamp: new Date().toISOString(),
      service: "prompt-card-frontend",
      version:
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[9][0]++, process.env.npm_package_version) ||
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[9][1]++, "1.0.0"),
      environment:
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[10][0]++, process.env.NODE_ENV) ||
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[10][1]++, "development"),
      uptime: process.uptime(),
      memory: {
        used: Math.round(memoryUsage.heapUsed / 1024 / 1024),
        total: Math.round(memoryUsage.heapTotal / 1024 / 1024),
        percentage: Math.round(memoryUsage.heapUsed / memoryUsage.heapTotal * 100)
      },
      details: {
        backend: {
          status: backendStatus,
          message:
          /* istanbul ignore next */
          (cov_a6jn65hxx().b[11][0]++, backendMessage) ||
          /* istanbul ignore next */
          (cov_a6jn65hxx().b[11][1]++, undefined),
          url:
          /* istanbul ignore next */
          (cov_a6jn65hxx().b[12][0]++, process.env.NEXT_PUBLIC_API_URL) ||
          /* istanbul ignore next */
          (cov_a6jn65hxx().b[12][1]++, "http://localhost:3001")
        },
        system: {
          platform: _os.default.platform(),
          nodeVersion: process.version,
          cpus: _os.default.cpus().length,
          loadAverage: _os.default.loadavg(),
          systemMemory: {
            used: Math.round(usedMemory / 1024 / 1024 / 1024 * 100) / 100,
            total: Math.round(totalMemory / 1024 / 1024 / 1024 * 100) / 100,
            percentage: Math.round(memoryPercentage)
          }
        },
        responseTime: Date.now() - startTime
      }
    });
    /* istanbul ignore next */
    cov_a6jn65hxx().s[33]++;
    return _server.NextResponse.json(health, {
      status: overallStatus === "healthy" ?
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[13][0]++, 200) :
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[13][1]++, overallStatus === "degraded" ?
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[14][0]++, 200) :
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[14][1]++, 503)),
      headers: {
        "Cache-Control": "no-cache, no-store, must-revalidate",
        "X-Health-Status": overallStatus
      }
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_a6jn65hxx().s[34]++;
    return _server.NextResponse.json({
      status: "unhealthy",
      timestamp: new Date().toISOString(),
      service: "prompt-card-frontend",
      error: error instanceof Error ?
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[15][0]++, error.message) :
      /* istanbul ignore next */
      (cov_a6jn65hxx().b[15][1]++, "Health check failed"),
      responseTime: Date.now() - startTime
    }, {
      status: 503
    });
  }
}
async function HEAD(request) {
  /* istanbul ignore next */
  cov_a6jn65hxx().f[5]++;
  cov_a6jn65hxx().s[35]++;
  try {
    /* istanbul ignore next */
    cov_a6jn65hxx().s[36]++;
    // Simple check - if we can respond, we're ready
    return new _server.NextResponse(null, {
      status: 200
    });
  } catch (error) {
    /* istanbul ignore next */
    cov_a6jn65hxx().s[37]++;
    return new _server.NextResponse(null, {
      status: 503
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJHRVQiLCJjb3ZfYTZqbjY1aHh4IiwiZiIsInMiLCJIRUFEIiwicmVxdWVzdCIsInN0YXJ0VGltZSIsIkRhdGUiLCJub3ciLCJtZW1vcnlVc2FnZSIsInByb2Nlc3MiLCJ0b3RhbE1lbW9yeSIsIl9vcyIsImRlZmF1bHQiLCJ0b3RhbG1lbSIsImZyZWVNZW1vcnkiLCJmcmVlbWVtIiwidXNlZE1lbW9yeSIsIm1lbW9yeVBlcmNlbnRhZ2UiLCJiYWNrZW5kU3RhdHVzIiwiYmFja2VuZE1lc3NhZ2UiLCJiYWNrZW5kVXJsIiwiYiIsImVudiIsIk5FWFRfUFVCTElDX0FQSV9VUkwiLCJiYWNrZW5kUmVzcG9uc2UiLCJmZXRjaCIsInNpZ25hbCIsIkFib3J0U2lnbmFsIiwidGltZW91dCIsIm9rIiwic3RhdHVzIiwiZXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJvdmVyYWxsU3RhdHVzIiwiaGVhbHRoIiwidGltZXN0YW1wIiwidG9JU09TdHJpbmciLCJzZXJ2aWNlIiwidmVyc2lvbiIsIm5wbV9wYWNrYWdlX3ZlcnNpb24iLCJlbnZpcm9ubWVudCIsIk5PREVfRU5WIiwidXB0aW1lIiwibWVtb3J5IiwidXNlZCIsIk1hdGgiLCJyb3VuZCIsImhlYXBVc2VkIiwidG90YWwiLCJoZWFwVG90YWwiLCJwZXJjZW50YWdlIiwiZGV0YWlscyIsImJhY2tlbmQiLCJ1bmRlZmluZWQiLCJ1cmwiLCJzeXN0ZW0iLCJwbGF0Zm9ybSIsIm5vZGVWZXJzaW9uIiwiY3B1cyIsImxlbmd0aCIsImxvYWRBdmVyYWdlIiwibG9hZGF2ZyIsInN5c3RlbU1lbW9yeSIsInJlc3BvbnNlVGltZSIsIl9zZXJ2ZXIiLCJOZXh0UmVzcG9uc2UiLCJqc29uIiwiaGVhZGVycyJdLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9mcm9udGVuZC9zcmMvYXBwL2FwaS9oZWFsdGgvcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCBvcyBmcm9tICdvcyc7XG5cbmludGVyZmFjZSBIZWFsdGhTdGF0dXMge1xuICBzdGF0dXM6ICdoZWFsdGh5JyB8ICdkZWdyYWRlZCcgfCAndW5oZWFsdGh5JztcbiAgdGltZXN0YW1wOiBzdHJpbmc7XG4gIHNlcnZpY2U6IHN0cmluZztcbiAgdmVyc2lvbjogc3RyaW5nO1xuICBlbnZpcm9ubWVudDogc3RyaW5nO1xuICB1cHRpbWU6IG51bWJlcjtcbiAgbWVtb3J5OiB7XG4gICAgdXNlZDogbnVtYmVyO1xuICAgIHRvdGFsOiBudW1iZXI7XG4gICAgcGVyY2VudGFnZTogbnVtYmVyO1xuICB9O1xuICBkZXRhaWxzPzoge1xuICAgIFtrZXk6IHN0cmluZ106IGFueTtcbiAgfTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIEdFVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICBjb25zdCBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICBcbiAgdHJ5IHtcbiAgICAvLyBHZXQgbWVtb3J5IHVzYWdlXG4gICAgY29uc3QgbWVtb3J5VXNhZ2UgPSBwcm9jZXNzLm1lbW9yeVVzYWdlKCk7XG4gICAgY29uc3QgdG90YWxNZW1vcnkgPSBvcy50b3RhbG1lbSgpO1xuICAgIGNvbnN0IGZyZWVNZW1vcnkgPSBvcy5mcmVlbWVtKCk7XG4gICAgY29uc3QgdXNlZE1lbW9yeSA9IHRvdGFsTWVtb3J5IC0gZnJlZU1lbW9yeTtcbiAgICBjb25zdCBtZW1vcnlQZXJjZW50YWdlID0gKHVzZWRNZW1vcnkgLyB0b3RhbE1lbW9yeSkgKiAxMDA7XG4gICAgXG4gICAgLy8gQ2hlY2sgYmFja2VuZCBjb25uZWN0aXZpdHlcbiAgICBsZXQgYmFja2VuZFN0YXR1czogJ2hlYWx0aHknIHwgJ2RlZ3JhZGVkJyB8ICd1bmhlYWx0aHknID0gJ3VuaGVhbHRoeSc7XG4gICAgbGV0IGJhY2tlbmRNZXNzYWdlID0gJyc7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGJhY2tlbmRVcmwgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDEnO1xuICAgICAgY29uc3QgYmFja2VuZFJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7YmFja2VuZFVybH0vYXBpL2hlYWx0aGAsIHtcbiAgICAgICAgc2lnbmFsOiBBYm9ydFNpZ25hbC50aW1lb3V0KDMwMDApXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgaWYgKGJhY2tlbmRSZXNwb25zZS5vaykge1xuICAgICAgICBiYWNrZW5kU3RhdHVzID0gJ2hlYWx0aHknO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmFja2VuZFN0YXR1cyA9ICdkZWdyYWRlZCc7XG4gICAgICAgIGJhY2tlbmRNZXNzYWdlID0gYEJhY2tlbmQgcmV0dXJuZWQgJHtiYWNrZW5kUmVzcG9uc2Uuc3RhdHVzfWA7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGJhY2tlbmRTdGF0dXMgPSAndW5oZWFsdGh5JztcbiAgICAgIGJhY2tlbmRNZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnQmFja2VuZCBjb25uZWN0aW9uIGZhaWxlZCc7XG4gICAgfVxuICAgIFxuICAgIC8vIERldGVybWluZSBvdmVyYWxsIGhlYWx0aFxuICAgIGxldCBvdmVyYWxsU3RhdHVzOiAnaGVhbHRoeScgfCAnZGVncmFkZWQnIHwgJ3VuaGVhbHRoeScgPSAnaGVhbHRoeSc7XG4gICAgXG4gICAgaWYgKGJhY2tlbmRTdGF0dXMgPT09ICd1bmhlYWx0aHknIHx8IG1lbW9yeVBlcmNlbnRhZ2UgPiA5MCkge1xuICAgICAgb3ZlcmFsbFN0YXR1cyA9ICd1bmhlYWx0aHknO1xuICAgIH0gZWxzZSBpZiAoYmFja2VuZFN0YXR1cyA9PT0gJ2RlZ3JhZGVkJyB8fCBtZW1vcnlQZXJjZW50YWdlID4gODApIHtcbiAgICAgIG92ZXJhbGxTdGF0dXMgPSAnZGVncmFkZWQnO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBoZWFsdGg6IEhlYWx0aFN0YXR1cyA9IHtcbiAgICAgIHN0YXR1czogb3ZlcmFsbFN0YXR1cyxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxuICAgICAgc2VydmljZTogJ3Byb21wdC1jYXJkLWZyb250ZW5kJyxcbiAgICAgIHZlcnNpb246IHByb2Nlc3MuZW52Lm5wbV9wYWNrYWdlX3ZlcnNpb24gfHwgJzEuMC4wJyxcbiAgICAgIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5OT0RFX0VOViB8fCAnZGV2ZWxvcG1lbnQnLFxuICAgICAgdXB0aW1lOiBwcm9jZXNzLnVwdGltZSgpLFxuICAgICAgbWVtb3J5OiB7XG4gICAgICAgIHVzZWQ6IE1hdGgucm91bmQobWVtb3J5VXNhZ2UuaGVhcFVzZWQgLyAxMDI0IC8gMTAyNCksXG4gICAgICAgIHRvdGFsOiBNYXRoLnJvdW5kKG1lbW9yeVVzYWdlLmhlYXBUb3RhbCAvIDEwMjQgLyAxMDI0KSxcbiAgICAgICAgcGVyY2VudGFnZTogTWF0aC5yb3VuZCgobWVtb3J5VXNhZ2UuaGVhcFVzZWQgLyBtZW1vcnlVc2FnZS5oZWFwVG90YWwpICogMTAwKVxuICAgICAgfSxcbiAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgYmFja2VuZDoge1xuICAgICAgICAgIHN0YXR1czogYmFja2VuZFN0YXR1cyxcbiAgICAgICAgICBtZXNzYWdlOiBiYWNrZW5kTWVzc2FnZSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgdXJsOiBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfVVJMIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDEnXG4gICAgICAgIH0sXG4gICAgICAgIHN5c3RlbToge1xuICAgICAgICAgIHBsYXRmb3JtOiBvcy5wbGF0Zm9ybSgpLFxuICAgICAgICAgIG5vZGVWZXJzaW9uOiBwcm9jZXNzLnZlcnNpb24sXG4gICAgICAgICAgY3B1czogb3MuY3B1cygpLmxlbmd0aCxcbiAgICAgICAgICBsb2FkQXZlcmFnZTogb3MubG9hZGF2ZygpLFxuICAgICAgICAgIHN5c3RlbU1lbW9yeToge1xuICAgICAgICAgICAgdXNlZDogTWF0aC5yb3VuZCh1c2VkTWVtb3J5IC8gMTAyNCAvIDEwMjQgLyAxMDI0ICogMTAwKSAvIDEwMCxcbiAgICAgICAgICAgIHRvdGFsOiBNYXRoLnJvdW5kKHRvdGFsTWVtb3J5IC8gMTAyNCAvIDEwMjQgLyAxMDI0ICogMTAwKSAvIDEwMCxcbiAgICAgICAgICAgIHBlcmNlbnRhZ2U6IE1hdGgucm91bmQobWVtb3J5UGVyY2VudGFnZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3BvbnNlVGltZTogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxuICAgICAgfVxuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGhlYWx0aCwge1xuICAgICAgc3RhdHVzOiBvdmVyYWxsU3RhdHVzID09PSAnaGVhbHRoeScgPyAyMDAgOiBvdmVyYWxsU3RhdHVzID09PSAnZGVncmFkZWQnID8gMjAwIDogNTAzLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICduby1jYWNoZSwgbm8tc3RvcmUsIG11c3QtcmV2YWxpZGF0ZScsXG4gICAgICAgICdYLUhlYWx0aC1TdGF0dXMnOiBvdmVyYWxsU3RhdHVzXG4gICAgICB9XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAge1xuICAgICAgICBzdGF0dXM6ICd1bmhlYWx0aHknLFxuICAgICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcbiAgICAgICAgc2VydmljZTogJ3Byb21wdC1jYXJkLWZyb250ZW5kJyxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0hlYWx0aCBjaGVjayBmYWlsZWQnLFxuICAgICAgICByZXNwb25zZVRpbWU6IERhdGUubm93KCkgLSBzdGFydFRpbWVcbiAgICAgIH0sXG4gICAgICB7IHN0YXR1czogNTAzIH1cbiAgICApO1xuICB9XG59XG5cbi8vIFJlYWRpbmVzcyBlbmRwb2ludCBmb3IgY29udGFpbmVyIG9yY2hlc3RyYXRpb25cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBIRUFEKHJlcXVlc3Q6IE5leHRSZXF1ZXN0KSB7XG4gIHRyeSB7XG4gICAgLy8gU2ltcGxlIGNoZWNrIC0gaWYgd2UgY2FuIHJlc3BvbmQsIHdlJ3JlIHJlYWR5XG4gICAgcmV0dXJuIG5ldyBOZXh0UmVzcG9uc2UobnVsbCwgeyBzdGF0dXM6IDIwMCB9KTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gbmV3IE5leHRSZXNwb25zZShudWxsLCB7IHN0YXR1czogNTAzIH0pO1xuICB9XG59Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztFQW9Cc0JBLEdBQUcsV0FBQUEsQ0FBQTtJQUFBO0lBQUFDLGFBQUEsR0FBQUMsQ0FBQTtJQUFBRCxhQUFBLEdBQUFFLENBQUE7V0FBSEgsR0FBQTs7RUFnR0FJLElBQUksV0FBQUEsQ0FBQTtJQUFBO0lBQUFILGFBQUEsR0FBQUMsQ0FBQTtJQUFBRCxhQUFBLEdBQUFFLENBQUE7V0FBSkMsSUFBQTs7Ozs7aUNBcEhvQjs7O3VFQUMzQjs7Ozs7Ozs7Ozs7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