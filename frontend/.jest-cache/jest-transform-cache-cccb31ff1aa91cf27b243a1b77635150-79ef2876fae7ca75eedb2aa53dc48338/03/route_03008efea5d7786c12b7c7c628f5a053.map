{"version":3,"names":["GET","cov_a6jn65hxx","f","s","HEAD","request","startTime","Date","now","memoryUsage","process","totalMemory","_os","default","totalmem","freeMemory","freemem","usedMemory","memoryPercentage","backendStatus","backendMessage","backendUrl","b","env","NEXT_PUBLIC_API_URL","backendResponse","fetch","signal","AbortSignal","timeout","ok","status","error","Error","message","overallStatus","health","timestamp","toISOString","service","version","npm_package_version","environment","NODE_ENV","uptime","memory","used","Math","round","heapUsed","total","heapTotal","percentage","details","backend","undefined","url","system","platform","nodeVersion","cpus","length","loadAverage","loadavg","systemMemory","responseTime","_server","NextResponse","json","headers"],"sources":["/workspaces/prompt-card-system/frontend/src/app/api/health/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport os from 'os';\n\ninterface HealthStatus {\n  status: 'healthy' | 'degraded' | 'unhealthy';\n  timestamp: string;\n  service: string;\n  version: string;\n  environment: string;\n  uptime: number;\n  memory: {\n    used: number;\n    total: number;\n    percentage: number;\n  };\n  details?: {\n    [key: string]: any;\n  };\n}\n\nexport async function GET(request: NextRequest) {\n  const startTime = Date.now();\n  \n  try {\n    // Get memory usage\n    const memoryUsage = process.memoryUsage();\n    const totalMemory = os.totalmem();\n    const freeMemory = os.freemem();\n    const usedMemory = totalMemory - freeMemory;\n    const memoryPercentage = (usedMemory / totalMemory) * 100;\n    \n    // Check backend connectivity\n    let backendStatus: 'healthy' | 'degraded' | 'unhealthy' = 'unhealthy';\n    let backendMessage = '';\n    \n    try {\n      const backendUrl = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\n      const backendResponse = await fetch(`${backendUrl}/api/health`, {\n        signal: AbortSignal.timeout(3000)\n      });\n      \n      if (backendResponse.ok) {\n        backendStatus = 'healthy';\n      } else {\n        backendStatus = 'degraded';\n        backendMessage = `Backend returned ${backendResponse.status}`;\n      }\n    } catch (error) {\n      backendStatus = 'unhealthy';\n      backendMessage = error instanceof Error ? error.message : 'Backend connection failed';\n    }\n    \n    // Determine overall health\n    let overallStatus: 'healthy' | 'degraded' | 'unhealthy' = 'healthy';\n    \n    if (backendStatus === 'unhealthy' || memoryPercentage > 90) {\n      overallStatus = 'unhealthy';\n    } else if (backendStatus === 'degraded' || memoryPercentage > 80) {\n      overallStatus = 'degraded';\n    }\n    \n    const health: HealthStatus = {\n      status: overallStatus,\n      timestamp: new Date().toISOString(),\n      service: 'prompt-card-frontend',\n      version: process.env.npm_package_version || '1.0.0',\n      environment: process.env.NODE_ENV || 'development',\n      uptime: process.uptime(),\n      memory: {\n        used: Math.round(memoryUsage.heapUsed / 1024 / 1024),\n        total: Math.round(memoryUsage.heapTotal / 1024 / 1024),\n        percentage: Math.round((memoryUsage.heapUsed / memoryUsage.heapTotal) * 100)\n      },\n      details: {\n        backend: {\n          status: backendStatus,\n          message: backendMessage || undefined,\n          url: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001'\n        },\n        system: {\n          platform: os.platform(),\n          nodeVersion: process.version,\n          cpus: os.cpus().length,\n          loadAverage: os.loadavg(),\n          systemMemory: {\n            used: Math.round(usedMemory / 1024 / 1024 / 1024 * 100) / 100,\n            total: Math.round(totalMemory / 1024 / 1024 / 1024 * 100) / 100,\n            percentage: Math.round(memoryPercentage)\n          }\n        },\n        responseTime: Date.now() - startTime\n      }\n    };\n    \n    return NextResponse.json(health, {\n      status: overallStatus === 'healthy' ? 200 : overallStatus === 'degraded' ? 200 : 503,\n      headers: {\n        'Cache-Control': 'no-cache, no-store, must-revalidate',\n        'X-Health-Status': overallStatus\n      }\n    });\n  } catch (error) {\n    return NextResponse.json(\n      {\n        status: 'unhealthy',\n        timestamp: new Date().toISOString(),\n        service: 'prompt-card-frontend',\n        error: error instanceof Error ? error.message : 'Health check failed',\n        responseTime: Date.now() - startTime\n      },\n      { status: 503 }\n    );\n  }\n}\n\n// Readiness endpoint for container orchestration\nexport async function HEAD(request: NextRequest) {\n  try {\n    // Simple check - if we can respond, we're ready\n    return new NextResponse(null, { status: 200 });\n  } catch (error) {\n    return new NextResponse(null, { status: 503 });\n  }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoBsBA,GAAG,WAAAA,CAA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","ignoreList":[]}