c913d47c69e09149047cc4e37f54db8f
"use client";
"use strict";

/* istanbul ignore next */
function cov_1g5xnjndfd() {
  var path = "/workspaces/prompt-card-system/frontend/src/components/TestExecution/TestRunner.tsx";
  var hash = "56f8d4f4e8a206ede3938542a509f6bbd2ac357c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/frontend/src/components/TestExecution/TestRunner.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 26
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "4": {
        start: {
          line: 13,
          column: 29
        },
        end: {
          line: 13,
          column: 72
        }
      },
      "5": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 39
        }
      },
      "6": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 55
        }
      },
      "7": {
        start: {
          line: 16,
          column: 15
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "8": {
        start: {
          line: 17,
          column: 13
        },
        end: {
          line: 17,
          column: 37
        }
      },
      "9": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 51
        }
      },
      "10": {
        start: {
          line: 19,
          column: 39
        },
        end: {
          line: 19,
          column: 51
        }
      },
      "11": {
        start: {
          line: 20,
          column: 28
        },
        end: {
          line: 20,
          column: 41
        }
      },
      "12": {
        start: {
          line: 21,
          column: 27
        },
        end: {
          line: 21,
          column: 40
        }
      },
      "13": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 20
        }
      },
      "14": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 23,
          column: 66
        }
      },
      "15": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "16": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 19
        }
      },
      "17": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "18": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 10
        }
      },
      "19": {
        start: {
          line: 35,
          column: 16
        },
        end: {
          line: 35,
          column: 53
        }
      },
      "20": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "21": {
        start: {
          line: 37,
          column: 8
        },
        end: {
          line: 37,
          column: 30
        }
      },
      "22": {
        start: {
          line: 39,
          column: 17
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "23": {
        start: {
          line: 42,
          column: 32
        },
        end: {
          line: 42,
          column: 88
        }
      },
      "24": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "25": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 51,
          column: 9
        }
      },
      "26": {
        start: {
          line: 45,
          column: 23
        },
        end: {
          line: 45,
          column: 95
        }
      },
      "27": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 50,
          column: 13
        }
      },
      "28": {
        start: {
          line: 47,
          column: 16
        },
        end: {
          line: 47,
          column: 57
        }
      },
      "29": {
        start: {
          line: 49,
          column: 16
        },
        end: {
          line: 49,
          column: 39
        }
      },
      "30": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 25
        }
      },
      "31": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 56,
          column: 5
        }
      },
      "32": {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 31
        }
      },
      "33": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 18
        }
      },
      "34": {
        start: {
          line: 60,
          column: 38
        },
        end: {
          line: 60,
          column: 65
        }
      },
      "35": {
        start: {
          line: 61,
          column: 46
        },
        end: {
          line: 61,
          column: 70
        }
      },
      "36": {
        start: {
          line: 62,
          column: 46
        },
        end: {
          line: 62,
          column: 78
        }
      },
      "37": {
        start: {
          line: 63,
          column: 42
        },
        end: {
          line: 63,
          column: 69
        }
      },
      "38": {
        start: {
          line: 64,
          column: 46
        },
        end: {
          line: 64,
          column: 80
        }
      },
      "39": {
        start: {
          line: 65,
          column: 28
        },
        end: {
          line: 72,
          column: 5
        }
      },
      "40": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 70,
          column: 9
        }
      },
      "41": {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 33
        }
      },
      "42": {
        start: {
          line: 69,
          column: 12
        },
        end: {
          line: 69,
          column: 57
        }
      },
      "43": {
        start: {
          line: 69,
          column: 49
        },
        end: {
          line: 69,
          column: 54
        }
      },
      "44": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 37
        }
      },
      "45": {
        start: {
          line: 73,
          column: 32
        },
        end: {
          line: 84,
          column: 5
        }
      },
      "46": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 83,
          column: 11
        }
      },
      "47": {
        start: {
          line: 75,
          column: 12
        },
        end: {
          line: 82,
          column: 13
        }
      },
      "48": {
        start: {
          line: 76,
          column: 16
        },
        end: {
          line: 76,
          column: 60
        }
      },
      "49": {
        start: {
          line: 76,
          column: 41
        },
        end: {
          line: 76,
          column: 58
        }
      },
      "50": {
        start: {
          line: 78,
          column: 16
        },
        end: {
          line: 81,
          column: 18
        }
      },
      "51": {
        start: {
          line: 85,
          column: 27
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "52": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 89,
          column: 9
        }
      },
      "53": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 64
        }
      },
      "54": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 19
        }
      },
      "55": {
        start: {
          line: 90,
          column: 8
        },
        end: {
          line: 90,
          column: 27
        }
      },
      "56": {
        start: {
          line: 91,
          column: 8
        },
        end: {
          line: 154,
          column: 9
        }
      },
      "57": {
        start: {
          line: 92,
          column: 32
        },
        end: {
          line: 92,
          column: 88
        }
      },
      "58": {
        start: {
          line: 92,
          column: 66
        },
        end: {
          line: 92,
          column: 71
        }
      },
      "59": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 149,
          column: 13
        }
      },
      "60": {
        start: {
          line: 95,
          column: 33
        },
        end: {
          line: 116,
          column: 18
        }
      },
      "61": {
        start: {
          line: 117,
          column: 29
        },
        end: {
          line: 117,
          column: 50
        }
      },
      "62": {
        start: {
          line: 118,
          column: 16
        },
        end: {
          line: 120,
          column: 17
        }
      },
      "63": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 119,
          column: 88
        }
      },
      "64": {
        start: {
          line: 123,
          column: 16
        },
        end: {
          line: 127,
          column: 19
        }
      },
      "65": {
        start: {
          line: 130,
          column: 32
        },
        end: {
          line: 134,
          column: 17
        }
      },
      "66": {
        start: {
          line: 135,
          column: 33
        },
        end: {
          line: 135,
          column: 65
        }
      },
      "67": {
        start: {
          line: 136,
          column: 16
        },
        end: {
          line: 148,
          column: 17
        }
      },
      "68": {
        start: {
          line: 137,
          column: 20
        },
        end: {
          line: 137,
          column: 57
        }
      },
      "69": {
        start: {
          line: 140,
          column: 20
        },
        end: {
          line: 147,
          column: 29
        }
      },
      "70": {
        start: {
          line: 141,
          column: 24
        },
        end: {
          line: 146,
          column: 25
        }
      },
      "71": {
        start: {
          line: 142,
          column: 46
        },
        end: {
          line: 142,
          column: 100
        }
      },
      "72": {
        start: {
          line: 143,
          column: 28
        },
        end: {
          line: 143,
          column: 56
        }
      },
      "73": {
        start: {
          line: 145,
          column: 28
        },
        end: {
          line: 145,
          column: 109
        }
      },
      "74": {
        start: {
          line: 151,
          column: 12
        },
        end: {
          line: 151,
          column: 86
        }
      },
      "75": {
        start: {
          line: 153,
          column: 12
        },
        end: {
          line: 153,
          column: 32
        }
      },
      "76": {
        start: {
          line: 156,
          column: 32
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "77": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 165,
          column: 9
        }
      },
      "78": {
        start: {
          line: 158,
          column: 27
        },
        end: {
          line: 160,
          column: 14
        }
      },
      "79": {
        start: {
          line: 162,
          column: 12
        },
        end: {
          line: 162,
          column: 55
        }
      },
      "80": {
        start: {
          line: 164,
          column: 12
        },
        end: {
          line: 164,
          column: 85
        }
      },
      "81": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 196,
          column: 5
        }
      },
      "82": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 195,
          column: 11
        }
      },
      "83": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 390,
          column: 7
        }
      },
      "84": {
        start: {
          line: 225,
          column: 39
        },
        end: {
          line: 225,
          column: 71
        }
      },
      "85": {
        start: {
          line: 267,
          column: 55
        },
        end: {
          line: 267,
          column: 87
        }
      },
      "86": {
        start: {
          line: 285,
          column: 55
        },
        end: {
          line: 285,
          column: 87
        }
      },
      "87": {
        start: {
          line: 328,
          column: 74
        },
        end: {
          line: 358,
          column: 43
        }
      },
      "88": {
        start: {
          line: 338,
          column: 62
        },
        end: {
          line: 338,
          column: 94
        }
      },
      "89": {
        start: {
          line: 352,
          column: 53
        },
        end: {
          line: 352,
          column: 85
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "_getRequireWildcardCache",
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 33
          }
        },
        loc: {
          start: {
            line: 18,
            column: 47
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 39
          },
          end: {
            line: 22,
            column: 40
          }
        },
        loc: {
          start: {
            line: 22,
            column: 61
          },
          end: {
            line: 24,
            column: 5
          }
        },
        line: 22
      },
      "3": {
        name: "_interop_require_wildcard",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 34
          }
        },
        loc: {
          start: {
            line: 26,
            column: 53
          },
          end: {
            line: 58,
            column: 1
          }
        },
        line: 26
      },
      "4": {
        name: "TestRunner",
        decl: {
          start: {
            line: 59,
            column: 9
          },
          end: {
            line: 59,
            column: 19
          }
        },
        loc: {
          start: {
            line: 59,
            column: 74
          },
          end: {
            line: 391,
            column: 1
          }
        },
        line: 59
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 65,
            column: 28
          },
          end: {
            line: 65,
            column: 29
          }
        },
        loc: {
          start: {
            line: 65,
            column: 32
          },
          end: {
            line: 72,
            column: 5
          }
        },
        line: 65
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 69,
            column: 43
          },
          end: {
            line: 69,
            column: 44
          }
        },
        loc: {
          start: {
            line: 69,
            column: 49
          },
          end: {
            line: 69,
            column: 54
          }
        },
        line: 69
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 73,
            column: 32
          },
          end: {
            line: 73,
            column: 33
          }
        },
        loc: {
          start: {
            line: 73,
            column: 46
          },
          end: {
            line: 84,
            column: 5
          }
        },
        line: 73
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 74,
            column: 25
          },
          end: {
            line: 74,
            column: 26
          }
        },
        loc: {
          start: {
            line: 74,
            column: 33
          },
          end: {
            line: 83,
            column: 9
          }
        },
        line: 74
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 76,
            column: 35
          },
          end: {
            line: 76,
            column: 36
          }
        },
        loc: {
          start: {
            line: 76,
            column: 41
          },
          end: {
            line: 76,
            column: 58
          }
        },
        line: 76
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 85,
            column: 27
          },
          end: {
            line: 85,
            column: 28
          }
        },
        loc: {
          start: {
            line: 85,
            column: 37
          },
          end: {
            line: 155,
            column: 5
          }
        },
        line: 85
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 92,
            column: 60
          },
          end: {
            line: 92,
            column: 61
          }
        },
        loc: {
          start: {
            line: 92,
            column: 66
          },
          end: {
            line: 92,
            column: 71
          }
        },
        line: 92
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 140,
            column: 31
          },
          end: {
            line: 140,
            column: 32
          }
        },
        loc: {
          start: {
            line: 140,
            column: 41
          },
          end: {
            line: 147,
            column: 21
          }
        },
        line: 140
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 156,
            column: 32
          },
          end: {
            line: 156,
            column: 33
          }
        },
        loc: {
          start: {
            line: 156,
            column: 52
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 156
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 225,
            column: 34
          },
          end: {
            line: 225,
            column: 35
          }
        },
        loc: {
          start: {
            line: 225,
            column: 39
          },
          end: {
            line: 225,
            column: 71
          }
        },
        line: 225
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 267,
            column: 50
          },
          end: {
            line: 267,
            column: 51
          }
        },
        loc: {
          start: {
            line: 267,
            column: 55
          },
          end: {
            line: 267,
            column: 87
          }
        },
        line: 267
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 285,
            column: 50
          },
          end: {
            line: 285,
            column: 51
          }
        },
        loc: {
          start: {
            line: 285,
            column: 55
          },
          end: {
            line: 285,
            column: 87
          }
        },
        line: 285
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 328,
            column: 48
          },
          end: {
            line: 328,
            column: 49
          }
        },
        loc: {
          start: {
            line: 328,
            column: 74
          },
          end: {
            line: 358,
            column: 43
          }
        },
        line: 328
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 338,
            column: 58
          },
          end: {
            line: 338,
            column: 59
          }
        },
        loc: {
          start: {
            line: 338,
            column: 62
          },
          end: {
            line: 338,
            column: 94
          }
        },
        line: 338
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 352,
            column: 49
          },
          end: {
            line: 352,
            column: 50
          }
        },
        loc: {
          start: {
            line: 352,
            column: 53
          },
          end: {
            line: 352,
            column: 85
          }
        },
        line: 352
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 51
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 19,
            column: 51
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 15
          },
          end: {
            line: 23,
            column: 65
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 23,
            column: 29
          },
          end: {
            line: 23,
            column: 45
          }
        }, {
          start: {
            line: 23,
            column: 48
          },
          end: {
            line: 23,
            column: 65
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 20
          }
        }, {
          start: {
            line: 27,
            column: 24
          },
          end: {
            line: 27,
            column: 27
          }
        }, {
          start: {
            line: 27,
            column: 31
          },
          end: {
            line: 27,
            column: 45
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "5": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 30,
            column: 20
          }
        }, {
          start: {
            line: 30,
            column: 24
          },
          end: {
            line: 30,
            column: 47
          }
        }, {
          start: {
            line: 30,
            column: 51
          },
          end: {
            line: 30,
            column: 76
          }
        }],
        line: 30
      },
      "6": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "7": {
        loc: {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 13
          }
        }, {
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 36,
            column: 31
          }
        }],
        line: 36
      },
      "8": {
        loc: {
          start: {
            line: 42,
            column: 32
          },
          end: {
            line: 42,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 32
          },
          end: {
            line: 42,
            column: 53
          }
        }, {
          start: {
            line: 42,
            column: 57
          },
          end: {
            line: 42,
            column: 88
          }
        }],
        line: 42
      },
      "9": {
        loc: {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 51,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "10": {
        loc: {
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 12
          },
          end: {
            line: 44,
            column: 29
          }
        }, {
          start: {
            line: 44,
            column: 33
          },
          end: {
            line: 44,
            column: 79
          }
        }],
        line: 44
      },
      "11": {
        loc: {
          start: {
            line: 45,
            column: 23
          },
          end: {
            line: 45,
            column: 95
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 45,
            column: 47
          },
          end: {
            line: 45,
            column: 88
          }
        }, {
          start: {
            line: 45,
            column: 91
          },
          end: {
            line: 45,
            column: 95
          }
        }],
        line: 45
      },
      "12": {
        loc: {
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 12
          },
          end: {
            line: 50,
            column: 13
          }
        }, {
          start: {
            line: 48,
            column: 19
          },
          end: {
            line: 50,
            column: 13
          }
        }],
        line: 46
      },
      "13": {
        loc: {
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 16
          },
          end: {
            line: 46,
            column: 20
          }
        }, {
          start: {
            line: 46,
            column: 25
          },
          end: {
            line: 46,
            column: 33
          }
        }, {
          start: {
            line: 46,
            column: 37
          },
          end: {
            line: 46,
            column: 45
          }
        }],
        line: 46
      },
      "14": {
        loc: {
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 54,
            column: 4
          },
          end: {
            line: 56,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 54
      },
      "15": {
        loc: {
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 8
          },
          end: {
            line: 70,
            column: 9
          }
        }, {
          start: {
            line: 68,
            column: 15
          },
          end: {
            line: 70,
            column: 9
          }
        }],
        line: 66
      },
      "16": {
        loc: {
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 12
          },
          end: {
            line: 82,
            column: 13
          }
        }, {
          start: {
            line: 77,
            column: 19
          },
          end: {
            line: 82,
            column: 13
          }
        }],
        line: 75
      },
      "17": {
        loc: {
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 86,
            column: 8
          },
          end: {
            line: 89,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 86
      },
      "18": {
        loc: {
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 54
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 12
          },
          end: {
            line: 86,
            column: 38
          }
        }, {
          start: {
            line: 86,
            column: 42
          },
          end: {
            line: 86,
            column: 54
          }
        }],
        line: 86
      },
      "19": {
        loc: {
          start: {
            line: 92,
            column: 32
          },
          end: {
            line: 92,
            column: 88
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 92,
            column: 46
          },
          end: {
            line: 92,
            column: 72
          }
        }, {
          start: {
            line: 92,
            column: 75
          },
          end: {
            line: 92,
            column: 88
          }
        }],
        line: 92
      },
      "20": {
        loc: {
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 93,
            column: 12
          },
          end: {
            line: 149,
            column: 13
          }
        }, {
          start: {
            line: 128,
            column: 19
          },
          end: {
            line: 149,
            column: 13
          }
        }],
        line: 93
      },
      "21": {
        loc: {
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 120,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 16
          },
          end: {
            line: 120,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "22": {
        loc: {
          start: {
            line: 119,
            column: 36
          },
          end: {
            line: 119,
            column: 86
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 119,
            column: 36
          },
          end: {
            line: 119,
            column: 46
          }
        }, {
          start: {
            line: 119,
            column: 50
          },
          end: {
            line: 119,
            column: 86
          }
        }],
        line: 119
      },
      "23": {
        loc: {
          start: {
            line: 133,
            column: 35
          },
          end: {
            line: 133,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 133,
            column: 49
          },
          end: {
            line: 133,
            column: 58
          }
        }, {
          start: {
            line: 133,
            column: 61
          },
          end: {
            line: 133,
            column: 74
          }
        }],
        line: 133
      },
      "24": {
        loc: {
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 136,
            column: 16
          },
          end: {
            line: 148,
            column: 17
          }
        }, {
          start: {
            line: 138,
            column: 23
          },
          end: {
            line: 148,
            column: 17
          }
        }],
        line: 136
      },
      "25": {
        loc: {
          start: {
            line: 145,
            column: 38
          },
          end: {
            line: 145,
            column: 107
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 145,
            column: 63
          },
          end: {
            line: 145,
            column: 76
          }
        }, {
          start: {
            line: 145,
            column: 79
          },
          end: {
            line: 145,
            column: 107
          }
        }],
        line: 145
      },
      "26": {
        loc: {
          start: {
            line: 151,
            column: 22
          },
          end: {
            line: 151,
            column: 84
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 151,
            column: 47
          },
          end: {
            line: 151,
            column: 60
          }
        }, {
          start: {
            line: 151,
            column: 63
          },
          end: {
            line: 151,
            column: 84
          }
        }],
        line: 151
      },
      "27": {
        loc: {
          start: {
            line: 164,
            column: 22
          },
          end: {
            line: 164,
            column: 83
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 164,
            column: 47
          },
          end: {
            line: 164,
            column: 60
          }
        }, {
          start: {
            line: 164,
            column: 63
          },
          end: {
            line: 164,
            column: 83
          }
        }],
        line: 164
      },
      "28": {
        loc: {
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 167,
            column: 4
          },
          end: {
            line: 196,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 167
      },
      "29": {
        loc: {
          start: {
            line: 303,
            column: 34
          },
          end: {
            line: 303,
            column: 182
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 303,
            column: 67
          },
          end: {
            line: 303,
            column: 111
          }
        }, {
          start: {
            line: 303,
            column: 114
          },
          end: {
            line: 303,
            column: 182
          }
        }],
        line: 303
      },
      "30": {
        loc: {
          start: {
            line: 322,
            column: 42
          },
          end: {
            line: 322,
            column: 85
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 322,
            column: 56
          },
          end: {
            line: 322,
            column: 70
          }
        }, {
          start: {
            line: 322,
            column: 73
          },
          end: {
            line: 322,
            column: 85
          }
        }],
        line: 322
      },
      "31": {
        loc: {
          start: {
            line: 337,
            column: 57
          },
          end: {
            line: 337,
            column: 107
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 337,
            column: 57
          },
          end: {
            line: 337,
            column: 68
          }
        }, {
          start: {
            line: 337,
            column: 72
          },
          end: {
            line: 337,
            column: 107
          }
        }],
        line: 337
      },
      "32": {
        loc: {
          start: {
            line: 366,
            column: 30
          },
          end: {
            line: 366,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 366,
            column: 30
          },
          end: {
            line: 366,
            column: 39
          }
        }, {
          start: {
            line: 366,
            column: 43
          },
          end: {
            line: 366,
            column: 69
          }
        }, {
          start: {
            line: 366,
            column: 73
          },
          end: {
            line: 366,
            column: 85
          }
        }],
        line: 366
      },
      "33": {
        loc: {
          start: {
            line: 369,
            column: 30
          },
          end: {
            line: 386,
            column: 22
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 369,
            column: 56
          },
          end: {
            line: 377,
            column: 22
          }
        }, {
          start: {
            line: 377,
            column: 39
          },
          end: {
            line: 386,
            column: 22
          }
        }],
        line: 369
      },
      "34": {
        loc: {
          start: {
            line: 375,
            column: 28
          },
          end: {
            line: 375,
            column: 108
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 375,
            column: 59
          },
          end: {
            line: 375,
            column: 87
          }
        }, {
          start: {
            line: 375,
            column: 90
          },
          end: {
            line: 375,
            column: 108
          }
        }],
        line: 375
      },
      "35": {
        loc: {
          start: {
            line: 379,
            column: 28
          },
          end: {
            line: 379,
            column: 68
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 379,
            column: 59
          },
          end: {
            line: 379,
            column: 63
          }
        }, {
          start: {
            line: 379,
            column: 66
          },
          end: {
            line: 379,
            column: 68
          }
        }],
        line: 379
      },
      "36": {
        loc: {
          start: {
            line: 381,
            column: 28
          },
          end: {
            line: 381,
            column: 70
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 381,
            column: 42
          },
          end: {
            line: 381,
            column: 47
          }
        }, {
          start: {
            line: 381,
            column: 50
          },
          end: {
            line: 381,
            column: 70
          }
        }],
        line: 381
      },
      "37": {
        loc: {
          start: {
            line: 383,
            column: 28
          },
          end: {
            line: 383,
            column: 100
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 383,
            column: 92
          },
          end: {
            line: 383,
            column: 95
          }
        }, {
          start: {
            line: 383,
            column: 98
          },
          end: {
            line: 383,
            column: 100
          }
        }],
        line: 383
      },
      "38": {
        loc: {
          start: {
            line: 383,
            column: 29
          },
          end: {
            line: 383,
            column: 82
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 383,
            column: 43
          },
          end: {
            line: 383,
            column: 59
          }
        }, {
          start: {
            line: 383,
            column: 62
          },
          end: {
            line: 383,
            column: 82
          }
        }],
        line: 383
      },
      "39": {
        loc: {
          start: {
            line: 384,
            column: 28
          },
          end: {
            line: 384,
            column: 77
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 384,
            column: 59
          },
          end: {
            line: 384,
            column: 72
          }
        }, {
          start: {
            line: 384,
            column: 75
          },
          end: {
            line: 384,
            column: 77
          }
        }],
        line: 384
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/workspaces/prompt-card-system/frontend/src/components/TestExecution/TestRunner.tsx"],
      sourcesContent: ["'use client';\n\nimport React, { useState } from 'react';\nimport { Button } from '@/components/ui/Button';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { Badge } from '@/components/ui/Badge';\nimport { TestCase, TestExecution, RunTestsRequest } from '@/types';\nimport { api } from '@/lib/api';\n\ninterface TestRunnerProps {\n  promptCardId: number;\n  testCases: TestCase[];\n  onTestComplete?: (execution: TestExecution) => void;\n  onError?: (error: string) => void;\n}\n\nexport default function TestRunner({\n  promptCardId,\n  testCases,\n  onTestComplete,\n  onError\n}: TestRunnerProps) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [selectedTests, setSelectedTests] = useState<number[]>([]);\n  const [selectedModel, setSelectedModel] = useState('llama3.2');\n  const [allSelected, setAllSelected] = useState(false);\n  const [executionMode, setExecutionMode] = useState<'sequential' | 'parallel'>('sequential');\n\n  const handleSelectAll = () => {\n    if (allSelected) {\n      setSelectedTests([]);\n    } else {\n      setSelectedTests(testCases.map(tc => tc.id));\n    }\n    setAllSelected(!allSelected);\n  };\n\n  const handleTestSelection = (testCaseId: number) => {\n    setSelectedTests(prev => {\n      if (prev.includes(testCaseId)) {\n        return prev.filter(id => id !== testCaseId);\n      } else {\n        return [...prev, testCaseId];\n      }\n    });\n  };\n\n  const handleRunTests = async () => {\n    if (selectedTests.length === 0 && !allSelected) {\n      onError?.('Please select at least one test to run');\n      return;\n    }\n\n    setIsRunning(true);\n    try {\n      const testCaseIds = allSelected ? testCases.map(tc => tc.id) : selectedTests;\n\n      if (executionMode === 'parallel') {\n        // Use parallel execution endpoint\n        const response = await fetch('/api/test-cases/execute-parallel', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            prompt_card_id: promptCardId,\n            test_case_ids: testCaseIds,\n            model: selectedModel,\n            configuration: {\n              max_concurrent_tests: 3,\n              timeout_per_test: 30000,\n              retry_failed_tests: false,\n              max_retries: 1,\n              resource_limits: {\n                memory_mb: 1024,\n                cpu_percent: 50\n              }\n            },\n            priority: 0\n          })\n        });\n\n        const data = await response.json();\n        \n        if (!response.ok) {\n          throw new Error(data.error || 'Failed to start parallel execution');\n        }\n\n        // For parallel execution, we'll need to handle the progress tracking differently\n        // This would typically redirect to a progress page or show a modal\n        onTestComplete?.({\n          execution_id: data.data.execution_id,\n          status: 'running',\n          mode: 'parallel'\n        } as any);\n      } else {\n        // Use sequential execution (existing API)\n        const request: RunTestsRequest = {\n          prompt_card_id: promptCardId,\n          model: selectedModel,\n          test_case_ids: allSelected ? undefined : selectedTests\n        };\n\n        const response = await api.runTests(request);\n        \n        if (response.execution) {\n          onTestComplete?.(response.execution);\n        } else {\n          // Handle async execution - you might want to poll for results\n          setTimeout(async () => {\n            try {\n              const execution = await api.getTestExecution(response.execution_id);\n              onTestComplete?.(execution);\n            } catch (error) {\n              onError?.(error instanceof Error ? error.message : 'Failed to get test results');\n            }\n          }, 1000);\n        }\n      }\n    } catch (error) {\n      onError?.(error instanceof Error ? error.message : 'Failed to run tests');\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const handleRunSingleTest = async (testCaseId: number) => {\n    try {\n      const result = await api.runSingleTest(testCaseId, { model: selectedModel });\n      // Handle single test result - you might want a different callback\n      console.log('Single test result:', result);\n    } catch (error) {\n      onError?.(error instanceof Error ? error.message : 'Failed to run test');\n    }\n  };\n\n  if (testCases.length === 0) {\n    return (\n      <div className=\"bg-gray-50 rounded-lg p-6 text-center\">\n        <div className=\"text-gray-500 mb-2\">\n          <svg className=\"mx-auto h-8 w-8\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4\" />\n          </svg>\n        </div>\n        <p className=\"text-gray-600\">No test cases available to run</p>\n        <p className=\"text-sm text-gray-500 mt-1\">Create test cases first to start testing</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Test Runner</h3>\n        <Badge variant=\"default\">{testCases.length} test cases</Badge>\n      </div>\n\n      {/* Model Selection */}\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Model\n        </label>\n        <select\n          value={selectedModel}\n          onChange={(e) => setSelectedModel(e.target.value)}\n          className=\"w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n          disabled={isRunning}\n        >\n          <option value=\"llama3.2\">Llama 3.2</option>\n          <option value=\"llama3.1\">Llama 3.1</option>\n          <option value=\"mistral\">Mistral</option>\n          <option value=\"codellama\">CodeLlama</option>\n        </select>\n      </div>\n\n      {/* Execution Mode Selection */}\n      <div className=\"mb-4\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n          Execution Mode\n        </label>\n        <div className=\"flex space-x-4\">\n          <label className=\"flex items-center\">\n            <input\n              type=\"radio\"\n              name=\"executionMode\"\n              value=\"sequential\"\n              checked={executionMode === 'sequential'}\n              onChange={(e) => setExecutionMode(e.target.value as 'sequential' | 'parallel')}\n              disabled={isRunning}\n              className=\"mr-2\"\n            />\n            <span className=\"text-sm\">Sequential</span>\n          </label>\n          <label className=\"flex items-center\">\n            <input\n              type=\"radio\"\n              name=\"executionMode\"\n              value=\"parallel\"\n              checked={executionMode === 'parallel'}\n              onChange={(e) => setExecutionMode(e.target.value as 'sequential' | 'parallel')}\n              disabled={isRunning}\n              className=\"mr-2\"\n            />\n            <span className=\"text-sm\">Parallel</span>\n            <span className=\"ml-1 text-xs text-blue-600\">\u26A1 Faster</span>\n          </label>\n        </div>\n        <p className=\"text-xs text-gray-500 mt-1\">\n          {executionMode === 'sequential' \n            ? 'Run tests one at a time (traditional mode)'\n            : 'Run multiple tests simultaneously with real-time progress tracking'\n          }\n        </p>\n      </div>\n\n      {/* Test Selection */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <label className=\"block text-sm font-medium text-gray-700\">\n            Select Tests to Run\n          </label>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={handleSelectAll}\n            disabled={isRunning}\n          >\n            {allSelected ? 'Deselect All' : 'Select All'}\n          </Button>\n        </div>\n\n        <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n          {testCases.map((testCase) => (\n            <div key={testCase.id} className=\"flex items-center justify-between p-3 border border-gray-200 rounded-md\">\n              <div className=\"flex items-center space-x-3\">\n                <input\n                  type=\"checkbox\"\n                  id={`test-${testCase.id}`}\n                  checked={allSelected || selectedTests.includes(testCase.id)}\n                  onChange={() => handleTestSelection(testCase.id)}\n                  disabled={isRunning}\n                  className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                />\n                <label htmlFor={`test-${testCase.id}`} className=\"text-sm text-gray-900 cursor-pointer\">\n                  {testCase.name}\n                </label>\n              </div>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => handleRunSingleTest(testCase.id)}\n                disabled={isRunning}\n                className=\"text-xs\"\n              >\n                Run Solo\n              </Button>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Run Button */}\n      <div className=\"flex justify-end\">\n        <Button\n          onClick={handleRunTests}\n          disabled={isRunning || (selectedTests.length === 0 && !allSelected)}\n          loading={isRunning}\n          className=\"px-6\"\n        >\n          {isRunning ? (\n            <>\n              <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n              {executionMode === 'parallel' ? 'Starting Parallel Tests...' : 'Running Tests...'}\n            </>\n          ) : (\n            <>\n              {executionMode === 'parallel' ? '\u26A1 ' : ''}\n              Run {allSelected ? 'All' : selectedTests.length} Test{(allSelected ? testCases.length : selectedTests.length) !== 1 ? 's' : ''}\n              {executionMode === 'parallel' ? ' (Parallel)' : ''}\n            </>\n          )}\n        </Button>\n      </div>\n    </div>\n  );\n}"],
      names: ["TestRunner", "promptCardId", "testCases", "onTestComplete", "onError", "isRunning", "setIsRunning", "useState", "selectedTests", "setSelectedTests", "selectedModel", "setSelectedModel", "allSelected", "setAllSelected", "executionMode", "setExecutionMode", "handleSelectAll", "map", "tc", "id", "handleTestSelection", "testCaseId", "prev", "includes", "filter", "handleRunTests", "length", "testCaseIds", "response", "fetch", "method", "headers", "body", "JSON", "stringify", "prompt_card_id", "test_case_ids", "model", "configuration", "max_concurrent_tests", "timeout_per_test", "retry_failed_tests", "max_retries", "resource_limits", "memory_mb", "cpu_percent", "priority", "data", "json", "ok", "Error", "error", "execution_id", "status", "mode", "request", "undefined", "api", "runTests", "execution", "setTimeout", "getTestExecution", "message", "handleRunSingleTest", "result", "runSingleTest", "console", "log", "div", "className", "svg", "fill", "viewBox", "stroke", "path", "strokeLinecap", "strokeLinejoin", "strokeWidth", "d", "p", "h3", "Badge", "variant", "label", "select", "value", "onChange", "e", "target", "disabled", "option", "input", "type", "name", "checked", "span", "Button", "size", "onClick", "testCase", "htmlFor", "loading", "LoadingSpinner"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "56f8d4f4e8a206ede3938542a509f6bbd2ac357c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1g5xnjndfd = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1g5xnjndfd();
cov_1g5xnjndfd().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_1g5xnjndfd().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_1g5xnjndfd().f[0]++;
    cov_1g5xnjndfd().s[2]++;
    return TestRunner;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_1g5xnjndfd().s[3]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(/*#__PURE__*/cov_1g5xnjndfd().s[4]++, _interop_require_wildcard(require("react")));
const _Button =
/* istanbul ignore next */
(cov_1g5xnjndfd().s[5]++, require("../ui/Button"));
const _LoadingSpinner =
/* istanbul ignore next */
(cov_1g5xnjndfd().s[6]++, require("../ui/LoadingSpinner"));
const _Badge =
/* istanbul ignore next */
(cov_1g5xnjndfd().s[7]++, require("../ui/Badge"));
const _api =
/* istanbul ignore next */
(cov_1g5xnjndfd().s[8]++, require("../../lib/api"));
function _getRequireWildcardCache(nodeInterop) {
  /* istanbul ignore next */
  cov_1g5xnjndfd().f[1]++;
  cov_1g5xnjndfd().s[9]++;
  if (typeof WeakMap !== "function") {
    /* istanbul ignore next */
    cov_1g5xnjndfd().b[0][0]++;
    cov_1g5xnjndfd().s[10]++;
    return null;
  } else
  /* istanbul ignore next */
  {
    cov_1g5xnjndfd().b[0][1]++;
  }
  var cacheBabelInterop =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[11]++, new WeakMap());
  var cacheNodeInterop =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[12]++, new WeakMap());
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[13]++;
  return (_getRequireWildcardCache = function (nodeInterop) {
    /* istanbul ignore next */
    cov_1g5xnjndfd().f[2]++;
    cov_1g5xnjndfd().s[14]++;
    return nodeInterop ?
    /* istanbul ignore next */
    (cov_1g5xnjndfd().b[1][0]++, cacheNodeInterop) :
    /* istanbul ignore next */
    (cov_1g5xnjndfd().b[1][1]++, cacheBabelInterop);
  })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
  /* istanbul ignore next */
  cov_1g5xnjndfd().f[3]++;
  cov_1g5xnjndfd().s[15]++;
  if (
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[3][0]++, !nodeInterop) &&
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[3][1]++, obj) &&
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[3][2]++, obj.__esModule)) {
    /* istanbul ignore next */
    cov_1g5xnjndfd().b[2][0]++;
    cov_1g5xnjndfd().s[16]++;
    return obj;
  } else
  /* istanbul ignore next */
  {
    cov_1g5xnjndfd().b[2][1]++;
  }
  cov_1g5xnjndfd().s[17]++;
  if (
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[5][0]++, obj === null) ||
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[5][1]++, typeof obj !== "object") &&
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[5][2]++, typeof obj !== "function")) {
    /* istanbul ignore next */
    cov_1g5xnjndfd().b[4][0]++;
    cov_1g5xnjndfd().s[18]++;
    return {
      default: obj
    };
  } else
  /* istanbul ignore next */
  {
    cov_1g5xnjndfd().b[4][1]++;
  }
  var cache =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[19]++, _getRequireWildcardCache(nodeInterop));
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[20]++;
  if (
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[7][0]++, cache) &&
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[7][1]++, cache.has(obj))) {
    /* istanbul ignore next */
    cov_1g5xnjndfd().b[6][0]++;
    cov_1g5xnjndfd().s[21]++;
    return cache.get(obj);
  } else
  /* istanbul ignore next */
  {
    cov_1g5xnjndfd().b[6][1]++;
  }
  var newObj =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[22]++, {
    __proto__: null
  });
  var hasPropertyDescriptor =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[23]++,
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[8][0]++, Object.defineProperty) &&
  /* istanbul ignore next */
  (cov_1g5xnjndfd().b[8][1]++, Object.getOwnPropertyDescriptor));
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[24]++;
  for (var key in obj) {
    /* istanbul ignore next */
    cov_1g5xnjndfd().s[25]++;
    if (
    /* istanbul ignore next */
    (cov_1g5xnjndfd().b[10][0]++, key !== "default") &&
    /* istanbul ignore next */
    (cov_1g5xnjndfd().b[10][1]++, Object.prototype.hasOwnProperty.call(obj, key))) {
      /* istanbul ignore next */
      cov_1g5xnjndfd().b[9][0]++;
      var desc =
      /* istanbul ignore next */
      (cov_1g5xnjndfd().s[26]++, hasPropertyDescriptor ?
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[11][0]++, Object.getOwnPropertyDescriptor(obj, key)) :
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[11][1]++, null));
      /* istanbul ignore next */
      cov_1g5xnjndfd().s[27]++;
      if (
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[13][0]++, desc) && (
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[13][1]++, desc.get) ||
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[13][2]++, desc.set))) {
        /* istanbul ignore next */
        cov_1g5xnjndfd().b[12][0]++;
        cov_1g5xnjndfd().s[28]++;
        Object.defineProperty(newObj, key, desc);
      } else {
        /* istanbul ignore next */
        cov_1g5xnjndfd().b[12][1]++;
        cov_1g5xnjndfd().s[29]++;
        newObj[key] = obj[key];
      }
    } else
    /* istanbul ignore next */
    {
      cov_1g5xnjndfd().b[9][1]++;
    }
  }
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[30]++;
  newObj.default = obj;
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[31]++;
  if (cache) {
    /* istanbul ignore next */
    cov_1g5xnjndfd().b[14][0]++;
    cov_1g5xnjndfd().s[32]++;
    cache.set(obj, newObj);
  } else
  /* istanbul ignore next */
  {
    cov_1g5xnjndfd().b[14][1]++;
  }
  cov_1g5xnjndfd().s[33]++;
  return newObj;
}
function TestRunner({
  promptCardId,
  testCases,
  onTestComplete,
  onError
}) {
  /* istanbul ignore next */
  cov_1g5xnjndfd().f[4]++;
  const [isRunning, setIsRunning] =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[34]++, (0, _react.useState)(false));
  const [selectedTests, setSelectedTests] =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[35]++, (0, _react.useState)([]));
  const [selectedModel, setSelectedModel] =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[36]++, (0, _react.useState)("llama3.2"));
  const [allSelected, setAllSelected] =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[37]++, (0, _react.useState)(false));
  const [executionMode, setExecutionMode] =
  /* istanbul ignore next */
  (cov_1g5xnjndfd().s[38]++, (0, _react.useState)("sequential"));
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[39]++;
  const handleSelectAll = () => {
    /* istanbul ignore next */
    cov_1g5xnjndfd().f[5]++;
    cov_1g5xnjndfd().s[40]++;
    if (allSelected) {
      /* istanbul ignore next */
      cov_1g5xnjndfd().b[15][0]++;
      cov_1g5xnjndfd().s[41]++;
      setSelectedTests([]);
    } else {
      /* istanbul ignore next */
      cov_1g5xnjndfd().b[15][1]++;
      cov_1g5xnjndfd().s[42]++;
      setSelectedTests(testCases.map(tc => {
        /* istanbul ignore next */
        cov_1g5xnjndfd().f[6]++;
        cov_1g5xnjndfd().s[43]++;
        return tc.id;
      }));
    }
    /* istanbul ignore next */
    cov_1g5xnjndfd().s[44]++;
    setAllSelected(!allSelected);
  };
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[45]++;
  const handleTestSelection = testCaseId => {
    /* istanbul ignore next */
    cov_1g5xnjndfd().f[7]++;
    cov_1g5xnjndfd().s[46]++;
    setSelectedTests(prev => {
      /* istanbul ignore next */
      cov_1g5xnjndfd().f[8]++;
      cov_1g5xnjndfd().s[47]++;
      if (prev.includes(testCaseId)) {
        /* istanbul ignore next */
        cov_1g5xnjndfd().b[16][0]++;
        cov_1g5xnjndfd().s[48]++;
        return prev.filter(id => {
          /* istanbul ignore next */
          cov_1g5xnjndfd().f[9]++;
          cov_1g5xnjndfd().s[49]++;
          return id !== testCaseId;
        });
      } else {
        /* istanbul ignore next */
        cov_1g5xnjndfd().b[16][1]++;
        cov_1g5xnjndfd().s[50]++;
        return [...prev, testCaseId];
      }
    });
  };
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[51]++;
  const handleRunTests = async () => {
    /* istanbul ignore next */
    cov_1g5xnjndfd().f[10]++;
    cov_1g5xnjndfd().s[52]++;
    if (
    /* istanbul ignore next */
    (cov_1g5xnjndfd().b[18][0]++, selectedTests.length === 0) &&
    /* istanbul ignore next */
    (cov_1g5xnjndfd().b[18][1]++, !allSelected)) {
      /* istanbul ignore next */
      cov_1g5xnjndfd().b[17][0]++;
      cov_1g5xnjndfd().s[53]++;
      onError?.("Please select at least one test to run");
      /* istanbul ignore next */
      cov_1g5xnjndfd().s[54]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_1g5xnjndfd().b[17][1]++;
    }
    cov_1g5xnjndfd().s[55]++;
    setIsRunning(true);
    /* istanbul ignore next */
    cov_1g5xnjndfd().s[56]++;
    try {
      const testCaseIds =
      /* istanbul ignore next */
      (cov_1g5xnjndfd().s[57]++, allSelected ?
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[19][0]++, testCases.map(tc => {
        /* istanbul ignore next */
        cov_1g5xnjndfd().f[11]++;
        cov_1g5xnjndfd().s[58]++;
        return tc.id;
      })) :
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[19][1]++, selectedTests));
      /* istanbul ignore next */
      cov_1g5xnjndfd().s[59]++;
      if (executionMode === "parallel") {
        /* istanbul ignore next */
        cov_1g5xnjndfd().b[20][0]++;
        // Use parallel execution endpoint
        const response =
        /* istanbul ignore next */
        (cov_1g5xnjndfd().s[60]++, await fetch("/api/test-cases/execute-parallel", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            prompt_card_id: promptCardId,
            test_case_ids: testCaseIds,
            model: selectedModel,
            configuration: {
              max_concurrent_tests: 3,
              timeout_per_test: 30000,
              retry_failed_tests: false,
              max_retries: 1,
              resource_limits: {
                memory_mb: 1024,
                cpu_percent: 50
              }
            },
            priority: 0
          })
        }));
        const data =
        /* istanbul ignore next */
        (cov_1g5xnjndfd().s[61]++, await response.json());
        /* istanbul ignore next */
        cov_1g5xnjndfd().s[62]++;
        if (!response.ok) {
          /* istanbul ignore next */
          cov_1g5xnjndfd().b[21][0]++;
          cov_1g5xnjndfd().s[63]++;
          throw new Error(
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[22][0]++, data.error) ||
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[22][1]++, "Failed to start parallel execution"));
        } else
        /* istanbul ignore next */
        {
          cov_1g5xnjndfd().b[21][1]++;
        }
        // For parallel execution, we'll need to handle the progress tracking differently
        // This would typically redirect to a progress page or show a modal
        cov_1g5xnjndfd().s[64]++;
        onTestComplete?.({
          execution_id: data.data.execution_id,
          status: "running",
          mode: "parallel"
        });
      } else {
        /* istanbul ignore next */
        cov_1g5xnjndfd().b[20][1]++;
        // Use sequential execution (existing API)
        const request =
        /* istanbul ignore next */
        (cov_1g5xnjndfd().s[65]++, {
          prompt_card_id: promptCardId,
          model: selectedModel,
          test_case_ids: allSelected ?
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[23][0]++, undefined) :
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[23][1]++, selectedTests)
        });
        const response =
        /* istanbul ignore next */
        (cov_1g5xnjndfd().s[66]++, await _api.api.runTests(request));
        /* istanbul ignore next */
        cov_1g5xnjndfd().s[67]++;
        if (response.execution) {
          /* istanbul ignore next */
          cov_1g5xnjndfd().b[24][0]++;
          cov_1g5xnjndfd().s[68]++;
          onTestComplete?.(response.execution);
        } else {
          /* istanbul ignore next */
          cov_1g5xnjndfd().b[24][1]++;
          cov_1g5xnjndfd().s[69]++;
          // Handle async execution - you might want to poll for results
          setTimeout(async () => {
            /* istanbul ignore next */
            cov_1g5xnjndfd().f[12]++;
            cov_1g5xnjndfd().s[70]++;
            try {
              const execution =
              /* istanbul ignore next */
              (cov_1g5xnjndfd().s[71]++, await _api.api.getTestExecution(response.execution_id));
              /* istanbul ignore next */
              cov_1g5xnjndfd().s[72]++;
              onTestComplete?.(execution);
            } catch (error) {
              /* istanbul ignore next */
              cov_1g5xnjndfd().s[73]++;
              onError?.(error instanceof Error ?
              /* istanbul ignore next */
              (cov_1g5xnjndfd().b[25][0]++, error.message) :
              /* istanbul ignore next */
              (cov_1g5xnjndfd().b[25][1]++, "Failed to get test results"));
            }
          }, 1000);
        }
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1g5xnjndfd().s[74]++;
      onError?.(error instanceof Error ?
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[26][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[26][1]++, "Failed to run tests"));
    } finally {
      /* istanbul ignore next */
      cov_1g5xnjndfd().s[75]++;
      setIsRunning(false);
    }
  };
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[76]++;
  const handleRunSingleTest = async testCaseId => {
    /* istanbul ignore next */
    cov_1g5xnjndfd().f[13]++;
    cov_1g5xnjndfd().s[77]++;
    try {
      const result =
      /* istanbul ignore next */
      (cov_1g5xnjndfd().s[78]++, await _api.api.runSingleTest(testCaseId, {
        model: selectedModel
      }));
      // Handle single test result - you might want a different callback
      /* istanbul ignore next */
      cov_1g5xnjndfd().s[79]++;
      console.log("Single test result:", result);
    } catch (error) {
      /* istanbul ignore next */
      cov_1g5xnjndfd().s[80]++;
      onError?.(error instanceof Error ?
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[27][0]++, error.message) :
      /* istanbul ignore next */
      (cov_1g5xnjndfd().b[27][1]++, "Failed to run test"));
    }
  };
  /* istanbul ignore next */
  cov_1g5xnjndfd().s[81]++;
  if (testCases.length === 0) {
    /* istanbul ignore next */
    cov_1g5xnjndfd().b[28][0]++;
    cov_1g5xnjndfd().s[82]++;
    return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "bg-gray-50 rounded-lg p-6 text-center",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
        className: "text-gray-500 mb-2",
        children: /*#__PURE__*/(0, _jsxruntime.jsx)("svg", {
          className: "mx-auto h-8 w-8",
          fill: "none",
          viewBox: "0 0 24 24",
          stroke: "currentColor",
          children: /*#__PURE__*/(0, _jsxruntime.jsx)("path", {
            strokeLinecap: "round",
            strokeLinejoin: "round",
            strokeWidth: 2,
            d: "M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"
          })
        })
      }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
        className: "text-gray-600",
        children: "No test cases available to run"
      }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
        className: "text-sm text-gray-500 mt-1",
        children: "Create test cases first to start testing"
      })]
    });
  } else
  /* istanbul ignore next */
  {
    cov_1g5xnjndfd().b[28][1]++;
  }
  cov_1g5xnjndfd().s[83]++;
  return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
    className: "bg-white border border-gray-200 rounded-lg p-6",
    children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "flex items-center justify-between mb-4",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h3", {
        className: "text-lg font-semibold text-gray-900",
        children: "Test Runner"
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)(_Badge.Badge, {
        variant: "default",
        children: [testCases.length, " test cases"]
      })]
    }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "mb-4",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("label", {
        className: "block text-sm font-medium text-gray-700 mb-2",
        children: "Model"
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)("select", {
        value: selectedModel,
        onChange: e => {
          /* istanbul ignore next */
          cov_1g5xnjndfd().f[14]++;
          cov_1g5xnjndfd().s[84]++;
          return setSelectedModel(e.target.value);
        },
        className: "w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500",
        disabled: isRunning,
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)("option", {
          value: "llama3.2",
          children: "Llama 3.2"
        }), /*#__PURE__*/(0, _jsxruntime.jsx)("option", {
          value: "llama3.1",
          children: "Llama 3.1"
        }), /*#__PURE__*/(0, _jsxruntime.jsx)("option", {
          value: "mistral",
          children: "Mistral"
        }), /*#__PURE__*/(0, _jsxruntime.jsx)("option", {
          value: "codellama",
          children: "CodeLlama"
        })]
      })]
    }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "mb-4",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("label", {
        className: "block text-sm font-medium text-gray-700 mb-2",
        children: "Execution Mode"
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "flex space-x-4",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("label", {
          className: "flex items-center",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("input", {
            type: "radio",
            name: "executionMode",
            value: "sequential",
            checked: executionMode === "sequential",
            onChange: e => {
              /* istanbul ignore next */
              cov_1g5xnjndfd().f[15]++;
              cov_1g5xnjndfd().s[85]++;
              return setExecutionMode(e.target.value);
            },
            disabled: isRunning,
            className: "mr-2"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
            className: "text-sm",
            children: "Sequential"
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)("label", {
          className: "flex items-center",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("input", {
            type: "radio",
            name: "executionMode",
            value: "parallel",
            checked: executionMode === "parallel",
            onChange: e => {
              /* istanbul ignore next */
              cov_1g5xnjndfd().f[16]++;
              cov_1g5xnjndfd().s[86]++;
              return setExecutionMode(e.target.value);
            },
            disabled: isRunning,
            className: "mr-2"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
            className: "text-sm",
            children: "Parallel"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
            className: "ml-1 text-xs text-blue-600",
            children: "⚡ Faster"
          })]
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
        className: "text-xs text-gray-500 mt-1",
        children: executionMode === "sequential" ?
        /* istanbul ignore next */
        (cov_1g5xnjndfd().b[29][0]++, "Run tests one at a time (traditional mode)") :
        /* istanbul ignore next */
        (cov_1g5xnjndfd().b[29][1]++, "Run multiple tests simultaneously with real-time progress tracking")
      })]
    }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "mb-4",
      children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "flex items-center justify-between mb-3",
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)("label", {
          className: "block text-sm font-medium text-gray-700",
          children: "Select Tests to Run"
        }), /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
          variant: "outline",
          size: "sm",
          onClick: handleSelectAll,
          disabled: isRunning,
          children: allSelected ?
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[30][0]++, "Deselect All") :
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[30][1]++, "Select All")
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
        className: "space-y-2 max-h-48 overflow-y-auto",
        children: testCases.map(testCase => {
          /* istanbul ignore next */
          cov_1g5xnjndfd().f[17]++;
          cov_1g5xnjndfd().s[87]++;
          return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "flex items-center justify-between p-3 border border-gray-200 rounded-md",
            children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
              className: "flex items-center space-x-3",
              children: [/*#__PURE__*/(0, _jsxruntime.jsx)("input", {
                type: "checkbox",
                id: `test-${testCase.id}`,
                checked:
                /* istanbul ignore next */
                (cov_1g5xnjndfd().b[31][0]++, allSelected) ||
                /* istanbul ignore next */
                (cov_1g5xnjndfd().b[31][1]++, selectedTests.includes(testCase.id)),
                onChange: () => {
                  /* istanbul ignore next */
                  cov_1g5xnjndfd().f[18]++;
                  cov_1g5xnjndfd().s[88]++;
                  return handleTestSelection(testCase.id);
                },
                disabled: isRunning,
                className: "h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              }), /*#__PURE__*/(0, _jsxruntime.jsx)("label", {
                htmlFor: `test-${testCase.id}`,
                className: "text-sm text-gray-900 cursor-pointer",
                children: testCase.name
              })]
            }), /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
              variant: "outline",
              size: "sm",
              onClick: () => {
                /* istanbul ignore next */
                cov_1g5xnjndfd().f[19]++;
                cov_1g5xnjndfd().s[89]++;
                return handleRunSingleTest(testCase.id);
              },
              disabled: isRunning,
              className: "text-xs",
              children: "Run Solo"
            })]
          }, testCase.id);
        })
      })]
    }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "flex justify-end",
      children: /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
        onClick: handleRunTests,
        disabled:
        /* istanbul ignore next */
        (cov_1g5xnjndfd().b[32][0]++, isRunning) ||
        /* istanbul ignore next */
        (cov_1g5xnjndfd().b[32][1]++, selectedTests.length === 0) &&
        /* istanbul ignore next */
        (cov_1g5xnjndfd().b[32][2]++, !allSelected),
        loading: isRunning,
        className: "px-6",
        children: isRunning ?
        /* istanbul ignore next */
        (/*#__PURE__*/cov_1g5xnjndfd().b[33][0]++, (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_LoadingSpinner.LoadingSpinner, {
            size: "sm",
            className: "mr-2"
          }), executionMode === "parallel" ?
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[34][0]++, "Starting Parallel Tests...") :
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[34][1]++, "Running Tests...")]
        })) :
        /* istanbul ignore next */
        (/*#__PURE__*/cov_1g5xnjndfd().b[33][1]++, (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
          children: [executionMode === "parallel" ?
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[35][0]++, "⚡ ") :
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[35][1]++, ""), "Run ", allSelected ?
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[36][0]++, "All") :
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[36][1]++, selectedTests.length), " Test", (allSelected ?
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[38][0]++, testCases.length) :
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[38][1]++, selectedTests.length)) !== 1 ?
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[37][0]++, "s") :
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[37][1]++, ""), executionMode === "parallel" ?
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[39][0]++, " (Parallel)") :
          /* istanbul ignore next */
          (cov_1g5xnjndfd().b[39][1]++, "")]
        }))
      })
    })]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,