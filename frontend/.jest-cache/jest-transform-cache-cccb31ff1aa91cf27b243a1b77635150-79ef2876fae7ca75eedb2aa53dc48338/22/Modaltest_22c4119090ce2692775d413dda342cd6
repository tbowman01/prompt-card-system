0974d7c9f64544185c55943e1d4f3fbe
"use strict";
// Mock ReactDOM.createPortal to render modal content inline for testing
jest.mock("react-dom", ()=>({
        ...jest.requireActual("react-dom"),
        createPortal: (node)=>node
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _Modal = require("../../../components/ui/Modal");
describe("Modal", ()=>{
    const mockOnClose = jest.fn();
    beforeEach(()=>{
        mockOnClose.mockClear();
        // Reset body overflow style
        document.body.style.overflow = "unset";
    });
    it("does not render when closed", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: false,
            onClose: mockOnClose,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Modal Content"
            })
        }));
        expect(_react.screen.queryByText("Modal Content")).not.toBeInTheDocument();
    });
    it("renders when open", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Modal Content"
            })
        }));
        expect(_react.screen.getByText("Modal Content")).toBeInTheDocument();
    });
    it("renders with title", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            title: "Test Modal",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Modal Content"
            })
        }));
        expect(_react.screen.getByText("Test Modal")).toBeInTheDocument();
        expect(_react.screen.getByText("Modal Content")).toBeInTheDocument();
    });
    it("calls onClose when clicking backdrop", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Modal Content"
            })
        }));
        const backdrop = document.querySelector(".bg-black.bg-opacity-50");
        expect(backdrop).toBeInTheDocument();
        _react.fireEvent.click(backdrop);
        expect(mockOnClose).toHaveBeenCalledTimes(1);
    });
    it("calls onClose when clicking close button", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            title: "Test Modal",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Modal Content"
            })
        }));
        const closeButton = _react.screen.getByRole("button");
        _react.fireEvent.click(closeButton);
        expect(mockOnClose).toHaveBeenCalledTimes(1);
    });
    it("applies different sizes correctly", ()=>{
        const { rerender } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            size: "sm",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Small Modal"
            })
        }));
        let modalContent = document.querySelector(".max-w-md");
        expect(modalContent).toBeInTheDocument();
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            size: "lg",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Large Modal"
            })
        }));
        modalContent = document.querySelector(".max-w-2xl");
        expect(modalContent).toBeInTheDocument();
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            size: "xl",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Extra Large Modal"
            })
        }));
        modalContent = document.querySelector(".max-w-4xl");
        expect(modalContent).toBeInTheDocument();
    });
    it("handles escape key press", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Modal Content"
            })
        }));
        _react.fireEvent.keyDown(document, {
            key: "Escape"
        });
        expect(mockOnClose).toHaveBeenCalledTimes(1);
    });
    it("sets body overflow to hidden when open", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Modal Content"
            })
        }));
        expect(document.body.style.overflow).toBe("hidden");
    });
    it("cleans up event listeners and body style on unmount", ()=>{
        const { unmount } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Modal Content"
            })
        }));
        unmount();
        expect(document.body.style.overflow).toBe("unset");
    });
    it("has proper ARIA and accessibility attributes", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            title: "Accessible Modal",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Modal Content"
            })
        }));
        const modal = document.querySelector(".relative.bg-white");
        expect(modal).toBeInTheDocument();
        // Modal should be rendered in a fixed overlay
        const overlay = document.querySelector(".fixed.inset-0");
        expect(overlay).toBeInTheDocument();
    });
    it("provides scrollable content area", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.Modal, {
            isOpen: true,
            onClose: mockOnClose,
            title: "Scrollable Modal",
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                style: {
                    height: "200vh"
                },
                children: "Very tall content"
            })
        }));
        const contentArea = document.querySelector(".overflow-y-auto.max-h-\\[calc\\(90vh-120px\\)\\]");
        expect(contentArea).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9mcm9udGVuZC9zcmMvX190ZXN0c19fL2NvbXBvbmVudHMvdWkvTW9kYWwudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmVuZGVyLCBzY3JlZW4sIGZpcmVFdmVudCB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgeyBNb2RhbCB9IGZyb20gJ0AvY29tcG9uZW50cy91aS9Nb2RhbCdcblxuLy8gTW9jayBSZWFjdERPTS5jcmVhdGVQb3J0YWwgdG8gcmVuZGVyIG1vZGFsIGNvbnRlbnQgaW5saW5lIGZvciB0ZXN0aW5nXG5qZXN0Lm1vY2soJ3JlYWN0LWRvbScsICgpID0+ICh7XG4gIC4uLmplc3QucmVxdWlyZUFjdHVhbCgncmVhY3QtZG9tJyksXG4gIGNyZWF0ZVBvcnRhbDogKG5vZGU6IFJlYWN0LlJlYWN0Tm9kZSkgPT4gbm9kZSxcbn0pKVxuXG5kZXNjcmliZSgnTW9kYWwnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tPbkNsb3NlID0gamVzdC5mbigpXG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja09uQ2xvc2UubW9ja0NsZWFyKClcbiAgICAvLyBSZXNldCBib2R5IG92ZXJmbG93IHN0eWxlXG4gICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICd1bnNldCdcbiAgfSlcblxuICBpdCgnZG9lcyBub3QgcmVuZGVyIHdoZW4gY2xvc2VkJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxNb2RhbCBpc09wZW49e2ZhbHNlfSBvbkNsb3NlPXttb2NrT25DbG9zZX0+XG4gICAgICAgIDxkaXY+TW9kYWwgQ29udGVudDwvZGl2PlxuICAgICAgPC9Nb2RhbD5cbiAgICApXG4gICAgXG4gICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgnTW9kYWwgQ29udGVudCcpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIHdoZW4gb3BlbicsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNPcGVuPXt0cnVlfSBvbkNsb3NlPXttb2NrT25DbG9zZX0+XG4gICAgICAgIDxkaXY+TW9kYWwgQ29udGVudDwvZGl2PlxuICAgICAgPC9Nb2RhbD5cbiAgICApXG4gICAgXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ01vZGFsIENvbnRlbnQnKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdyZW5kZXJzIHdpdGggdGl0bGUnLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPE1vZGFsIGlzT3Blbj17dHJ1ZX0gb25DbG9zZT17bW9ja09uQ2xvc2V9IHRpdGxlPVwiVGVzdCBNb2RhbFwiPlxuICAgICAgICA8ZGl2Pk1vZGFsIENvbnRlbnQ8L2Rpdj5cbiAgICAgIDwvTW9kYWw+XG4gICAgKVxuICAgIFxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCdUZXN0IE1vZGFsJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnTW9kYWwgQ29udGVudCcpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gIH0pXG5cbiAgaXQoJ2NhbGxzIG9uQ2xvc2Ugd2hlbiBjbGlja2luZyBiYWNrZHJvcCcsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNPcGVuPXt0cnVlfSBvbkNsb3NlPXttb2NrT25DbG9zZX0+XG4gICAgICAgIDxkaXY+TW9kYWwgQ29udGVudDwvZGl2PlxuICAgICAgPC9Nb2RhbD5cbiAgICApXG4gICAgXG4gICAgY29uc3QgYmFja2Ryb3AgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYmctYmxhY2suYmctb3BhY2l0eS01MCcpXG4gICAgZXhwZWN0KGJhY2tkcm9wKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgXG4gICAgZmlyZUV2ZW50LmNsaWNrKGJhY2tkcm9wISlcbiAgICBleHBlY3QobW9ja09uQ2xvc2UpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICB9KVxuXG4gIGl0KCdjYWxscyBvbkNsb3NlIHdoZW4gY2xpY2tpbmcgY2xvc2UgYnV0dG9uJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxNb2RhbCBpc09wZW49e3RydWV9IG9uQ2xvc2U9e21vY2tPbkNsb3NlfSB0aXRsZT1cIlRlc3QgTW9kYWxcIj5cbiAgICAgICAgPGRpdj5Nb2RhbCBDb250ZW50PC9kaXY+XG4gICAgICA8L01vZGFsPlxuICAgIClcbiAgICBcbiAgICBjb25zdCBjbG9zZUJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicpXG4gICAgZmlyZUV2ZW50LmNsaWNrKGNsb3NlQnV0dG9uKVxuICAgIFxuICAgIGV4cGVjdChtb2NrT25DbG9zZSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ2FwcGxpZXMgZGlmZmVyZW50IHNpemVzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICBjb25zdCB7IHJlcmVuZGVyIH0gPSByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNPcGVuPXt0cnVlfSBvbkNsb3NlPXttb2NrT25DbG9zZX0gc2l6ZT1cInNtXCI+XG4gICAgICAgIDxkaXY+U21hbGwgTW9kYWw8L2Rpdj5cbiAgICAgIDwvTW9kYWw+XG4gICAgKVxuICAgIFxuICAgIGxldCBtb2RhbENvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWF4LXctbWQnKVxuICAgIGV4cGVjdChtb2RhbENvbnRlbnQpLnRvQmVJblRoZURvY3VtZW50KClcblxuICAgIHJlcmVuZGVyKFxuICAgICAgPE1vZGFsIGlzT3Blbj17dHJ1ZX0gb25DbG9zZT17bW9ja09uQ2xvc2V9IHNpemU9XCJsZ1wiPlxuICAgICAgICA8ZGl2PkxhcmdlIE1vZGFsPC9kaXY+XG4gICAgICA8L01vZGFsPlxuICAgIClcbiAgICBcbiAgICBtb2RhbENvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWF4LXctMnhsJylcbiAgICBleHBlY3QobW9kYWxDb250ZW50KS50b0JlSW5UaGVEb2N1bWVudCgpXG5cbiAgICByZXJlbmRlcihcbiAgICAgIDxNb2RhbCBpc09wZW49e3RydWV9IG9uQ2xvc2U9e21vY2tPbkNsb3NlfSBzaXplPVwieGxcIj5cbiAgICAgICAgPGRpdj5FeHRyYSBMYXJnZSBNb2RhbDwvZGl2PlxuICAgICAgPC9Nb2RhbD5cbiAgICApXG4gICAgXG4gICAgbW9kYWxDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1heC13LTR4bCcpXG4gICAgZXhwZWN0KG1vZGFsQ29udGVudCkudG9CZUluVGhlRG9jdW1lbnQoKVxuICB9KVxuXG4gIGl0KCdoYW5kbGVzIGVzY2FwZSBrZXkgcHJlc3MnLCAoKSA9PiB7XG4gICAgcmVuZGVyKFxuICAgICAgPE1vZGFsIGlzT3Blbj17dHJ1ZX0gb25DbG9zZT17bW9ja09uQ2xvc2V9PlxuICAgICAgICA8ZGl2Pk1vZGFsIENvbnRlbnQ8L2Rpdj5cbiAgICAgIDwvTW9kYWw+XG4gICAgKVxuICAgIFxuICAgIGZpcmVFdmVudC5rZXlEb3duKGRvY3VtZW50LCB7IGtleTogJ0VzY2FwZScgfSlcbiAgICBleHBlY3QobW9ja09uQ2xvc2UpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICB9KVxuXG4gIGl0KCdzZXRzIGJvZHkgb3ZlcmZsb3cgdG8gaGlkZGVuIHdoZW4gb3BlbicsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNPcGVuPXt0cnVlfSBvbkNsb3NlPXttb2NrT25DbG9zZX0+XG4gICAgICAgIDxkaXY+TW9kYWwgQ29udGVudDwvZGl2PlxuICAgICAgPC9Nb2RhbD5cbiAgICApXG4gICAgXG4gICAgZXhwZWN0KGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cpLnRvQmUoJ2hpZGRlbicpXG4gIH0pXG5cbiAgaXQoJ2NsZWFucyB1cCBldmVudCBsaXN0ZW5lcnMgYW5kIGJvZHkgc3R5bGUgb24gdW5tb3VudCcsICgpID0+IHtcbiAgICBjb25zdCB7IHVubW91bnQgfSA9IHJlbmRlcihcbiAgICAgIDxNb2RhbCBpc09wZW49e3RydWV9IG9uQ2xvc2U9e21vY2tPbkNsb3NlfT5cbiAgICAgICAgPGRpdj5Nb2RhbCBDb250ZW50PC9kaXY+XG4gICAgICA8L01vZGFsPlxuICAgIClcbiAgICBcbiAgICB1bm1vdW50KClcbiAgICBleHBlY3QoZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdykudG9CZSgndW5zZXQnKVxuICB9KVxuXG4gIGl0KCdoYXMgcHJvcGVyIEFSSUEgYW5kIGFjY2Vzc2liaWxpdHkgYXR0cmlidXRlcycsICgpID0+IHtcbiAgICByZW5kZXIoXG4gICAgICA8TW9kYWwgaXNPcGVuPXt0cnVlfSBvbkNsb3NlPXttb2NrT25DbG9zZX0gdGl0bGU9XCJBY2Nlc3NpYmxlIE1vZGFsXCI+XG4gICAgICAgIDxkaXY+TW9kYWwgQ29udGVudDwvZGl2PlxuICAgICAgPC9Nb2RhbD5cbiAgICApXG4gICAgXG4gICAgY29uc3QgbW9kYWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmVsYXRpdmUuYmctd2hpdGUnKVxuICAgIGV4cGVjdChtb2RhbCkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIFxuICAgIC8vIE1vZGFsIHNob3VsZCBiZSByZW5kZXJlZCBpbiBhIGZpeGVkIG92ZXJsYXlcbiAgICBjb25zdCBvdmVybGF5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZpeGVkLmluc2V0LTAnKVxuICAgIGV4cGVjdChvdmVybGF5KS50b0JlSW5UaGVEb2N1bWVudCgpXG4gIH0pXG5cbiAgaXQoJ3Byb3ZpZGVzIHNjcm9sbGFibGUgY29udGVudCBhcmVhJywgKCkgPT4ge1xuICAgIHJlbmRlcihcbiAgICAgIDxNb2RhbCBpc09wZW49e3RydWV9IG9uQ2xvc2U9e21vY2tPbkNsb3NlfSB0aXRsZT1cIlNjcm9sbGFibGUgTW9kYWxcIj5cbiAgICAgICAgPGRpdiBzdHlsZT17eyBoZWlnaHQ6ICcyMDB2aCcgfX0+VmVyeSB0YWxsIGNvbnRlbnQ8L2Rpdj5cbiAgICAgIDwvTW9kYWw+XG4gICAgKVxuICAgIFxuICAgIGNvbnN0IGNvbnRlbnRBcmVhID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm92ZXJmbG93LXktYXV0by5tYXgtaC1cXFxcW2NhbGNcXFxcKDkwdmgtMTIwcHhcXFxcKVxcXFxdJylcbiAgICBleHBlY3QoY29udGVudEFyZWEpLnRvQmVJblRoZURvY3VtZW50KClcbiAgfSlcbn0pIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZVBvcnRhbCIsIm5vZGUiLCJkZXNjcmliZSIsIm1vY2tPbkNsb3NlIiwiZm4iLCJiZWZvcmVFYWNoIiwibW9ja0NsZWFyIiwiZG9jdW1lbnQiLCJib2R5Iiwic3R5bGUiLCJvdmVyZmxvdyIsIml0IiwicmVuZGVyIiwiTW9kYWwiLCJpc09wZW4iLCJvbkNsb3NlIiwiZGl2IiwiZXhwZWN0Iiwic2NyZWVuIiwicXVlcnlCeVRleHQiLCJub3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsImdldEJ5VGV4dCIsInRpdGxlIiwiYmFja2Ryb3AiLCJxdWVyeVNlbGVjdG9yIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJjbG9zZUJ1dHRvbiIsImdldEJ5Um9sZSIsInJlcmVuZGVyIiwic2l6ZSIsIm1vZGFsQ29udGVudCIsImtleURvd24iLCJrZXkiLCJ0b0JlIiwidW5tb3VudCIsIm1vZGFsIiwib3ZlcmxheSIsImhlaWdodCIsImNvbnRlbnRBcmVhIl0sIm1hcHBpbmdzIjoiO0FBR0Esd0VBQXdFO0FBQ3hFQSxLQUFLQyxJQUFJLENBQUMsYUFBYSxJQUFPLENBQUE7UUFDNUIsR0FBR0QsS0FBS0UsYUFBYSxDQUFDLFlBQVk7UUFDbENDLGNBQWMsQ0FBQ0MsT0FBMEJBO0lBQzNDLENBQUE7Ozs7O3VCQVAwQzt1QkFDcEI7QUFRdEJDLFNBQVMsU0FBUztJQUNoQixNQUFNQyxj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