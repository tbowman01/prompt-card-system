{"version":3,"sources":["/workspaces/prompt-card-system/frontend/src/__tests__/components/ui/Modal.test.tsx"],"sourcesContent":["import { render, screen, fireEvent } from '@testing-library/react'\nimport { Modal } from '@/components/ui/Modal'\n\n// Mock ReactDOM.createPortal to render modal content inline for testing\njest.mock('react-dom', () => ({\n  ...jest.requireActual('react-dom'),\n  createPortal: (node: React.ReactNode) => node,\n}))\n\ndescribe('Modal', () => {\n  const mockOnClose = jest.fn()\n\n  beforeEach(() => {\n    mockOnClose.mockClear()\n    // Reset body overflow style\n    document.body.style.overflow = 'unset'\n  })\n\n  it('does not render when closed', () => {\n    render(\n      <Modal isOpen={false} onClose={mockOnClose}>\n        <div>Modal Content</div>\n      </Modal>\n    )\n    \n    expect(screen.queryByText('Modal Content')).not.toBeInTheDocument()\n  })\n\n  it('renders when open', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose}>\n        <div>Modal Content</div>\n      </Modal>\n    )\n    \n    expect(screen.getByText('Modal Content')).toBeInTheDocument()\n  })\n\n  it('renders with title', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose} title=\"Test Modal\">\n        <div>Modal Content</div>\n      </Modal>\n    )\n    \n    expect(screen.getByText('Test Modal')).toBeInTheDocument()\n    expect(screen.getByText('Modal Content')).toBeInTheDocument()\n  })\n\n  it('calls onClose when clicking backdrop', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose}>\n        <div>Modal Content</div>\n      </Modal>\n    )\n    \n    const backdrop = document.querySelector('.bg-black.bg-opacity-50')\n    expect(backdrop).toBeInTheDocument()\n    \n    fireEvent.click(backdrop!)\n    expect(mockOnClose).toHaveBeenCalledTimes(1)\n  })\n\n  it('calls onClose when clicking close button', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose} title=\"Test Modal\">\n        <div>Modal Content</div>\n      </Modal>\n    )\n    \n    const closeButton = screen.getByRole('button')\n    fireEvent.click(closeButton)\n    \n    expect(mockOnClose).toHaveBeenCalledTimes(1)\n  })\n\n  it('applies different sizes correctly', () => {\n    const { rerender } = render(\n      <Modal isOpen={true} onClose={mockOnClose} size=\"sm\">\n        <div>Small Modal</div>\n      </Modal>\n    )\n    \n    let modalContent = document.querySelector('.max-w-md')\n    expect(modalContent).toBeInTheDocument()\n\n    rerender(\n      <Modal isOpen={true} onClose={mockOnClose} size=\"lg\">\n        <div>Large Modal</div>\n      </Modal>\n    )\n    \n    modalContent = document.querySelector('.max-w-2xl')\n    expect(modalContent).toBeInTheDocument()\n\n    rerender(\n      <Modal isOpen={true} onClose={mockOnClose} size=\"xl\">\n        <div>Extra Large Modal</div>\n      </Modal>\n    )\n    \n    modalContent = document.querySelector('.max-w-4xl')\n    expect(modalContent).toBeInTheDocument()\n  })\n\n  it('handles escape key press', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose}>\n        <div>Modal Content</div>\n      </Modal>\n    )\n    \n    fireEvent.keyDown(document, { key: 'Escape' })\n    expect(mockOnClose).toHaveBeenCalledTimes(1)\n  })\n\n  it('sets body overflow to hidden when open', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose}>\n        <div>Modal Content</div>\n      </Modal>\n    )\n    \n    expect(document.body.style.overflow).toBe('hidden')\n  })\n\n  it('cleans up event listeners and body style on unmount', () => {\n    const { unmount } = render(\n      <Modal isOpen={true} onClose={mockOnClose}>\n        <div>Modal Content</div>\n      </Modal>\n    )\n    \n    unmount()\n    expect(document.body.style.overflow).toBe('unset')\n  })\n\n  it('has proper ARIA and accessibility attributes', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose} title=\"Accessible Modal\">\n        <div>Modal Content</div>\n      </Modal>\n    )\n    \n    const modal = document.querySelector('.relative.bg-white')\n    expect(modal).toBeInTheDocument()\n    \n    // Modal should be rendered in a fixed overlay\n    const overlay = document.querySelector('.fixed.inset-0')\n    expect(overlay).toBeInTheDocument()\n  })\n\n  it('provides scrollable content area', () => {\n    render(\n      <Modal isOpen={true} onClose={mockOnClose} title=\"Scrollable Modal\">\n        <div style={{ height: '200vh' }}>Very tall content</div>\n      </Modal>\n    )\n    \n    const contentArea = document.querySelector('.overflow-y-auto.max-h-\\\\[calc\\\\(90vh-120px\\\\)\\\\]')\n    expect(contentArea).toBeInTheDocument()\n  })\n})"],"names":["jest","mock","requireActual","createPortal","node","describe","mockOnClose","fn","beforeEach","mockClear","document","body","style","overflow","it","render","Modal","isOpen","onClose","div","expect","screen","queryByText","not","toBeInTheDocument","getByText","title","backdrop","querySelector","fireEvent","click","toHaveBeenCalledTimes","closeButton","getByRole","rerender","size","modalContent","keyDown","key","toBe","unmount","modal","overlay","height","contentArea"],"mappings":"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"}