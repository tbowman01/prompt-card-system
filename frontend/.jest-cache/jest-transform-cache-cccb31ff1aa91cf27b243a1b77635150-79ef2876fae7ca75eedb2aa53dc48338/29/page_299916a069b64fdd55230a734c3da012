6ed8256893ba38c564413774844d1a43
"use client";
"use strict";

/* istanbul ignore next */
function cov_2gj4nh3o8g() {
  var path = "/workspaces/prompt-card-system/frontend/src/app/prompt-cards/[id]/test/page.tsx";
  var hash = "90809ffb0843b09a06e57d765018eb44fdfa1838";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/frontend/src/app/prompt-cards/[id]/test/page.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 33
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "4": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "5": {
        start: {
          line: 14,
          column: 20
        },
        end: {
          line: 14,
          column: 46
        }
      },
      "6": {
        start: {
          line: 15,
          column: 28
        },
        end: {
          line: 15,
          column: 74
        }
      },
      "7": {
        start: {
          line: 16,
          column: 16
        },
        end: {
          line: 16,
          column: 59
        }
      },
      "8": {
        start: {
          line: 17,
          column: 24
        },
        end: {
          line: 17,
          column: 75
        }
      },
      "9": {
        start: {
          line: 18,
          column: 34
        },
        end: {
          line: 18,
          column: 118
        }
      },
      "10": {
        start: {
          line: 19,
          column: 35
        },
        end: {
          line: 19,
          column: 120
        }
      },
      "11": {
        start: {
          line: 20,
          column: 13
        },
        end: {
          line: 20,
          column: 43
        }
      },
      "12": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 6
        }
      },
      "13": {
        start: {
          line: 27,
          column: 19
        },
        end: {
          line: 27,
          column: 47
        }
      },
      "14": {
        start: {
          line: 28,
          column: 19
        },
        end: {
          line: 28,
          column: 47
        }
      },
      "15": {
        start: {
          line: 29,
          column: 25
        },
        end: {
          line: 29,
          column: 45
        }
      },
      "16": {
        start: {
          line: 30,
          column: 40
        },
        end: {
          line: 30,
          column: 66
        }
      },
      "17": {
        start: {
          line: 31,
          column: 34
        },
        end: {
          line: 31,
          column: 60
        }
      },
      "18": {
        start: {
          line: 32,
          column: 30
        },
        end: {
          line: 32,
          column: 56
        }
      },
      "19": {
        start: {
          line: 33,
          column: 46
        },
        end: {
          line: 33,
          column: 72
        }
      },
      "20": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 43,
          column: 7
        }
      },
      "21": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 39,
          column: 9
        }
      },
      "22": {
        start: {
          line: 36,
          column: 12
        },
        end: {
          line: 36,
          column: 47
        }
      },
      "23": {
        start: {
          line: 37,
          column: 12
        },
        end: {
          line: 37,
          column: 30
        }
      },
      "24": {
        start: {
          line: 38,
          column: 12
        },
        end: {
          line: 38,
          column: 19
        }
      },
      "25": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 26
        }
      },
      "26": {
        start: {
          line: 44,
          column: 28
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "27": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      "28": {
        start: {
          line: 46,
          column: 12
        },
        end: {
          line: 46,
          column: 29
        }
      },
      "29": {
        start: {
          line: 47,
          column: 25
        },
        end: {
          line: 47,
          column: 67
        }
      },
      "30": {
        start: {
          line: 48,
          column: 12
        },
        end: {
          line: 48,
          column: 32
        }
      },
      "31": {
        start: {
          line: 49,
          column: 12
        },
        end: {
          line: 49,
          column: 27
        }
      },
      "32": {
        start: {
          line: 51,
          column: 12
        },
        end: {
          line: 51,
          column: 89
        }
      },
      "33": {
        start: {
          line: 53,
          column: 12
        },
        end: {
          line: 53,
          column: 30
        }
      },
      "34": {
        start: {
          line: 56,
          column: 31
        },
        end: {
          line: 58,
          column: 5
        }
      },
      "35": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 36
        }
      },
      "36": {
        start: {
          line: 59,
          column: 28
        },
        end: {
          line: 61,
          column: 5
        }
      },
      "37": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 31
        }
      },
      "38": {
        start: {
          line: 62,
          column: 31
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "39": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 31
        }
      },
      "40": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 76,
          column: 5
        }
      },
      "41": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 75,
          column: 11
        }
      },
      "42": {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "43": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 112,
          column: 11
        }
      },
      "44": {
        start: {
          line: 97,
          column: 49
        },
        end: {
          line: 97,
          column: 62
        }
      },
      "45": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 324,
          column: 7
        }
      },
      "46": {
        start: {
          line: 199,
          column: 112
        },
        end: {
          line: 202,
          column: 57
        }
      },
      "47": {
        start: {
          line: 220,
          column: 41
        },
        end: {
          line: 220,
          column: 55
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "_interop_require_default",
        decl: {
          start: {
            line: 21,
            column: 9
          },
          end: {
            line: 21,
            column: 33
          }
        },
        loc: {
          start: {
            line: 21,
            column: 39
          },
          end: {
            line: 25,
            column: 1
          }
        },
        line: 21
      },
      "2": {
        name: "TestExecutionPage",
        decl: {
          start: {
            line: 26,
            column: 9
          },
          end: {
            line: 26,
            column: 26
          }
        },
        loc: {
          start: {
            line: 26,
            column: 29
          },
          end: {
            line: 325,
            column: 1
          }
        },
        line: 26
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 34,
            column: 26
          },
          end: {
            line: 34,
            column: 27
          }
        },
        loc: {
          start: {
            line: 34,
            column: 30
          },
          end: {
            line: 41,
            column: 5
          }
        },
        line: 34
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 44,
            column: 28
          },
          end: {
            line: 44,
            column: 29
          }
        },
        loc: {
          start: {
            line: 44,
            column: 38
          },
          end: {
            line: 55,
            column: 5
          }
        },
        line: 44
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 56,
            column: 31
          },
          end: {
            line: 56,
            column: 32
          }
        },
        loc: {
          start: {
            line: 56,
            column: 44
          },
          end: {
            line: 58,
            column: 5
          }
        },
        line: 56
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 59,
            column: 28
          },
          end: {
            line: 59,
            column: 29
          }
        },
        loc: {
          start: {
            line: 59,
            column: 44
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 59
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 62,
            column: 31
          },
          end: {
            line: 62,
            column: 32
          }
        },
        loc: {
          start: {
            line: 62,
            column: 35
          },
          end: {
            line: 64,
            column: 5
          }
        },
        line: 62
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 97,
            column: 45
          },
          end: {
            line: 97,
            column: 46
          }
        },
        loc: {
          start: {
            line: 97,
            column: 49
          },
          end: {
            line: 97,
            column: 62
          }
        },
        line: 97
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 199,
            column: 79
          },
          end: {
            line: 199,
            column: 80
          }
        },
        loc: {
          start: {
            line: 199,
            column: 112
          },
          end: {
            line: 202,
            column: 57
          }
        },
        line: 199
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 220,
            column: 37
          },
          end: {
            line: 220,
            column: 38
          }
        },
        loc: {
          start: {
            line: 220,
            column: 41
          },
          end: {
            line: 220,
            column: 55
          }
        },
        line: 220
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 22,
            column: 35
          },
          end: {
            line: 22,
            column: 38
          }
        }, {
          start: {
            line: 22,
            column: 41
          },
          end: {
            line: 24,
            column: 5
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 11
          },
          end: {
            line: 22,
            column: 14
          }
        }, {
          start: {
            line: 22,
            column: 18
          },
          end: {
            line: 22,
            column: 32
          }
        }],
        line: 22
      },
      "2": {
        loc: {
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 8
          },
          end: {
            line: 39,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "3": {
        loc: {
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 48
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 12
          },
          end: {
            line: 35,
            column: 25
          }
        }, {
          start: {
            line: 35,
            column: 29
          },
          end: {
            line: 35,
            column: 48
          }
        }],
        line: 35
      },
      "4": {
        loc: {
          start: {
            line: 51,
            column: 21
          },
          end: {
            line: 51,
            column: 87
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 51,
            column: 44
          },
          end: {
            line: 51,
            column: 55
          }
        }, {
          start: {
            line: 51,
            column: 58
          },
          end: {
            line: 51,
            column: 87
          }
        }],
        line: 51
      },
      "5": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 76,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "6": {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 77
      },
      "7": {
        loc: {
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 77,
            column: 8
          },
          end: {
            line: 77,
            column: 13
          }
        }, {
          start: {
            line: 77,
            column: 17
          },
          end: {
            line: 77,
            column: 28
          }
        }],
        line: 77
      },
      "8": {
        loc: {
          start: {
            line: 91,
            column: 38
          },
          end: {
            line: 91,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 38
          },
          end: {
            line: 91,
            column: 43
          }
        }, {
          start: {
            line: 91,
            column: 47
          },
          end: {
            line: 91,
            column: 70
          }
        }],
        line: 91
      },
      "9": {
        loc: {
          start: {
            line: 170,
            column: 44
          },
          end: {
            line: 173,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 170,
            column: 44
          },
          end: {
            line: 170,
            column: 66
          }
        }, {
          start: {
            line: 170,
            column: 84
          },
          end: {
            line: 173,
            column: 46
          }
        }],
        line: 170
      },
      "10": {
        loc: {
          start: {
            line: 190,
            column: 32
          },
          end: {
            line: 205,
            column: 34
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 190,
            column: 32
          },
          end: {
            line: 190,
            column: 63
          }
        }, {
          start: {
            line: 190,
            column: 81
          },
          end: {
            line: 205,
            column: 34
          }
        }],
        line: 190
      },
      "11": {
        loc: {
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 225,
            column: 18
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 16
          },
          end: {
            line: 210,
            column: 21
          }
        }, {
          start: {
            line: 210,
            column: 39
          },
          end: {
            line: 225,
            column: 18
          }
        }],
        line: 210
      },
      "12": {
        loc: {
          start: {
            line: 232,
            column: 43
          },
          end: {
            line: 232,
            column: 70
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 232,
            column: 43
          },
          end: {
            line: 232,
            column: 64
          }
        }, {
          start: {
            line: 232,
            column: 68
          },
          end: {
            line: 232,
            column: 70
          }
        }],
        line: 232
      },
      "13": {
        loc: {
          start: {
            line: 238,
            column: 38
          },
          end: {
            line: 268,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 238,
            column: 68
          },
          end: {
            line: 241,
            column: 30
          }
        }, {
          start: {
            line: 241,
            column: 47
          },
          end: {
            line: 268,
            column: 30
          }
        }],
        line: 238
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/workspaces/prompt-card-system/frontend/src/app/prompt-cards/[id]/test/page.tsx"],
      sourcesContent: ["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useParams, useRouter } from 'next/navigation';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/Button';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport TestRunner from '@/components/TestExecution/TestRunner';\nimport TestResults from '@/components/TestExecution/TestResults';\nimport { PromptCard, TestExecution } from '@/types';\nimport { api } from '@/lib/api';\n\nexport default function TestExecutionPage() {\n  const params = useParams();\n  const router = useRouter();\n  const promptCardId = parseInt(params?.id as string);\n\n  const [promptCard, setPromptCard] = useState<PromptCard | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [testExecution, setTestExecution] = useState<TestExecution | null>(null);\n\n  useEffect(() => {\n    if (!promptCardId || isNaN(promptCardId)) {\n      setError('Invalid prompt card ID');\n      setLoading(false);\n      return;\n    }\n\n    fetchPromptCard();\n  }, [promptCardId]);\n\n  const fetchPromptCard = async () => {\n    try {\n      setLoading(true);\n      const card = await api.getPromptCard(promptCardId);\n      setPromptCard(card as PromptCard);\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to fetch prompt card');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleTestComplete = (execution: TestExecution) => {\n    setTestExecution(execution);\n  };\n\n  const handleTestError = (errorMessage: string) => {\n    setError(errorMessage);\n  };\n\n  const handleClearResults = () => {\n    setTestExecution(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"flex justify-center items-center min-h-64\">\n            <LoadingSpinner />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !promptCard) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"bg-red-50 border border-red-200 rounded-md p-6 max-w-2xl mx-auto\">\n            <h1 className=\"text-lg font-semibold text-red-800 mb-2\">Error</h1>\n            <p className=\"text-red-700 mb-4\">{error || 'Prompt card not found'}</p>\n            <div className=\"flex space-x-3\">\n              <Button onClick={() => router.back()}>Go Back</Button>\n              <Link href=\"/prompt-cards\">\n                <Button variant=\"outline\">View All Cards</Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Test Execution</h1>\n              <p className=\"text-gray-600 mt-2\">Run and analyze tests for your prompt card</p>\n            </div>\n            <div className=\"flex space-x-3\">\n              <Link href={`/prompt-cards/${promptCardId}`}>\n                <Button variant=\"outline\">Edit Card</Button>\n              </Link>\n              <Link href=\"/prompt-cards\">\n                <Button variant=\"outline\">Back to Cards</Button>\n              </Link>\n            </div>\n          </div>\n\n          {/* Prompt Card Info */}\n          <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex-1\">\n                <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">{promptCard.title}</h2>\n                {promptCard.description && (\n                  <p className=\"text-gray-600 mb-4\">{promptCard.description}</p>\n                )}\n                <div className=\"bg-gray-50 rounded-md p-4\">\n                  <p className=\"text-sm text-gray-500 mb-2\">Prompt Template:</p>\n                  <pre className=\"text-sm text-gray-700 whitespace-pre-wrap font-mono\">\n                    {promptCard.prompt_template}\n                  </pre>\n                </div>\n              </div>\n            </div>\n            \n            {promptCard.variables.length > 0 && (\n              <div className=\"mt-4\">\n                <p className=\"text-sm text-gray-500 mb-2\">Variables:</p>\n                <div className=\"flex flex-wrap gap-2\">\n                  {promptCard.variables.map((variable, index) => (\n                    <span \n                      key={index}\n                      className=\"px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm\"\n                    >\n                      {variable}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Error Display */}\n        {error && (\n          <div className=\"mb-6 bg-red-50 border border-red-200 rounded-md p-4\">\n            <p className=\"text-red-800\">{error}</p>\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              onClick={() => setError(null)}\n              className=\"mt-2\"\n            >\n              Dismiss\n            </Button>\n          </div>\n        )}\n\n        {/* Main Content */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Test Runner */}\n          <div>\n            <TestRunner\n              promptCardId={promptCardId}\n              testCases={promptCard.test_cases || []}\n              onTestComplete={handleTestComplete}\n              onError={handleTestError}\n            />\n          </div>\n\n          {/* Test Results */}\n          <div>\n            {testExecution ? (\n              <TestResults \n                execution={testExecution} \n                onClear={handleClearResults}\n              />\n            ) : (\n              <div className=\"bg-white border border-gray-200 rounded-lg p-6 text-center\">\n                <div className=\"text-gray-500 mb-4\">\n                  <svg className=\"mx-auto h-12 w-12\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n                  </svg>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Test Results</h3>\n                <p className=\"text-gray-600 mb-4\">\n                  Run tests to see results and analysis here\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Additional Info */}\n        <div className=\"mt-8 bg-blue-50 border border-blue-200 rounded-lg p-4\">\n          <div className=\"flex items-start\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-blue-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-blue-800\">Test Execution Tips</h3>\n              <div className=\"mt-2 text-sm text-blue-700\">\n                <ul className=\"list-disc list-inside space-y-1\">\n                  <li>Select specific test cases or run all tests for comprehensive validation</li>\n                  <li>Choose the appropriate model for your use case (Llama, Mistral, etc.)</li>\n                  <li>Review assertion results to understand why tests pass or fail</li>\n                  <li>Use execution metadata to track performance and model behavior</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],
      names: ["TestExecutionPage", "params", "useParams", "router", "useRouter", "promptCardId", "parseInt", "id", "promptCard", "setPromptCard", "useState", "loading", "setLoading", "error", "setError", "testExecution", "setTestExecution", "useEffect", "isNaN", "fetchPromptCard", "card", "api", "getPromptCard", "err", "Error", "message", "handleTestComplete", "execution", "handleTestError", "errorMessage", "handleClearResults", "div", "className", "LoadingSpinner", "h1", "p", "Button", "onClick", "back", "Link", "href", "variant", "h2", "title", "description", "pre", "prompt_template", "variables", "length", "map", "variable", "index", "span", "size", "TestRunner", "testCases", "test_cases", "onTestComplete", "onError", "TestResults", "onClear", "svg", "fill", "viewBox", "stroke", "path", "strokeLinecap", "strokeLinejoin", "strokeWidth", "d", "h3", "fillRule", "clipRule", "ul", "li"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "90809ffb0843b09a06e57d765018eb44fdfa1838"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gj4nh3o8g = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gj4nh3o8g();
cov_2gj4nh3o8g().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_2gj4nh3o8g().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_2gj4nh3o8g().f[0]++;
    cov_2gj4nh3o8g().s[2]++;
    return TestExecutionPage;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_2gj4nh3o8g().s[3]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(cov_2gj4nh3o8g().s[4]++, require("react"));
const _navigation =
/* istanbul ignore next */
(cov_2gj4nh3o8g().s[5]++, require("next/navigation"));
const _link =
/* istanbul ignore next */
(/*#__PURE__*/cov_2gj4nh3o8g().s[6]++, _interop_require_default(require("next/link")));
const _Button =
/* istanbul ignore next */
(cov_2gj4nh3o8g().s[7]++, require("../../../../components/ui/Button"));
const _LoadingSpinner =
/* istanbul ignore next */
(cov_2gj4nh3o8g().s[8]++, require("../../../../components/ui/LoadingSpinner"));
const _TestRunner =
/* istanbul ignore next */
(/*#__PURE__*/cov_2gj4nh3o8g().s[9]++, _interop_require_default(require("../../../../components/TestExecution/TestRunner")));
const _TestResults =
/* istanbul ignore next */
(/*#__PURE__*/cov_2gj4nh3o8g().s[10]++, _interop_require_default(require("../../../../components/TestExecution/TestResults")));
const _api =
/* istanbul ignore next */
(cov_2gj4nh3o8g().s[11]++, require("../../../../lib/api"));
function _interop_require_default(obj) {
  /* istanbul ignore next */
  cov_2gj4nh3o8g().f[1]++;
  cov_2gj4nh3o8g().s[12]++;
  return /* istanbul ignore next */(cov_2gj4nh3o8g().b[1][0]++, obj) &&
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().b[1][1]++, obj.__esModule) ?
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().b[0][0]++, obj) :
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().b[0][1]++, {
    default: obj
  });
}
function TestExecutionPage() {
  /* istanbul ignore next */
  cov_2gj4nh3o8g().f[2]++;
  const params =
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().s[13]++, (0, _navigation.useParams)());
  const router =
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().s[14]++, (0, _navigation.useRouter)());
  const promptCardId =
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().s[15]++, parseInt(params?.id));
  const [promptCard, setPromptCard] =
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().s[16]++, (0, _react.useState)(null));
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().s[17]++, (0, _react.useState)(true));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().s[18]++, (0, _react.useState)(null));
  const [testExecution, setTestExecution] =
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().s[19]++, (0, _react.useState)(null));
  /* istanbul ignore next */
  cov_2gj4nh3o8g().s[20]++;
  (0, _react.useEffect)(() => {
    /* istanbul ignore next */
    cov_2gj4nh3o8g().f[3]++;
    cov_2gj4nh3o8g().s[21]++;
    if (
    /* istanbul ignore next */
    (cov_2gj4nh3o8g().b[3][0]++, !promptCardId) ||
    /* istanbul ignore next */
    (cov_2gj4nh3o8g().b[3][1]++, isNaN(promptCardId))) {
      /* istanbul ignore next */
      cov_2gj4nh3o8g().b[2][0]++;
      cov_2gj4nh3o8g().s[22]++;
      setError("Invalid prompt card ID");
      /* istanbul ignore next */
      cov_2gj4nh3o8g().s[23]++;
      setLoading(false);
      /* istanbul ignore next */
      cov_2gj4nh3o8g().s[24]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_2gj4nh3o8g().b[2][1]++;
    }
    cov_2gj4nh3o8g().s[25]++;
    fetchPromptCard();
  }, [promptCardId]);
  /* istanbul ignore next */
  cov_2gj4nh3o8g().s[26]++;
  const fetchPromptCard = async () => {
    /* istanbul ignore next */
    cov_2gj4nh3o8g().f[4]++;
    cov_2gj4nh3o8g().s[27]++;
    try {
      /* istanbul ignore next */
      cov_2gj4nh3o8g().s[28]++;
      setLoading(true);
      const card =
      /* istanbul ignore next */
      (cov_2gj4nh3o8g().s[29]++, await _api.api.getPromptCard(promptCardId));
      /* istanbul ignore next */
      cov_2gj4nh3o8g().s[30]++;
      setPromptCard(card);
      /* istanbul ignore next */
      cov_2gj4nh3o8g().s[31]++;
      setError(null);
    } catch (err) {
      /* istanbul ignore next */
      cov_2gj4nh3o8g().s[32]++;
      setError(err instanceof Error ?
      /* istanbul ignore next */
      (cov_2gj4nh3o8g().b[4][0]++, err.message) :
      /* istanbul ignore next */
      (cov_2gj4nh3o8g().b[4][1]++, "Failed to fetch prompt card"));
    } finally {
      /* istanbul ignore next */
      cov_2gj4nh3o8g().s[33]++;
      setLoading(false);
    }
  };
  /* istanbul ignore next */
  cov_2gj4nh3o8g().s[34]++;
  const handleTestComplete = execution => {
    /* istanbul ignore next */
    cov_2gj4nh3o8g().f[5]++;
    cov_2gj4nh3o8g().s[35]++;
    setTestExecution(execution);
  };
  /* istanbul ignore next */
  cov_2gj4nh3o8g().s[36]++;
  const handleTestError = errorMessage => {
    /* istanbul ignore next */
    cov_2gj4nh3o8g().f[6]++;
    cov_2gj4nh3o8g().s[37]++;
    setError(errorMessage);
  };
  /* istanbul ignore next */
  cov_2gj4nh3o8g().s[38]++;
  const handleClearResults = () => {
    /* istanbul ignore next */
    cov_2gj4nh3o8g().f[7]++;
    cov_2gj4nh3o8g().s[39]++;
    setTestExecution(null);
  };
  /* istanbul ignore next */
  cov_2gj4nh3o8g().s[40]++;
  if (loading) {
    /* istanbul ignore next */
    cov_2gj4nh3o8g().b[5][0]++;
    cov_2gj4nh3o8g().s[41]++;
    return /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "min-h-screen bg-gray-50",
      children: /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
        className: "container mx-auto px-4 py-8",
        children: /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
          className: "flex justify-center items-center min-h-64",
          children: /*#__PURE__*/(0, _jsxruntime.jsx)(_LoadingSpinner.LoadingSpinner, {})
        })
      })
    });
  } else
  /* istanbul ignore next */
  {
    cov_2gj4nh3o8g().b[5][1]++;
  }
  cov_2gj4nh3o8g().s[42]++;
  if (
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().b[7][0]++, error) ||
  /* istanbul ignore next */
  (cov_2gj4nh3o8g().b[7][1]++, !promptCard)) {
    /* istanbul ignore next */
    cov_2gj4nh3o8g().b[6][0]++;
    cov_2gj4nh3o8g().s[43]++;
    return /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "min-h-screen bg-gray-50",
      children: /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
        className: "container mx-auto px-4 py-8",
        children: /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "bg-red-50 border border-red-200 rounded-md p-6 max-w-2xl mx-auto",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h1", {
            className: "text-lg font-semibold text-red-800 mb-2",
            children: "Error"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
            className: "text-red-700 mb-4",
            children:
            /* istanbul ignore next */
            (cov_2gj4nh3o8g().b[8][0]++, error) ||
            /* istanbul ignore next */
            (cov_2gj4nh3o8g().b[8][1]++, "Prompt card not found")
          }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "flex space-x-3",
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
              onClick: () => {
                /* istanbul ignore next */
                cov_2gj4nh3o8g().f[8]++;
                cov_2gj4nh3o8g().s[44]++;
                return router.back();
              },
              children: "Go Back"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)(_link.default, {
              href: "/prompt-cards",
              children: /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
                variant: "outline",
                children: "View All Cards"
              })
            })]
          })]
        })
      })
    });
  } else
  /* istanbul ignore next */
  {
    cov_2gj4nh3o8g().b[6][1]++;
  }
  cov_2gj4nh3o8g().s[45]++;
  return /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
    className: "min-h-screen bg-gray-50",
    children: /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "container mx-auto px-4 py-8",
      children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "mb-8",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "flex items-center justify-between mb-4",
          children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h1", {
              className: "text-3xl font-bold text-gray-900",
              children: "Test Execution"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
              className: "text-gray-600 mt-2",
              children: "Run and analyze tests for your prompt card"
            })]
          }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "flex space-x-3",
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_link.default, {
              href: `/prompt-cards/${promptCardId}`,
              children: /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
                variant: "outline",
                children: "Edit Card"
              })
            }), /*#__PURE__*/(0, _jsxruntime.jsx)(_link.default, {
              href: "/prompt-cards",
              children: /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
                variant: "outline",
                children: "Back to Cards"
              })
            })]
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "bg-white border border-gray-200 rounded-lg p-6",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
            className: "flex items-start justify-between",
            children: /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
              className: "flex-1",
              children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h2", {
                className: "text-xl font-semibold text-gray-900 mb-2",
                children: promptCard.title
              }),
              /* istanbul ignore next */
              (cov_2gj4nh3o8g().b[9][0]++, promptCard.description) &&
              /* istanbul ignore next */
              (cov_2gj4nh3o8g().b[9][1]++, /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
                className: "text-gray-600 mb-4",
                children: promptCard.description
              })), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                className: "bg-gray-50 rounded-md p-4",
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)("p", {
                  className: "text-sm text-gray-500 mb-2",
                  children: "Prompt Template:"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("pre", {
                  className: "text-sm text-gray-700 whitespace-pre-wrap font-mono",
                  children: promptCard.prompt_template
                })]
              })]
            })
          }),
          /* istanbul ignore next */
          (cov_2gj4nh3o8g().b[10][0]++, promptCard.variables.length > 0) &&
          /* istanbul ignore next */
          (cov_2gj4nh3o8g().b[10][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "mt-4",
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)("p", {
              className: "text-sm text-gray-500 mb-2",
              children: "Variables:"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "flex flex-wrap gap-2",
              children: promptCard.variables.map((variable, index) => {
                /* istanbul ignore next */
                cov_2gj4nh3o8g().f[9]++;
                cov_2gj4nh3o8g().s[46]++;
                return /*#__PURE__*/(0, _jsxruntime.jsx)("span", {
                  className: "px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm",
                  children: variable
                }, index);
              })
            })]
          }))]
        })]
      }),
      /* istanbul ignore next */
      (cov_2gj4nh3o8g().b[11][0]++, error) &&
      /* istanbul ignore next */
      (cov_2gj4nh3o8g().b[11][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "mb-6 bg-red-50 border border-red-200 rounded-md p-4",
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)("p", {
          className: "text-red-800",
          children: error
        }), /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
          variant: "outline",
          size: "sm",
          onClick: () => {
            /* istanbul ignore next */
            cov_2gj4nh3o8g().f[10]++;
            cov_2gj4nh3o8g().s[47]++;
            return setError(null);
          },
          className: "mt-2",
          children: "Dismiss"
        })]
      })), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "grid grid-cols-1 lg:grid-cols-2 gap-8",
        children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
          children: /*#__PURE__*/(0, _jsxruntime.jsx)(_TestRunner.default, {
            promptCardId: promptCardId,
            testCases:
            /* istanbul ignore next */
            (cov_2gj4nh3o8g().b[12][0]++, promptCard.test_cases) ||
            /* istanbul ignore next */
            (cov_2gj4nh3o8g().b[12][1]++, []),
            onTestComplete: handleTestComplete,
            onError: handleTestError
          })
        }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
          children: testExecution ?
          /* istanbul ignore next */
          (/*#__PURE__*/cov_2gj4nh3o8g().b[13][0]++, (0, _jsxruntime.jsx)(_TestResults.default, {
            execution: testExecution,
            onClear: handleClearResults
          })) :
          /* istanbul ignore next */
          (/*#__PURE__*/cov_2gj4nh3o8g().b[13][1]++, (0, _jsxruntime.jsxs)("div", {
            className: "bg-white border border-gray-200 rounded-lg p-6 text-center",
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "text-gray-500 mb-4",
              children: /*#__PURE__*/(0, _jsxruntime.jsx)("svg", {
                className: "mx-auto h-12 w-12",
                fill: "none",
                viewBox: "0 0 24 24",
                stroke: "currentColor",
                children: /*#__PURE__*/(0, _jsxruntime.jsx)("path", {
                  strokeLinecap: "round",
                  strokeLinejoin: "round",
                  strokeWidth: 2,
                  d: "M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"
                })
              })
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("h3", {
              className: "text-lg font-medium text-gray-900 mb-2",
              children: "No Test Results"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
              className: "text-gray-600 mb-4",
              children: "Run tests to see results and analysis here"
            })]
          }))
        })]
      }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
        className: "mt-8 bg-blue-50 border border-blue-200 rounded-lg p-4",
        children: /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "flex items-start",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("div", {
            className: "flex-shrink-0",
            children: /*#__PURE__*/(0, _jsxruntime.jsx)("svg", {
              className: "h-5 w-5 text-blue-400",
              viewBox: "0 0 20 20",
              fill: "currentColor",
              children: /*#__PURE__*/(0, _jsxruntime.jsx)("path", {
                fillRule: "evenodd",
                d: "M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z",
                clipRule: "evenodd"
              })
            })
          }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "ml-3",
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h3", {
              className: "text-sm font-medium text-blue-800",
              children: "Test Execution Tips"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "mt-2 text-sm text-blue-700",
              children: /*#__PURE__*/(0, _jsxruntime.jsxs)("ul", {
                className: "list-disc list-inside space-y-1",
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)("li", {
                  children: "Select specific test cases or run all tests for comprehensive validation"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("li", {
                  children: "Choose the appropriate model for your use case (Llama, Mistral, etc.)"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("li", {
                  children: "Review assertion results to understand why tests pass or fail"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("li", {
                  children: "Use execution metadata to track performance and model behavior"
                })]
              })
            })]
          })]
        })
      })]
    })
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,