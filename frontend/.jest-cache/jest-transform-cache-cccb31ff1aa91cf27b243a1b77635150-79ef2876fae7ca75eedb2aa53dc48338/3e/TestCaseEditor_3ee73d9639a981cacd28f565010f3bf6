0f1463e8e839014c78ba2a084dae418c
"use client";
"use strict";

/* istanbul ignore next */
function cov_ueqhqj0oa() {
  var path = "/workspaces/prompt-card-system/frontend/src/components/TestCase/TestCaseEditor.tsx";
  var hash = "e10858cdcede30aa50d002fdb98cf6de73a39ddf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/workspaces/prompt-card-system/frontend/src/components/TestCase/TestCaseEditor.tsx",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 0
        },
        end: {
          line: 5,
          column: 3
        }
      },
      "1": {
        start: {
          line: 6,
          column: 0
        },
        end: {
          line: 11,
          column: 3
        }
      },
      "2": {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 9,
          column: 30
        }
      },
      "3": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 48
        }
      },
      "4": {
        start: {
          line: 13,
          column: 15
        },
        end: {
          line: 13,
          column: 31
        }
      },
      "5": {
        start: {
          line: 14,
          column: 16
        },
        end: {
          line: 14,
          column: 39
        }
      },
      "6": {
        start: {
          line: 15,
          column: 24
        },
        end: {
          line: 15,
          column: 55
        }
      },
      "7": {
        start: {
          line: 16,
          column: 15
        },
        end: {
          line: 16,
          column: 37
        }
      },
      "8": {
        start: {
          line: 17,
          column: 23
        },
        end: {
          line: 42,
          column: 1
        }
      },
      "9": {
        start: {
          line: 44,
          column: 34
        },
        end: {
          line: 44,
          column: 61
        }
      },
      "10": {
        start: {
          line: 45,
          column: 30
        },
        end: {
          line: 45,
          column: 56
        }
      },
      "11": {
        start: {
          line: 46,
          column: 38
        },
        end: {
          line: 46,
          column: 64
        }
      },
      "12": {
        start: {
          line: 47,
          column: 42
        },
        end: {
          line: 47,
          column: 69
        }
      },
      "13": {
        start: {
          line: 48,
          column: 42
        },
        end: {
          line: 53,
          column: 6
        }
      },
      "14": {
        start: {
          line: 55,
          column: 34
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "15": {
        start: {
          line: 56,
          column: 26
        },
        end: {
          line: 56,
          column: 28
        }
      },
      "16": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 59,
          column: 11
        }
      },
      "17": {
        start: {
          line: 58,
          column: 12
        },
        end: {
          line: 58,
          column: 37
        }
      },
      "18": {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 65,
          column: 11
        }
      },
      "19": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 29
        }
      },
      "20": {
        start: {
          line: 68,
          column: 31
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "21": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 72,
          column: 9
        }
      },
      "22": {
        start: {
          line: 70,
          column: 12
        },
        end: {
          line: 70,
          column: 51
        }
      },
      "23": {
        start: {
          line: 71,
          column: 12
        },
        end: {
          line: 71,
          column: 19
        }
      },
      "24": {
        start: {
          line: 74,
          column: 28
        },
        end: {
          line: 74,
          column: 90
        }
      },
      "25": {
        start: {
          line: 74,
          column: 50
        },
        end: {
          line: 74,
          column: 89
        }
      },
      "26": {
        start: {
          line: 75,
          column: 8
        },
        end: {
          line: 78,
          column: 9
        }
      },
      "27": {
        start: {
          line: 76,
          column: 12
        },
        end: {
          line: 76,
          column: 77
        }
      },
      "28": {
        start: {
          line: 77,
          column: 12
        },
        end: {
          line: 77,
          column: 19
        }
      },
      "29": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 116,
          column: 9
        }
      },
      "30": {
        start: {
          line: 80,
          column: 12
        },
        end: {
          line: 80,
          column: 29
        }
      },
      "31": {
        start: {
          line: 81,
          column: 12
        },
        end: {
          line: 81,
          column: 27
        }
      },
      "32": {
        start: {
          line: 82,
          column: 33
        },
        end: {
          line: 88,
          column: 13
        }
      },
      "33": {
        start: {
          line: 89,
          column: 29
        },
        end: {
          line: 95,
          column: 14
        }
      },
      "34": {
        start: {
          line: 96,
          column: 27
        },
        end: {
          line: 96,
          column: 48
        }
      },
      "35": {
        start: {
          line: 97,
          column: 12
        },
        end: {
          line: 111,
          column: 13
        }
      },
      "36": {
        start: {
          line: 98,
          column: 16
        },
        end: {
          line: 101,
          column: 19
        }
      },
      "37": {
        start: {
          line: 102,
          column: 16
        },
        end: {
          line: 102,
          column: 38
        }
      },
      "38": {
        start: {
          line: 103,
          column: 16
        },
        end: {
          line: 108,
          column: 19
        }
      },
      "39": {
        start: {
          line: 110,
          column: 16
        },
        end: {
          line: 110,
          column: 69
        }
      },
      "40": {
        start: {
          line: 113,
          column: 12
        },
        end: {
          line: 113,
          column: 64
        }
      },
      "41": {
        start: {
          line: 115,
          column: 12
        },
        end: {
          line: 115,
          column: 30
        }
      },
      "42": {
        start: {
          line: 118,
          column: 33
        },
        end: {
          line: 138,
          column: 5
        }
      },
      "43": {
        start: {
          line: 119,
          column: 8
        },
        end: {
          line: 121,
          column: 9
        }
      },
      "44": {
        start: {
          line: 120,
          column: 12
        },
        end: {
          line: 120,
          column: 19
        }
      },
      "45": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 137,
          column: 9
        }
      },
      "46": {
        start: {
          line: 123,
          column: 12
        },
        end: {
          line: 123,
          column: 29
        }
      },
      "47": {
        start: {
          line: 124,
          column: 29
        },
        end: {
          line: 126,
          column: 14
        }
      },
      "48": {
        start: {
          line: 127,
          column: 27
        },
        end: {
          line: 127,
          column: 48
        }
      },
      "49": {
        start: {
          line: 128,
          column: 12
        },
        end: {
          line: 132,
          column: 13
        }
      },
      "50": {
        start: {
          line: 129,
          column: 16
        },
        end: {
          line: 129,
          column: 72
        }
      },
      "51": {
        start: {
          line: 129,
          column: 57
        },
        end: {
          line: 129,
          column: 69
        }
      },
      "52": {
        start: {
          line: 131,
          column: 16
        },
        end: {
          line: 131,
          column: 71
        }
      },
      "53": {
        start: {
          line: 134,
          column: 12
        },
        end: {
          line: 134,
          column: 66
        }
      },
      "54": {
        start: {
          line: 136,
          column: 12
        },
        end: {
          line: 136,
          column: 30
        }
      },
      "55": {
        start: {
          line: 139,
          column: 25
        },
        end: {
          line: 151,
          column: 5
        }
      },
      "56": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 150,
          column: 16
        }
      },
      "57": {
        start: {
          line: 140,
          column: 32
        },
        end: {
          line: 150,
          column: 13
        }
      },
      "58": {
        start: {
          line: 152,
          column: 28
        },
        end: {
          line: 160,
          column: 5
        }
      },
      "59": {
        start: {
          line: 153,
          column: 8
        },
        end: {
          line: 159,
          column: 16
        }
      },
      "60": {
        start: {
          line: 153,
          column: 32
        },
        end: {
          line: 159,
          column: 13
        }
      },
      "61": {
        start: {
          line: 155,
          column: 64
        },
        end: {
          line: 158,
          column: 33
        }
      },
      "62": {
        start: {
          line: 161,
          column: 28
        },
        end: {
          line: 166,
          column: 5
        }
      },
      "63": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 165,
          column: 16
        }
      },
      "64": {
        start: {
          line: 162,
          column: 32
        },
        end: {
          line: 165,
          column: 13
        }
      },
      "65": {
        start: {
          line: 164,
          column: 59
        },
        end: {
          line: 164,
          column: 70
        }
      },
      "66": {
        start: {
          line: 167,
          column: 33
        },
        end: {
          line: 199,
          column: 5
        }
      },
      "67": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 198,
          column: 11
        }
      },
      "68": {
        start: {
          line: 170,
          column: 82
        },
        end: {
          line: 197,
          column: 23
        }
      },
      "69": {
        start: {
          line: 183,
          column: 43
        },
        end: {
          line: 189,
          column: 39
        }
      },
      "70": {
        start: {
          line: 183,
          column: 67
        },
        end: {
          line: 189,
          column: 37
        }
      },
      "71": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 452,
          column: 7
        }
      },
      "72": {
        start: {
          line: 217,
          column: 60
        },
        end: {
          line: 289,
          column: 39
        }
      },
      "73": {
        start: {
          line: 230,
          column: 57
        },
        end: {
          line: 230,
          column: 90
        }
      },
      "74": {
        start: {
          line: 272,
          column: 128
        },
        end: {
          line: 280,
          column: 73
        }
      },
      "75": {
        start: {
          line: 328,
          column: 55
        },
        end: {
          line: 331,
          column: 51
        }
      },
      "76": {
        start: {
          line: 328,
          column: 79
        },
        end: {
          line: 331,
          column: 49
        }
      },
      "77": {
        start: {
          line: 354,
          column: 55
        },
        end: {
          line: 357,
          column: 51
        }
      },
      "78": {
        start: {
          line: 354,
          column: 79
        },
        end: {
          line: 357,
          column: 49
        }
      },
      "79": {
        start: {
          line: 382,
          column: 97
        },
        end: {
          line: 424,
          column: 49
        }
      },
      "80": {
        start: {
          line: 389,
          column: 71
        },
        end: {
          line: 389,
          column: 117
        }
      },
      "81": {
        start: {
          line: 391,
          column: 107
        },
        end: {
          line: 394,
          column: 74
        }
      },
      "82": {
        start: {
          line: 399,
          column: 71
        },
        end: {
          line: 399,
          column: 173
        }
      },
      "83": {
        start: {
          line: 409,
          column: 79
        },
        end: {
          line: 409,
          column: 132
        }
      },
      "84": {
        start: {
          line: 417,
          column: 77
        },
        end: {
          line: 417,
          column: 99
        }
      },
      "85": {
        start: {
          line: 433,
          column: 53
        },
        end: {
          line: 433,
          column: 74
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 8,
            column: 9
          },
          end: {
            line: 8,
            column: 10
          }
        },
        loc: {
          start: {
            line: 8,
            column: 20
          },
          end: {
            line: 10,
            column: 5
          }
        },
        line: 8
      },
      "1": {
        name: "TestCaseEditor",
        decl: {
          start: {
            line: 43,
            column: 9
          },
          end: {
            line: 43,
            column: 23
          }
        },
        loc: {
          start: {
            line: 43,
            column: 83
          },
          end: {
            line: 453,
            column: 1
          }
        },
        line: 43
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 55,
            column: 34
          },
          end: {
            line: 55,
            column: 35
          }
        },
        loc: {
          start: {
            line: 55,
            column: 38
          },
          end: {
            line: 67,
            column: 5
          }
        },
        line: 55
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 57,
            column: 26
          },
          end: {
            line: 57,
            column: 27
          }
        },
        loc: {
          start: {
            line: 57,
            column: 38
          },
          end: {
            line: 59,
            column: 9
          }
        },
        line: 57
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 68,
            column: 31
          },
          end: {
            line: 68,
            column: 32
          }
        },
        loc: {
          start: {
            line: 68,
            column: 41
          },
          end: {
            line: 117,
            column: 5
          }
        },
        line: 68
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 74,
            column: 45
          },
          end: {
            line: 74,
            column: 46
          }
        },
        loc: {
          start: {
            line: 74,
            column: 50
          },
          end: {
            line: 74,
            column: 89
          }
        },
        line: 74
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 118,
            column: 33
          },
          end: {
            line: 118,
            column: 34
          }
        },
        loc: {
          start: {
            line: 118,
            column: 45
          },
          end: {
            line: 138,
            column: 5
          }
        },
        line: 118
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 129,
            column: 51
          },
          end: {
            line: 129,
            column: 52
          }
        },
        loc: {
          start: {
            line: 129,
            column: 57
          },
          end: {
            line: 129,
            column: 69
          }
        },
        line: 129
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 139,
            column: 25
          },
          end: {
            line: 139,
            column: 26
          }
        },
        loc: {
          start: {
            line: 139,
            column: 29
          },
          end: {
            line: 151,
            column: 5
          }
        },
        line: 139
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 140,
            column: 23
          },
          end: {
            line: 140,
            column: 24
          }
        },
        loc: {
          start: {
            line: 140,
            column: 32
          },
          end: {
            line: 150,
            column: 13
          }
        },
        line: 140
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 152,
            column: 28
          },
          end: {
            line: 152,
            column: 29
          }
        },
        loc: {
          start: {
            line: 152,
            column: 51
          },
          end: {
            line: 160,
            column: 5
          }
        },
        line: 152
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 153,
            column: 23
          },
          end: {
            line: 153,
            column: 24
          }
        },
        loc: {
          start: {
            line: 153,
            column: 32
          },
          end: {
            line: 159,
            column: 13
          }
        },
        line: 153
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 155,
            column: 48
          },
          end: {
            line: 155,
            column: 49
          }
        },
        loc: {
          start: {
            line: 155,
            column: 64
          },
          end: {
            line: 158,
            column: 33
          }
        },
        line: 155
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 161,
            column: 28
          },
          end: {
            line: 161,
            column: 29
          }
        },
        loc: {
          start: {
            line: 161,
            column: 37
          },
          end: {
            line: 166,
            column: 5
          }
        },
        line: 161
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 162,
            column: 23
          },
          end: {
            line: 162,
            column: 24
          }
        },
        loc: {
          start: {
            line: 162,
            column: 32
          },
          end: {
            line: 165,
            column: 13
          }
        },
        line: 162
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 164,
            column: 51
          },
          end: {
            line: 164,
            column: 52
          }
        },
        loc: {
          start: {
            line: 164,
            column: 59
          },
          end: {
            line: 164,
            column: 70
          }
        },
        line: 164
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 167,
            column: 33
          },
          end: {
            line: 167,
            column: 34
          }
        },
        loc: {
          start: {
            line: 167,
            column: 65
          },
          end: {
            line: 199,
            column: 5
          }
        },
        line: 167
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 170,
            column: 52
          },
          end: {
            line: 170,
            column: 53
          }
        },
        loc: {
          start: {
            line: 170,
            column: 82
          },
          end: {
            line: 197,
            column: 23
          }
        },
        line: 170
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 183,
            column: 38
          },
          end: {
            line: 183,
            column: 39
          }
        },
        loc: {
          start: {
            line: 183,
            column: 43
          },
          end: {
            line: 189,
            column: 39
          }
        },
        line: 183
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 183,
            column: 58
          },
          end: {
            line: 183,
            column: 59
          }
        },
        loc: {
          start: {
            line: 183,
            column: 67
          },
          end: {
            line: 189,
            column: 37
          }
        },
        line: 183
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 217,
            column: 34
          },
          end: {
            line: 217,
            column: 35
          }
        },
        loc: {
          start: {
            line: 217,
            column: 60
          },
          end: {
            line: 289,
            column: 39
          }
        },
        line: 217
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 230,
            column: 53
          },
          end: {
            line: 230,
            column: 54
          }
        },
        loc: {
          start: {
            line: 230,
            column: 57
          },
          end: {
            line: 230,
            column: 90
          }
        },
        line: 230
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 272,
            column: 94
          },
          end: {
            line: 272,
            column: 95
          }
        },
        loc: {
          start: {
            line: 272,
            column: 128
          },
          end: {
            line: 280,
            column: 73
          }
        },
        line: 272
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 328,
            column: 50
          },
          end: {
            line: 328,
            column: 51
          }
        },
        loc: {
          start: {
            line: 328,
            column: 55
          },
          end: {
            line: 331,
            column: 51
          }
        },
        line: 328
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 328,
            column: 70
          },
          end: {
            line: 328,
            column: 71
          }
        },
        loc: {
          start: {
            line: 328,
            column: 79
          },
          end: {
            line: 331,
            column: 49
          }
        },
        line: 328
      },
      "25": {
        name: "(anonymous_25)",
        decl: {
          start: {
            line: 354,
            column: 50
          },
          end: {
            line: 354,
            column: 51
          }
        },
        loc: {
          start: {
            line: 354,
            column: 55
          },
          end: {
            line: 357,
            column: 51
          }
        },
        line: 354
      },
      "26": {
        name: "(anonymous_26)",
        decl: {
          start: {
            line: 354,
            column: 70
          },
          end: {
            line: 354,
            column: 71
          }
        },
        loc: {
          start: {
            line: 354,
            column: 79
          },
          end: {
            line: 357,
            column: 49
          }
        },
        line: 354
      },
      "27": {
        name: "(anonymous_27)",
        decl: {
          start: {
            line: 382,
            column: 63
          },
          end: {
            line: 382,
            column: 64
          }
        },
        loc: {
          start: {
            line: 382,
            column: 97
          },
          end: {
            line: 424,
            column: 49
          }
        },
        line: 382
      },
      "28": {
        name: "(anonymous_28)",
        decl: {
          start: {
            line: 389,
            column: 66
          },
          end: {
            line: 389,
            column: 67
          }
        },
        loc: {
          start: {
            line: 389,
            column: 71
          },
          end: {
            line: 389,
            column: 117
          }
        },
        line: 389
      },
      "29": {
        name: "(anonymous_29)",
        decl: {
          start: {
            line: 391,
            column: 85
          },
          end: {
            line: 391,
            column: 86
          }
        },
        loc: {
          start: {
            line: 391,
            column: 107
          },
          end: {
            line: 394,
            column: 74
          }
        },
        line: 391
      },
      "30": {
        name: "(anonymous_30)",
        decl: {
          start: {
            line: 399,
            column: 66
          },
          end: {
            line: 399,
            column: 67
          }
        },
        loc: {
          start: {
            line: 399,
            column: 71
          },
          end: {
            line: 399,
            column: 173
          }
        },
        line: 399
      },
      "31": {
        name: "(anonymous_31)",
        decl: {
          start: {
            line: 409,
            column: 74
          },
          end: {
            line: 409,
            column: 75
          }
        },
        loc: {
          start: {
            line: 409,
            column: 79
          },
          end: {
            line: 409,
            column: 132
          }
        },
        line: 409
      },
      "32": {
        name: "(anonymous_32)",
        decl: {
          start: {
            line: 417,
            column: 73
          },
          end: {
            line: 417,
            column: 74
          }
        },
        loc: {
          start: {
            line: 417,
            column: 77
          },
          end: {
            line: 417,
            column: 99
          }
        },
        line: 417
      },
      "33": {
        name: "(anonymous_33)",
        decl: {
          start: {
            line: 433,
            column: 49
          },
          end: {
            line: 433,
            column: 50
          }
        },
        loc: {
          start: {
            line: 433,
            column: 53
          },
          end: {
            line: 433,
            column: 74
          }
        },
        line: 433
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 8
          },
          end: {
            line: 72,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 69
      },
      "1": {
        loc: {
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 75,
            column: 8
          },
          end: {
            line: 78,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 75
      },
      "2": {
        loc: {
          start: {
            line: 86,
            column: 33
          },
          end: {
            line: 86,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 86,
            column: 33
          },
          end: {
            line: 86,
            column: 60
          }
        }, {
          start: {
            line: 86,
            column: 64
          },
          end: {
            line: 86,
            column: 73
          }
        }],
        line: 86
      },
      "3": {
        loc: {
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 97,
            column: 12
          },
          end: {
            line: 111,
            column: 13
          }
        }, {
          start: {
            line: 109,
            column: 19
          },
          end: {
            line: 111,
            column: 13
          }
        }],
        line: 97
      },
      "4": {
        loc: {
          start: {
            line: 110,
            column: 25
          },
          end: {
            line: 110,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 110,
            column: 25
          },
          end: {
            line: 110,
            column: 37
          }
        }, {
          start: {
            line: 110,
            column: 41
          },
          end: {
            line: 110,
            column: 67
          }
        }],
        line: 110
      },
      "5": {
        loc: {
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 8
          },
          end: {
            line: 121,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "6": {
        loc: {
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 12
          },
          end: {
            line: 132,
            column: 13
          }
        }, {
          start: {
            line: 130,
            column: 19
          },
          end: {
            line: 132,
            column: 13
          }
        }],
        line: 128
      },
      "7": {
        loc: {
          start: {
            line: 131,
            column: 25
          },
          end: {
            line: 131,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 25
          },
          end: {
            line: 131,
            column: 37
          }
        }, {
          start: {
            line: 131,
            column: 41
          },
          end: {
            line: 131,
            column: 69
          }
        }],
        line: 131
      },
      "8": {
        loc: {
          start: {
            line: 155,
            column: 64
          },
          end: {
            line: 158,
            column: 33
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 155,
            column: 78
          },
          end: {
            line: 158,
            column: 21
          }
        }, {
          start: {
            line: 158,
            column: 24
          },
          end: {
            line: 158,
            column: 33
          }
        }],
        line: 155
      },
      "9": {
        loc: {
          start: {
            line: 167,
            column: 45
          },
          end: {
            line: 167,
            column: 62
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 167,
            column: 57
          },
          end: {
            line: 167,
            column: 62
          }
        }],
        line: 167
      },
      "10": {
        loc: {
          start: {
            line: 180,
            column: 24
          },
          end: {
            line: 195,
            column: 26
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 180,
            column: 50
          },
          end: {
            line: 192,
            column: 26
          }
        }, {
          start: {
            line: 192,
            column: 43
          },
          end: {
            line: 195,
            column: 26
          }
        }],
        line: 180
      },
      "11": {
        loc: {
          start: {
            line: 182,
            column: 35
          },
          end: {
            line: 182,
            column: 73
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 182,
            column: 35
          },
          end: {
            line: 182,
            column: 67
          }
        }, {
          start: {
            line: 182,
            column: 71
          },
          end: {
            line: 182,
            column: 73
          }
        }],
        line: 182
      },
      "12": {
        loc: {
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 209,
            column: 14
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 203,
            column: 12
          },
          end: {
            line: 203,
            column: 17
          }
        }, {
          start: {
            line: 203,
            column: 35
          },
          end: {
            line: 209,
            column: 14
          }
        }],
        line: 203
      },
      "13": {
        loc: {
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 291,
            column: 14
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 210,
            column: 12
          },
          end: {
            line: 210,
            column: 32
          }
        }, {
          start: {
            line: 210,
            column: 50
          },
          end: {
            line: 291,
            column: 14
          }
        }],
        line: 210
      },
      "14": {
        loc: {
          start: {
            line: 251,
            column: 48
          },
          end: {
            line: 263,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 251,
            column: 48
          },
          end: {
            line: 251,
            column: 72
          }
        }, {
          start: {
            line: 251,
            column: 90
          },
          end: {
            line: 263,
            column: 50
          }
        }],
        line: 251
      },
      "15": {
        loc: {
          start: {
            line: 264,
            column: 48
          },
          end: {
            line: 283,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 48
          },
          end: {
            line: 264,
            column: 78
          }
        }, {
          start: {
            line: 264,
            column: 96
          },
          end: {
            line: 283,
            column: 50
          }
        }],
        line: 264
      },
      "16": {
        loc: {
          start: {
            line: 292,
            column: 12
          },
          end: {
            line: 450,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 292,
            column: 41
          },
          end: {
            line: 309,
            column: 14
          }
        }, {
          start: {
            line: 309,
            column: 31
          },
          end: {
            line: 450,
            column: 14
          }
        }],
        line: 292
      },
      "17": {
        loc: {
          start: {
            line: 297,
            column: 34
          },
          end: {
            line: 297,
            column: 128
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 297,
            column: 59
          },
          end: {
            line: 297,
            column: 79
          }
        }, {
          start: {
            line: 297,
            column: 82
          },
          end: {
            line: 297,
            column: 128
          }
        }],
        line: 297
      },
      "18": {
        loc: {
          start: {
            line: 304,
            column: 20
          },
          end: {
            line: 307,
            column: 22
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 304,
            column: 20
          },
          end: {
            line: 304,
            column: 42
          }
        }, {
          start: {
            line: 304,
            column: 60
          },
          end: {
            line: 307,
            column: 22
          }
        }],
        line: 304
      },
      "19": {
        loc: {
          start: {
            line: 397,
            column: 62
          },
          end: {
            line: 397,
            column: 109
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 397,
            column: 92
          },
          end: {
            line: 397,
            column: 100
          }
        }, {
          start: {
            line: 397,
            column: 103
          },
          end: {
            line: 397,
            column: 109
          }
        }],
        line: 397
      },
      "20": {
        loc: {
          start: {
            line: 399,
            column: 103
          },
          end: {
            line: 399,
            column: 172
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 399,
            column: 133
          },
          end: {
            line: 399,
            column: 155
          }
        }, {
          start: {
            line: 399,
            column: 158
          },
          end: {
            line: 399,
            column: 172
          }
        }],
        line: 399
      },
      "21": {
        loc: {
          start: {
            line: 408,
            column: 71
          },
          end: {
            line: 408,
            column: 98
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 408,
            column: 71
          },
          end: {
            line: 408,
            column: 92
          }
        }, {
          start: {
            line: 408,
            column: 96
          },
          end: {
            line: 408,
            column: 98
          }
        }],
        line: 408
      },
      "22": {
        loc: {
          start: {
            line: 441,
            column: 50
          },
          end: {
            line: 443,
            column: 61
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 441,
            column: 74
          },
          end: {
            line: 443,
            column: 42
          }
        }, {
          start: {
            line: 443,
            column: 45
          },
          end: {
            line: 443,
            column: 61
          }
        }],
        line: 441
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0]
    },
    inputSourceMap: {
      version: 3,
      sources: ["/workspaces/prompt-card-system/frontend/src/components/TestCase/TestCaseEditor.tsx"],
      sourcesContent: ["'use client';\n\nimport { useState } from 'react';\nimport { TestCase, CreateTestCaseRequest, AssertionType } from '@/types';\nimport { Button } from '@/components/ui/Button';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { Badge } from '@/components/ui/Badge';\n\ninterface TestCaseEditorProps {\n  promptCardId: number;\n  testCases: TestCase[];\n  variables: string[];\n  onTestCasesChange: (testCases: TestCase[]) => void;\n}\n\ninterface NewTestCase {\n  name: string;\n  input_variables: Record<string, string>;\n  expected_output: string;\n  assertions: AssertionType[];\n}\n\nconst assertionTypes = [\n  { value: 'contains', label: 'Contains' },\n  { value: 'not-contains', label: 'Does not contain' },\n  { value: 'equals', label: 'Equals' },\n  { value: 'not-equals', label: 'Does not equal' },\n  { value: 'regex', label: 'Matches regex' },\n  { value: 'length', label: 'Length' }\n];\n\nexport default function TestCaseEditor({ promptCardId, testCases, variables, onTestCasesChange }: TestCaseEditorProps) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [editingId, setEditingId] = useState<number | null>(null);\n  const [showAddForm, setShowAddForm] = useState(false);\n  const [newTestCase, setNewTestCase] = useState<NewTestCase>({\n    name: '',\n    input_variables: {},\n    expected_output: '',\n    assertions: []\n  });\n\n  // Initialize input variables for new test case\n  const initializeNewTestCase = () => {\n    const inputVars: Record<string, string> = {};\n    variables.forEach(variable => {\n      inputVars[variable] = '';\n    });\n    \n    setNewTestCase({\n      name: '',\n      input_variables: inputVars,\n      expected_output: '',\n      assertions: []\n    });\n    setShowAddForm(true);\n  };\n\n  const handleSaveTestCase = async () => {\n    if (!newTestCase.name.trim()) {\n      setError('Test case name is required');\n      return;\n    }\n\n    // Check if all variables have values\n    const missingVars = variables.filter(v => !newTestCase.input_variables[v]?.trim());\n    if (missingVars.length > 0) {\n      setError(`Please provide values for: ${missingVars.join(', ')}`);\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n\n      const testCaseData: CreateTestCaseRequest = {\n        prompt_card_id: promptCardId,\n        name: newTestCase.name,\n        input_variables: newTestCase.input_variables,\n        expected_output: newTestCase.expected_output || undefined,\n        assertions: newTestCase.assertions\n      };\n\n      const response = await fetch('/api/test-cases', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(testCaseData)\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        onTestCasesChange([...testCases, result.data]);\n        setShowAddForm(false);\n        setNewTestCase({\n          name: '',\n          input_variables: {},\n          expected_output: '',\n          assertions: []\n        });\n      } else {\n        setError(result.error || 'Failed to save test case');\n      }\n    } catch (err) {\n      setError('Network error: Failed to save test case');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteTestCase = async (id: number) => {\n    if (!confirm('Are you sure you want to delete this test case?')) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const response = await fetch(`/api/test-cases/${id}`, {\n        method: 'DELETE'\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        onTestCasesChange(testCases.filter(tc => tc.id !== id));\n      } else {\n        setError(result.error || 'Failed to delete test case');\n      }\n    } catch (err) {\n      setError('Network error: Failed to delete test case');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addAssertion = () => {\n    setNewTestCase(prev => ({\n      ...prev,\n      assertions: [\n        ...prev.assertions,\n        { type: 'contains' as const, value: '', description: '' }\n      ]\n    }));\n  };\n\n  const updateAssertion = (index: number, field: keyof AssertionType, value: string | number) => {\n    setNewTestCase(prev => ({\n      ...prev,\n      assertions: prev.assertions.map((assertion, i) => \n        i === index ? { ...assertion, [field]: value } : assertion\n      )\n    }));\n  };\n\n  const removeAssertion = (index: number) => {\n    setNewTestCase(prev => ({\n      ...prev,\n      assertions: prev.assertions.filter((_, i) => i !== index)\n    }));\n  };\n\n  const renderInputVariables = (inputVars: Record<string, any>, isEditing: boolean = false) => {\n    return (\n      <div className=\"space-y-2\">\n        {Object.entries(inputVars).map(([key, value]) => (\n          <div key={key} className=\"flex items-center space-x-2\">\n            <span className=\"text-sm font-medium text-gray-700 w-24\">{key}:</span>\n            {isEditing ? (\n              <input\n                type=\"text\"\n                value={newTestCase.input_variables[key] || ''}\n                onChange={(e) => setNewTestCase(prev => ({\n                  ...prev,\n                  input_variables: { ...prev.input_variables, [key]: e.target.value }\n                }))}\n                className=\"flex-1 px-2 py-1 border border-gray-300 rounded text-sm\"\n                placeholder={`Enter value for ${key}`}\n              />\n            ) : (\n              <span className=\"text-sm text-gray-600 bg-gray-50 px-2 py-1 rounded font-mono\">\n                {value}\n              </span>\n            )}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n          <p className=\"text-red-800\">{error}</p>\n        </div>\n      )}\n\n      {/* Existing Test Cases */}\n      {testCases.length > 0 && (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-md font-medium text-gray-900\">Existing Test Cases</h3>\n          {testCases.map((testCase) => (\n            <div key={testCase.id} className=\"border border-gray-200 rounded-lg p-4\">\n              <div className=\"flex justify-between items-start mb-3\">\n                <h4 className=\"font-medium text-gray-900\">{testCase.name}</h4>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={() => handleDeleteTestCase(testCase.id)}\n                  disabled={loading}\n                  className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                >\n                  Delete\n                </Button>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Input Variables:</h5>\n                  {renderInputVariables(testCase.input_variables)}\n                </div>\n\n                <div>\n                  {testCase.expected_output && (\n                    <div className=\"mb-3\">\n                      <h5 className=\"text-sm font-medium text-gray-700 mb-1\">Expected Output:</h5>\n                      <p className=\"text-sm text-gray-600 bg-gray-50 p-2 rounded\">\n                        {testCase.expected_output}\n                      </p>\n                    </div>\n                  )}\n\n                  {testCase.assertions.length > 0 && (\n                    <div>\n                      <h5 className=\"text-sm font-medium text-gray-700 mb-2\">Assertions:</h5>\n                      <div className=\"space-y-1\">\n                        {testCase.assertions.map((assertion, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"mr-2\">\n                            {assertion.type}: {assertion.value}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Add New Test Case */}\n      {!showAddForm ? (\n        <div className=\"text-center py-8 border-2 border-dashed border-gray-300 rounded-lg\">\n          <p className=\"text-gray-500 mb-4\">\n            {testCases.length === 0 ? 'No test cases yet.' : 'Add more test cases to validate your prompt.'}\n          </p>\n          <Button onClick={initializeNewTestCase} disabled={variables.length === 0}>\n            Add Test Case\n          </Button>\n          {variables.length === 0 && (\n            <p className=\"text-sm text-gray-400 mt-2\">\n              Add variables to your prompt template first\n            </p>\n          )}\n        </div>\n      ) : (\n        <div className=\"border border-gray-200 rounded-lg p-6 bg-gray-50\">\n          <h3 className=\"text-md font-medium text-gray-900 mb-4\">Add New Test Case</h3>\n          \n          <div className=\"space-y-4\">\n            {/* Test Case Name */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Test Case Name *\n              </label>\n              <input\n                type=\"text\"\n                value={newTestCase.name}\n                onChange={(e) => setNewTestCase(prev => ({ ...prev, name: e.target.value }))}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Describe what this test case validates\"\n              />\n            </div>\n\n            {/* Input Variables */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Input Variables *\n              </label>\n              {renderInputVariables(newTestCase.input_variables, true)}\n            </div>\n\n            {/* Expected Output */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Expected Output (optional)\n              </label>\n              <textarea\n                value={newTestCase.expected_output}\n                onChange={(e) => setNewTestCase(prev => ({ ...prev, expected_output: e.target.value }))}\n                rows={3}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"Describe what the expected output should contain\"\n              />\n            </div>\n\n            {/* Assertions */}\n            <div>\n              <div className=\"flex justify-between items-center mb-2\">\n                <label className=\"block text-sm font-medium text-gray-700\">\n                  Assertions (optional)\n                </label>\n                <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addAssertion}>\n                  Add Assertion\n                </Button>\n              </div>\n              \n              {newTestCase.assertions.map((assertion, index) => (\n                <div key={index} className=\"border border-gray-200 rounded p-3 mb-2 bg-white\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2\">\n                    <select\n                      value={assertion.type}\n                      onChange={(e) => updateAssertion(index, 'type', e.target.value)}\n                      className=\"px-2 py-1 border border-gray-300 rounded text-sm\"\n                    >\n                      {assertionTypes.map(type => (\n                        <option key={type.value} value={type.value}>\n                          {type.label}\n                        </option>\n                      ))}\n                    </select>\n                    \n                    <input\n                      type={assertion.type === 'length' ? 'number' : 'text'}\n                      value={assertion.value}\n                      onChange={(e) => updateAssertion(index, 'value', \n                        assertion.type === 'length' ? Number(e.target.value) : e.target.value\n                      )}\n                      placeholder=\"Assertion value\"\n                      className=\"px-2 py-1 border border-gray-300 rounded text-sm\"\n                    />\n                    \n                    <div className=\"flex space-x-1\">\n                      <input\n                        type=\"text\"\n                        value={assertion.description || ''}\n                        onChange={(e) => updateAssertion(index, 'description', e.target.value)}\n                        placeholder=\"Description (optional)\"\n                        className=\"flex-1 px-2 py-1 border border-gray-300 rounded text-sm\"\n                      />\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={() => removeAssertion(index)}\n                      >\n                        \xD7\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Actions */}\n            <div className=\"flex justify-end space-x-2 pt-4 border-t border-gray-200\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => setShowAddForm(false)}\n                disabled={loading}\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"button\" \n                onClick={handleSaveTestCase}\n                disabled={loading}\n              >\n                {loading ? <LoadingSpinner size=\"sm\" /> : 'Save Test Case'}\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}"],
      names: ["TestCaseEditor", "assertionTypes", "value", "label", "promptCardId", "testCases", "variables", "onTestCasesChange", "loading", "setLoading", "useState", "error", "setError", "editingId", "setEditingId", "showAddForm", "setShowAddForm", "newTestCase", "setNewTestCase", "name", "input_variables", "expected_output", "assertions", "initializeNewTestCase", "inputVars", "forEach", "variable", "handleSaveTestCase", "trim", "missingVars", "filter", "v", "length", "join", "testCaseData", "prompt_card_id", "undefined", "response", "fetch", "method", "headers", "body", "JSON", "stringify", "result", "json", "success", "data", "err", "handleDeleteTestCase", "id", "confirm", "tc", "addAssertion", "prev", "type", "description", "updateAssertion", "index", "field", "map", "assertion", "i", "removeAssertion", "_", "renderInputVariables", "isEditing", "div", "className", "Object", "entries", "key", "span", "input", "onChange", "e", "target", "placeholder", "p", "h3", "testCase", "h4", "Button", "variant", "size", "onClick", "disabled", "h5", "Badge", "textarea", "rows", "select", "option", "Number", "LoadingSpinner"],
      mappings: "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"
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e10858cdcede30aa50d002fdb98cf6de73a39ddf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_ueqhqj0oa = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_ueqhqj0oa();
cov_ueqhqj0oa().s[0]++;
Object.defineProperty(exports, "__esModule", {
  value: true
});
/* istanbul ignore next */
cov_ueqhqj0oa().s[1]++;
Object.defineProperty(exports, "default", {
  enumerable: true,
  get: function () {
    /* istanbul ignore next */
    cov_ueqhqj0oa().f[0]++;
    cov_ueqhqj0oa().s[2]++;
    return TestCaseEditor;
  }
});
const _jsxruntime =
/* istanbul ignore next */
(cov_ueqhqj0oa().s[3]++, require("react/jsx-runtime"));
const _react =
/* istanbul ignore next */
(cov_ueqhqj0oa().s[4]++, require("react"));
const _Button =
/* istanbul ignore next */
(cov_ueqhqj0oa().s[5]++, require("../ui/Button"));
const _LoadingSpinner =
/* istanbul ignore next */
(cov_ueqhqj0oa().s[6]++, require("../ui/LoadingSpinner"));
const _Badge =
/* istanbul ignore next */
(cov_ueqhqj0oa().s[7]++, require("../ui/Badge"));
const assertionTypes =
/* istanbul ignore next */
(cov_ueqhqj0oa().s[8]++, [{
  value: "contains",
  label: "Contains"
}, {
  value: "not-contains",
  label: "Does not contain"
}, {
  value: "equals",
  label: "Equals"
}, {
  value: "not-equals",
  label: "Does not equal"
}, {
  value: "regex",
  label: "Matches regex"
}, {
  value: "length",
  label: "Length"
}]);
function TestCaseEditor({
  promptCardId,
  testCases,
  variables,
  onTestCasesChange
}) {
  /* istanbul ignore next */
  cov_ueqhqj0oa().f[1]++;
  const [loading, setLoading] =
  /* istanbul ignore next */
  (cov_ueqhqj0oa().s[9]++, (0, _react.useState)(false));
  const [error, setError] =
  /* istanbul ignore next */
  (cov_ueqhqj0oa().s[10]++, (0, _react.useState)(null));
  const [editingId, setEditingId] =
  /* istanbul ignore next */
  (cov_ueqhqj0oa().s[11]++, (0, _react.useState)(null));
  const [showAddForm, setShowAddForm] =
  /* istanbul ignore next */
  (cov_ueqhqj0oa().s[12]++, (0, _react.useState)(false));
  const [newTestCase, setNewTestCase] =
  /* istanbul ignore next */
  (cov_ueqhqj0oa().s[13]++, (0, _react.useState)({
    name: "",
    input_variables: {},
    expected_output: "",
    assertions: []
  }));
  // Initialize input variables for new test case
  /* istanbul ignore next */
  cov_ueqhqj0oa().s[14]++;
  const initializeNewTestCase = () => {
    /* istanbul ignore next */
    cov_ueqhqj0oa().f[2]++;
    const inputVars =
    /* istanbul ignore next */
    (cov_ueqhqj0oa().s[15]++, {});
    /* istanbul ignore next */
    cov_ueqhqj0oa().s[16]++;
    variables.forEach(variable => {
      /* istanbul ignore next */
      cov_ueqhqj0oa().f[3]++;
      cov_ueqhqj0oa().s[17]++;
      inputVars[variable] = "";
    });
    /* istanbul ignore next */
    cov_ueqhqj0oa().s[18]++;
    setNewTestCase({
      name: "",
      input_variables: inputVars,
      expected_output: "",
      assertions: []
    });
    /* istanbul ignore next */
    cov_ueqhqj0oa().s[19]++;
    setShowAddForm(true);
  };
  /* istanbul ignore next */
  cov_ueqhqj0oa().s[20]++;
  const handleSaveTestCase = async () => {
    /* istanbul ignore next */
    cov_ueqhqj0oa().f[4]++;
    cov_ueqhqj0oa().s[21]++;
    if (!newTestCase.name.trim()) {
      /* istanbul ignore next */
      cov_ueqhqj0oa().b[0][0]++;
      cov_ueqhqj0oa().s[22]++;
      setError("Test case name is required");
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[23]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ueqhqj0oa().b[0][1]++;
    }
    // Check if all variables have values
    const missingVars =
    /* istanbul ignore next */
    (cov_ueqhqj0oa().s[24]++, variables.filter(v => {
      /* istanbul ignore next */
      cov_ueqhqj0oa().f[5]++;
      cov_ueqhqj0oa().s[25]++;
      return !newTestCase.input_variables[v]?.trim();
    }));
    /* istanbul ignore next */
    cov_ueqhqj0oa().s[26]++;
    if (missingVars.length > 0) {
      /* istanbul ignore next */
      cov_ueqhqj0oa().b[1][0]++;
      cov_ueqhqj0oa().s[27]++;
      setError(`Please provide values for: ${missingVars.join(", ")}`);
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[28]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ueqhqj0oa().b[1][1]++;
    }
    cov_ueqhqj0oa().s[29]++;
    try {
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[30]++;
      setLoading(true);
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[31]++;
      setError(null);
      const testCaseData =
      /* istanbul ignore next */
      (cov_ueqhqj0oa().s[32]++, {
        prompt_card_id: promptCardId,
        name: newTestCase.name,
        input_variables: newTestCase.input_variables,
        expected_output:
        /* istanbul ignore next */
        (cov_ueqhqj0oa().b[2][0]++, newTestCase.expected_output) ||
        /* istanbul ignore next */
        (cov_ueqhqj0oa().b[2][1]++, undefined),
        assertions: newTestCase.assertions
      });
      const response =
      /* istanbul ignore next */
      (cov_ueqhqj0oa().s[33]++, await fetch("/api/test-cases", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(testCaseData)
      }));
      const result =
      /* istanbul ignore next */
      (cov_ueqhqj0oa().s[34]++, await response.json());
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[35]++;
      if (result.success) {
        /* istanbul ignore next */
        cov_ueqhqj0oa().b[3][0]++;
        cov_ueqhqj0oa().s[36]++;
        onTestCasesChange([...testCases, result.data]);
        /* istanbul ignore next */
        cov_ueqhqj0oa().s[37]++;
        setShowAddForm(false);
        /* istanbul ignore next */
        cov_ueqhqj0oa().s[38]++;
        setNewTestCase({
          name: "",
          input_variables: {},
          expected_output: "",
          assertions: []
        });
      } else {
        /* istanbul ignore next */
        cov_ueqhqj0oa().b[3][1]++;
        cov_ueqhqj0oa().s[39]++;
        setError(
        /* istanbul ignore next */
        (cov_ueqhqj0oa().b[4][0]++, result.error) ||
        /* istanbul ignore next */
        (cov_ueqhqj0oa().b[4][1]++, "Failed to save test case"));
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[40]++;
      setError("Network error: Failed to save test case");
    } finally {
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[41]++;
      setLoading(false);
    }
  };
  /* istanbul ignore next */
  cov_ueqhqj0oa().s[42]++;
  const handleDeleteTestCase = async id => {
    /* istanbul ignore next */
    cov_ueqhqj0oa().f[6]++;
    cov_ueqhqj0oa().s[43]++;
    if (!confirm("Are you sure you want to delete this test case?")) {
      /* istanbul ignore next */
      cov_ueqhqj0oa().b[5][0]++;
      cov_ueqhqj0oa().s[44]++;
      return;
    } else
    /* istanbul ignore next */
    {
      cov_ueqhqj0oa().b[5][1]++;
    }
    cov_ueqhqj0oa().s[45]++;
    try {
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[46]++;
      setLoading(true);
      const response =
      /* istanbul ignore next */
      (cov_ueqhqj0oa().s[47]++, await fetch(`/api/test-cases/${id}`, {
        method: "DELETE"
      }));
      const result =
      /* istanbul ignore next */
      (cov_ueqhqj0oa().s[48]++, await response.json());
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[49]++;
      if (result.success) {
        /* istanbul ignore next */
        cov_ueqhqj0oa().b[6][0]++;
        cov_ueqhqj0oa().s[50]++;
        onTestCasesChange(testCases.filter(tc => {
          /* istanbul ignore next */
          cov_ueqhqj0oa().f[7]++;
          cov_ueqhqj0oa().s[51]++;
          return tc.id !== id;
        }));
      } else {
        /* istanbul ignore next */
        cov_ueqhqj0oa().b[6][1]++;
        cov_ueqhqj0oa().s[52]++;
        setError(
        /* istanbul ignore next */
        (cov_ueqhqj0oa().b[7][0]++, result.error) ||
        /* istanbul ignore next */
        (cov_ueqhqj0oa().b[7][1]++, "Failed to delete test case"));
      }
    } catch (err) {
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[53]++;
      setError("Network error: Failed to delete test case");
    } finally {
      /* istanbul ignore next */
      cov_ueqhqj0oa().s[54]++;
      setLoading(false);
    }
  };
  /* istanbul ignore next */
  cov_ueqhqj0oa().s[55]++;
  const addAssertion = () => {
    /* istanbul ignore next */
    cov_ueqhqj0oa().f[8]++;
    cov_ueqhqj0oa().s[56]++;
    setNewTestCase(prev => {
      /* istanbul ignore next */
      cov_ueqhqj0oa().f[9]++;
      cov_ueqhqj0oa().s[57]++;
      return {
        ...prev,
        assertions: [...prev.assertions, {
          type: "contains",
          value: "",
          description: ""
        }]
      };
    });
  };
  /* istanbul ignore next */
  cov_ueqhqj0oa().s[58]++;
  const updateAssertion = (index, field, value) => {
    /* istanbul ignore next */
    cov_ueqhqj0oa().f[10]++;
    cov_ueqhqj0oa().s[59]++;
    setNewTestCase(prev => {
      /* istanbul ignore next */
      cov_ueqhqj0oa().f[11]++;
      cov_ueqhqj0oa().s[60]++;
      return {
        ...prev,
        assertions: prev.assertions.map((assertion, i) => {
          /* istanbul ignore next */
          cov_ueqhqj0oa().f[12]++;
          cov_ueqhqj0oa().s[61]++;
          return i === index ?
          /* istanbul ignore next */
          (cov_ueqhqj0oa().b[8][0]++, {
            ...assertion,
            [field]: value
          }) :
          /* istanbul ignore next */
          (cov_ueqhqj0oa().b[8][1]++, assertion);
        })
      };
    });
  };
  /* istanbul ignore next */
  cov_ueqhqj0oa().s[62]++;
  const removeAssertion = index => {
    /* istanbul ignore next */
    cov_ueqhqj0oa().f[13]++;
    cov_ueqhqj0oa().s[63]++;
    setNewTestCase(prev => {
      /* istanbul ignore next */
      cov_ueqhqj0oa().f[14]++;
      cov_ueqhqj0oa().s[64]++;
      return {
        ...prev,
        assertions: prev.assertions.filter((_, i) => {
          /* istanbul ignore next */
          cov_ueqhqj0oa().f[15]++;
          cov_ueqhqj0oa().s[65]++;
          return i !== index;
        })
      };
    });
  };
  /* istanbul ignore next */
  cov_ueqhqj0oa().s[66]++;
  const renderInputVariables = (inputVars, isEditing =
  /* istanbul ignore next */
  (cov_ueqhqj0oa().b[9][0]++, false)) => {
    /* istanbul ignore next */
    cov_ueqhqj0oa().f[16]++;
    cov_ueqhqj0oa().s[67]++;
    return /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "space-y-2",
      children: Object.entries(inputVars).map(([key, value]) => {
        /* istanbul ignore next */
        cov_ueqhqj0oa().f[17]++;
        cov_ueqhqj0oa().s[68]++;
        return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "flex items-center space-x-2",
          children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("span", {
            className: "text-sm font-medium text-gray-700 w-24",
            children: [key, ":"]
          }), isEditing ?
          /* istanbul ignore next */
          (/*#__PURE__*/cov_ueqhqj0oa().b[10][0]++, (0, _jsxruntime.jsx)("input", {
            type: "text",
            value:
            /* istanbul ignore next */
            (cov_ueqhqj0oa().b[11][0]++, newTestCase.input_variables[key]) ||
            /* istanbul ignore next */
            (cov_ueqhqj0oa().b[11][1]++, ""),
            onChange: e => {
              /* istanbul ignore next */
              cov_ueqhqj0oa().f[18]++;
              cov_ueqhqj0oa().s[69]++;
              return setNewTestCase(prev => {
                /* istanbul ignore next */
                cov_ueqhqj0oa().f[19]++;
                cov_ueqhqj0oa().s[70]++;
                return {
                  ...prev,
                  input_variables: {
                    ...prev.input_variables,
                    [key]: e.target.value
                  }
                };
              });
            },
            className: "flex-1 px-2 py-1 border border-gray-300 rounded text-sm",
            placeholder: `Enter value for ${key}`
          })) :
          /* istanbul ignore next */
          (/*#__PURE__*/cov_ueqhqj0oa().b[10][1]++, (0, _jsxruntime.jsx)("span", {
            className: "text-sm text-gray-600 bg-gray-50 px-2 py-1 rounded font-mono",
            children: value
          }))]
        }, key);
      })
    });
  };
  /* istanbul ignore next */
  cov_ueqhqj0oa().s[71]++;
  return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
    className: "space-y-6",
    children: [
    /* istanbul ignore next */
    (cov_ueqhqj0oa().b[12][0]++, error) &&
    /* istanbul ignore next */
    (cov_ueqhqj0oa().b[12][1]++, /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
      className: "bg-red-50 border border-red-200 rounded-md p-4",
      children: /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
        className: "text-red-800",
        children: error
      })
    })),
    /* istanbul ignore next */
    (cov_ueqhqj0oa().b[13][0]++, testCases.length > 0) &&
    /* istanbul ignore next */
    (cov_ueqhqj0oa().b[13][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
      className: "space-y-4",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h3", {
        className: "text-md font-medium text-gray-900",
        children: "Existing Test Cases"
      }), testCases.map(testCase => {
        /* istanbul ignore next */
        cov_ueqhqj0oa().f[20]++;
        cov_ueqhqj0oa().s[72]++;
        return /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "border border-gray-200 rounded-lg p-4",
          children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "flex justify-between items-start mb-3",
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h4", {
              className: "font-medium text-gray-900",
              children: testCase.name
            }), /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
              variant: "outline",
              size: "sm",
              onClick: () => {
                /* istanbul ignore next */
                cov_ueqhqj0oa().f[21]++;
                cov_ueqhqj0oa().s[73]++;
                return handleDeleteTestCase(testCase.id);
              },
              disabled: loading,
              className: "text-red-600 border-red-200 hover:bg-red-50",
              children: "Delete"
            })]
          }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "grid md:grid-cols-2 gap-4",
            children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
              children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h5", {
                className: "text-sm font-medium text-gray-700 mb-2",
                children: "Input Variables:"
              }), renderInputVariables(testCase.input_variables)]
            }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
              children: [
              /* istanbul ignore next */
              (cov_ueqhqj0oa().b[14][0]++, testCase.expected_output) &&
              /* istanbul ignore next */
              (cov_ueqhqj0oa().b[14][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                className: "mb-3",
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h5", {
                  className: "text-sm font-medium text-gray-700 mb-1",
                  children: "Expected Output:"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
                  className: "text-sm text-gray-600 bg-gray-50 p-2 rounded",
                  children: testCase.expected_output
                })]
              })),
              /* istanbul ignore next */
              (cov_ueqhqj0oa().b[15][0]++, testCase.assertions.length > 0) &&
              /* istanbul ignore next */
              (cov_ueqhqj0oa().b[15][1]++, /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h5", {
                  className: "text-sm font-medium text-gray-700 mb-2",
                  children: "Assertions:"
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
                  className: "space-y-1",
                  children: testCase.assertions.map((assertion, index) => {
                    /* istanbul ignore next */
                    cov_ueqhqj0oa().f[22]++;
                    cov_ueqhqj0oa().s[74]++;
                    return /*#__PURE__*/(0, _jsxruntime.jsxs)(_Badge.Badge, {
                      variant: "outline",
                      className: "mr-2",
                      children: [assertion.type, ": ", assertion.value]
                    }, index);
                  })
                })]
              }))]
            })]
          })]
        }, testCase.id);
      })]
    })), !showAddForm ?
    /* istanbul ignore next */
    (/*#__PURE__*/cov_ueqhqj0oa().b[16][0]++, (0, _jsxruntime.jsxs)("div", {
      className: "text-center py-8 border-2 border-dashed border-gray-300 rounded-lg",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("p", {
        className: "text-gray-500 mb-4",
        children: testCases.length === 0 ?
        /* istanbul ignore next */
        (cov_ueqhqj0oa().b[17][0]++, "No test cases yet.") :
        /* istanbul ignore next */
        (cov_ueqhqj0oa().b[17][1]++, "Add more test cases to validate your prompt.")
      }), /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
        onClick: initializeNewTestCase,
        disabled: variables.length === 0,
        children: "Add Test Case"
      }),
      /* istanbul ignore next */
      (cov_ueqhqj0oa().b[18][0]++, variables.length === 0) &&
      /* istanbul ignore next */
      (cov_ueqhqj0oa().b[18][1]++, /*#__PURE__*/(0, _jsxruntime.jsx)("p", {
        className: "text-sm text-gray-400 mt-2",
        children: "Add variables to your prompt template first"
      }))]
    })) :
    /* istanbul ignore next */
    (/*#__PURE__*/cov_ueqhqj0oa().b[16][1]++, (0, _jsxruntime.jsxs)("div", {
      className: "border border-gray-200 rounded-lg p-6 bg-gray-50",
      children: [/*#__PURE__*/(0, _jsxruntime.jsx)("h3", {
        className: "text-md font-medium text-gray-900 mb-4",
        children: "Add New Test Case"
      }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
        className: "space-y-4",
        children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("label", {
            className: "block text-sm font-medium text-gray-700 mb-1",
            children: "Test Case Name *"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)("input", {
            type: "text",
            value: newTestCase.name,
            onChange: e => {
              /* istanbul ignore next */
              cov_ueqhqj0oa().f[23]++;
              cov_ueqhqj0oa().s[75]++;
              return setNewTestCase(prev => {
                /* istanbul ignore next */
                cov_ueqhqj0oa().f[24]++;
                cov_ueqhqj0oa().s[76]++;
                return {
                  ...prev,
                  name: e.target.value
                };
              });
            },
            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
            placeholder: "Describe what this test case validates"
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("label", {
            className: "block text-sm font-medium text-gray-700 mb-2",
            children: "Input Variables *"
          }), renderInputVariables(newTestCase.input_variables, true)]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)("label", {
            className: "block text-sm font-medium text-gray-700 mb-1",
            children: "Expected Output (optional)"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)("textarea", {
            value: newTestCase.expected_output,
            onChange: e => {
              /* istanbul ignore next */
              cov_ueqhqj0oa().f[25]++;
              cov_ueqhqj0oa().s[77]++;
              return setNewTestCase(prev => {
                /* istanbul ignore next */
                cov_ueqhqj0oa().f[26]++;
                cov_ueqhqj0oa().s[78]++;
                return {
                  ...prev,
                  expected_output: e.target.value
                };
              });
            },
            rows: 3,
            className: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
            placeholder: "Describe what the expected output should contain"
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          children: [/*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
            className: "flex justify-between items-center mb-2",
            children: [/*#__PURE__*/(0, _jsxruntime.jsx)("label", {
              className: "block text-sm font-medium text-gray-700",
              children: "Assertions (optional)"
            }), /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
              type: "button",
              variant: "outline",
              size: "sm",
              onClick: addAssertion,
              children: "Add Assertion"
            })]
          }), newTestCase.assertions.map((assertion, index) => {
            /* istanbul ignore next */
            cov_ueqhqj0oa().f[27]++;
            cov_ueqhqj0oa().s[79]++;
            return /*#__PURE__*/(0, _jsxruntime.jsx)("div", {
              className: "border border-gray-200 rounded p-3 mb-2 bg-white",
              children: /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                className: "grid grid-cols-1 md:grid-cols-3 gap-2",
                children: [/*#__PURE__*/(0, _jsxruntime.jsx)("select", {
                  value: assertion.type,
                  onChange: e => {
                    /* istanbul ignore next */
                    cov_ueqhqj0oa().f[28]++;
                    cov_ueqhqj0oa().s[80]++;
                    return updateAssertion(index, "type", e.target.value);
                  },
                  className: "px-2 py-1 border border-gray-300 rounded text-sm",
                  children: assertionTypes.map(type => {
                    /* istanbul ignore next */
                    cov_ueqhqj0oa().f[29]++;
                    cov_ueqhqj0oa().s[81]++;
                    return /*#__PURE__*/(0, _jsxruntime.jsx)("option", {
                      value: type.value,
                      children: type.label
                    }, type.value);
                  })
                }), /*#__PURE__*/(0, _jsxruntime.jsx)("input", {
                  type: assertion.type === "length" ?
                  /* istanbul ignore next */
                  (cov_ueqhqj0oa().b[19][0]++, "number") :
                  /* istanbul ignore next */
                  (cov_ueqhqj0oa().b[19][1]++, "text"),
                  value: assertion.value,
                  onChange: e => {
                    /* istanbul ignore next */
                    cov_ueqhqj0oa().f[30]++;
                    cov_ueqhqj0oa().s[82]++;
                    return updateAssertion(index, "value", assertion.type === "length" ?
                    /* istanbul ignore next */
                    (cov_ueqhqj0oa().b[20][0]++, Number(e.target.value)) :
                    /* istanbul ignore next */
                    (cov_ueqhqj0oa().b[20][1]++, e.target.value));
                  },
                  placeholder: "Assertion value",
                  className: "px-2 py-1 border border-gray-300 rounded text-sm"
                }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
                  className: "flex space-x-1",
                  children: [/*#__PURE__*/(0, _jsxruntime.jsx)("input", {
                    type: "text",
                    value:
                    /* istanbul ignore next */
                    (cov_ueqhqj0oa().b[21][0]++, assertion.description) ||
                    /* istanbul ignore next */
                    (cov_ueqhqj0oa().b[21][1]++, ""),
                    onChange: e => {
                      /* istanbul ignore next */
                      cov_ueqhqj0oa().f[31]++;
                      cov_ueqhqj0oa().s[83]++;
                      return updateAssertion(index, "description", e.target.value);
                    },
                    placeholder: "Description (optional)",
                    className: "flex-1 px-2 py-1 border border-gray-300 rounded text-sm"
                  }), /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
                    type: "button",
                    variant: "outline",
                    size: "sm",
                    onClick: () => {
                      /* istanbul ignore next */
                      cov_ueqhqj0oa().f[32]++;
                      cov_ueqhqj0oa().s[84]++;
                      return removeAssertion(index);
                    },
                    children: "\xd7"
                  })]
                })]
              })
            }, index);
          })]
        }), /*#__PURE__*/(0, _jsxruntime.jsxs)("div", {
          className: "flex justify-end space-x-2 pt-4 border-t border-gray-200",
          children: [/*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
            type: "button",
            variant: "outline",
            onClick: () => {
              /* istanbul ignore next */
              cov_ueqhqj0oa().f[33]++;
              cov_ueqhqj0oa().s[85]++;
              return setShowAddForm(false);
            },
            disabled: loading,
            children: "Cancel"
          }), /*#__PURE__*/(0, _jsxruntime.jsx)(_Button.Button, {
            type: "button",
            onClick: handleSaveTestCase,
            disabled: loading,
            children: loading ?
            /* istanbul ignore next */
            (/*#__PURE__*/cov_ueqhqj0oa().b[22][0]++, (0, _jsxruntime.jsx)(_LoadingSpinner.LoadingSpinner, {
              size: "sm"
            })) :
            /* istanbul ignore next */
            (cov_ueqhqj0oa().b[22][1]++, "Save Test Case")
          })]
        })]
      })]
    }))]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,