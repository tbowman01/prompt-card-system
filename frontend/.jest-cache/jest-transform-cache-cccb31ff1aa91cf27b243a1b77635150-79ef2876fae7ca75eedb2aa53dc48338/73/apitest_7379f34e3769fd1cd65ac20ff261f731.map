{"version":3,"sources":["/workspaces/prompt-card-system/frontend/src/__tests__/lib/api.test.ts"],"sourcesContent":["import { api, apiRequest, ApiError } from '@/lib/api'\n\n// Mock fetch globally\nglobal.fetch = jest.fn()\n\nconst mockFetch = fetch as jest.MockedFunction<typeof fetch>\n\ndescribe('apiRequest', () => {\n  beforeEach(() => {\n    mockFetch.mockClear()\n    // Reset environment variable\n    process.env.NEXT_PUBLIC_API_URL = 'http://localhost:3001/api'\n  })\n\n  it('makes successful API request', async () => {\n    const mockData = { id: 1, name: 'Test' }\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, data: mockData }),\n    } as Response)\n\n    const result = await apiRequest('/test')\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test',\n      {\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }\n    )\n    expect(result).toEqual(mockData)\n  })\n\n  it('throws ApiError for HTTP errors', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: false,\n      status: 404,\n      json: async () => ({ success: false, error: 'Not Found' }),\n    } as Response)\n\n    await expect(apiRequest('/not-found')).rejects.toThrow(ApiError)\n    await expect(apiRequest('/not-found')).rejects.toThrow('Not Found')\n  })\n\n  it('throws Error for API failures', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: false, error: 'Server Error' }),\n    } as Response)\n\n    await expect(apiRequest('/error')).rejects.toThrow('Server Error')\n  })\n\n  it('throws network error for fetch failures', async () => {\n    mockFetch.mockRejectedValueOnce(new Error('Network Error'))\n\n    await expect(apiRequest('/network-error')).rejects.toThrow('Network error: Network Error')\n  })\n\n  it('includes custom headers', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, data: {} }),\n    } as Response)\n\n    await apiRequest('/test', {\n      headers: {\n        'Authorization': 'Bearer token',\n      },\n    })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test',\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer token',\n        },\n      }\n    )\n  })\n})\n\ndescribe('api.getPromptCards', () => {\n  beforeEach(() => {\n    mockFetch.mockClear()\n  })\n\n  it('calls correct endpoint without parameters', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, data: [] }),\n    } as Response)\n\n    await api.getPromptCards()\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/prompt-cards',\n      expect.any(Object)\n    )\n  })\n\n  it('includes query parameters when provided', async () => {\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, data: [] }),\n    } as Response)\n\n    await api.getPromptCards({ page: 2, limit: 10, search: 'test' })\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/prompt-cards?page=2&limit=10&search=test',\n      expect.any(Object)\n    )\n  })\n})\n\ndescribe('api.createPromptCard', () => {\n  it('sends POST request with correct data', async () => {\n    const cardData = {\n      title: 'Test Card',\n      prompt_template: 'Hello {{name}}',\n      variables: ['name'],\n    }\n\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, data: { id: 1, ...cardData } }),\n    } as Response)\n\n    await api.createPromptCard(cardData)\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/prompt-cards',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(cardData),\n      }\n    )\n  })\n})\n\ndescribe('api.runTests', () => {\n  it('sends POST request to correct endpoint', async () => {\n    const testData = {\n      prompt_card_id: 1,\n      test_case_ids: [1, 2, 3],\n      model: 'gpt-4',\n    }\n\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, data: { execution_id: 'exec-123' } }),\n    } as Response)\n\n    await api.runTests(testData)\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/test-execution/run',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(testData),\n      }\n    )\n  })\n})\n\ndescribe('api.getDashboardMetrics', () => {\n  it('fetches analytics dashboard data', async () => {\n    const mockMetrics = {\n      realtime: { activeTests: 5 },\n      historical: { totalTests: 100 },\n    }\n\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({ success: true, data: mockMetrics }),\n    } as Response)\n\n    const result = await api.getDashboardMetrics()\n\n    expect(mockFetch).toHaveBeenCalledWith(\n      'http://localhost:3001/api/analytics/dashboard',\n      expect.any(Object)\n    )\n    expect(result).toEqual(mockMetrics)\n  })\n})\n\ndescribe('api.exportYAML', () => {\n  it('returns raw fetch response for file download', async () => {\n    const mockResponse = new Response('yaml content', {\n      headers: { 'Content-Type': 'application/yaml' },\n    })\n\n    mockFetch.mockResolvedValueOnce(mockResponse)\n\n    const result = await api.exportYAML(1)\n\n    expect(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/yaml/export/1')\n    expect(result).toBe(mockResponse)\n  })\n\n  it('exports all cards when no ID provided', async () => {\n    const mockResponse = new Response('yaml content')\n    mockFetch.mockResolvedValueOnce(mockResponse)\n\n    await api.exportYAML()\n\n    expect(mockFetch).toHaveBeenCalledWith('http://localhost:3001/api/yaml/export')\n  })\n})\n\ndescribe('ApiError', () => {\n  it('creates error with status and message', () => {\n    const error = new ApiError(404, 'Not Found')\n\n    expect(error.status).toBe(404)\n    expect(error.message).toBe('Not Found')\n    expect(error.name).toBe('ApiError')\n    expect(error).toBeInstanceOf(Error)\n  })\n})"],"names":["global","fetch","jest","fn","mockFetch","describe","beforeEach","mockClear","process","env","NEXT_PUBLIC_API_URL","it","mockData","id","name","mockResolvedValueOnce","ok","json","success","data","result","apiRequest","expect","toHaveBeenCalledWith","headers","toEqual","status","error","rejects","toThrow","ApiError","mockRejectedValueOnce","Error","api","getPromptCards","any","Object","page","limit","search","cardData","title","prompt_template","variables","createPromptCard","method","body","JSON","stringify","testData","prompt_card_id","test_case_ids","model","execution_id","runTests","mockMetrics","realtime","activeTests","historical","totalTests","getDashboardMetrics","mockResponse","Response","exportYAML","toBe","message","toBeInstanceOf"],"mappings":"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"}