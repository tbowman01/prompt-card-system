0b20569fcb6a19c417ec20d1ed9f4f43
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
require("@testing-library/jest-dom");
const _util = require("util");
global.TextEncoder = _util.TextEncoder;
global.TextDecoder = _util.TextDecoder;
// Extend Jest globally for TypeScript
global.jest = jest;
global.expect = expect;
global.describe = describe;
global.it = it;
global.beforeEach = beforeEach;
global.afterEach = afterEach;
global.beforeAll = beforeAll;
global.afterAll = afterAll;
// TODO: Set up MSW for API mocking when needed
// require('./src/__tests__/setup/msw')
// Mock window.matchMedia
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
    constructor(){}
    observe() {
        return null;
    }
    disconnect() {
        return null;
    }
    unobserve() {
        return null;
    }
};
// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
    constructor(){}
    observe() {
        return null;
    }
    disconnect() {
        return null;
    }
    unobserve() {
        return null;
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9mcm9udGVuZC9qZXN0LnNldHVwLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSdcblxuLy8gUG9seWZpbGxzIGZvciBOb2RlLmpzIGVudmlyb25tZW50XG5pbXBvcnQgeyBUZXh0RW5jb2RlciwgVGV4dERlY29kZXIgfSBmcm9tICd1dGlsJztcbmdsb2JhbC5UZXh0RW5jb2RlciA9IFRleHRFbmNvZGVyO1xuZ2xvYmFsLlRleHREZWNvZGVyID0gVGV4dERlY29kZXI7XG5cbi8vIEV4dGVuZCBKZXN0IGdsb2JhbGx5IGZvciBUeXBlU2NyaXB0XG5nbG9iYWwuamVzdCA9IGplc3Q7XG5nbG9iYWwuZXhwZWN0ID0gZXhwZWN0O1xuZ2xvYmFsLmRlc2NyaWJlID0gZGVzY3JpYmU7XG5nbG9iYWwuaXQgPSBpdDtcbmdsb2JhbC5iZWZvcmVFYWNoID0gYmVmb3JlRWFjaDtcbmdsb2JhbC5hZnRlckVhY2ggPSBhZnRlckVhY2g7XG5nbG9iYWwuYmVmb3JlQWxsID0gYmVmb3JlQWxsO1xuZ2xvYmFsLmFmdGVyQWxsID0gYWZ0ZXJBbGw7XG5cbi8vIFRPRE86IFNldCB1cCBNU1cgZm9yIEFQSSBtb2NraW5nIHdoZW4gbmVlZGVkXG4vLyByZXF1aXJlKCcuL3NyYy9fX3Rlc3RzX18vc2V0dXAvbXN3JylcblxuLy8gTW9jayB3aW5kb3cubWF0Y2hNZWRpYVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ21hdGNoTWVkaWEnLCB7XG4gIHdyaXRhYmxlOiB0cnVlLFxuICB2YWx1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihxdWVyeSA9PiAoe1xuICAgIG1hdGNoZXM6IGZhbHNlLFxuICAgIG1lZGlhOiBxdWVyeSxcbiAgICBvbmNoYW5nZTogbnVsbCxcbiAgICBhZGRMaXN0ZW5lcjogamVzdC5mbigpLCAvLyBkZXByZWNhdGVkXG4gICAgcmVtb3ZlTGlzdGVuZXI6IGplc3QuZm4oKSwgLy8gZGVwcmVjYXRlZFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGplc3QuZm4oKSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBqZXN0LmZuKCksXG4gICAgZGlzcGF0Y2hFdmVudDogamVzdC5mbigpLFxuICB9KSksXG59KVxuXG4vLyBNb2NrIEludGVyc2VjdGlvbk9ic2VydmVyXG5nbG9iYWwuSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPSBjbGFzcyBJbnRlcnNlY3Rpb25PYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cbiAgb2JzZXJ2ZSgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGRpc2Nvbm5lY3QoKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICB1bm9ic2VydmUoKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufVxuXG4vLyBNb2NrIFJlc2l6ZU9ic2VydmVyXG5nbG9iYWwuUmVzaXplT2JzZXJ2ZXIgPSBjbGFzcyBSZXNpemVPYnNlcnZlciB7XG4gIGNvbnN0cnVjdG9yKCkge31cbiAgb2JzZXJ2ZSgpIHtcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIGRpc2Nvbm5lY3QoKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuICB1bm9ic2VydmUoKSB7XG4gICAgcmV0dXJuIG51bGxcbiAgfVxufSJdLCJuYW1lcyI6WyJnbG9iYWwiLCJUZXh0RW5jb2RlciIsIlRleHREZWNvZGVyIiwiamVzdCIsImV4cGVjdCIsImRlc2NyaWJlIiwiaXQiLCJiZWZvcmVFYWNoIiwiYWZ0ZXJFYWNoIiwiYmVmb3JlQWxsIiwiYWZ0ZXJBbGwiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsIndyaXRhYmxlIiwidmFsdWUiLCJmbiIsIm1vY2tJbXBsZW1lbnRhdGlvbiIsInF1ZXJ5IiwibWF0Y2hlcyIsIm1lZGlhIiwib25jaGFuZ2UiLCJhZGRMaXN0ZW5lciIsInJlbW92ZUxpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkaXNwYXRjaEV2ZW50IiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJjb25zdHJ1Y3RvciIsIm9ic2VydmUiLCJkaXNjb25uZWN0IiwidW5vYnNlcnZlIiwiUmVzaXplT2JzZXJ2ZXIiXSwibWFwcGluZ3MiOiI7Ozs7UUFBTztzQkFHa0M7QUFDekNBLE9BQU9DLFdBQVcsR0FBR0EsaUJBQVc7QUFDaENELE9BQU9FLFdBQVcsR0FBR0EsaUJBQVc7QUFFaEMsc0NBQXNDO0FBQ3RDRixPQUFPRyxJQUFJLEdBQUdBO0FBQ2RILE9BQU9JLE1BQU0sR0FBR0E7QUFDaEJKLE9BQU9LLFFBQVEsR0FBR0E7QUFDbEJMLE9BQU9NLEVBQUUsR0FBR0E7QUFDWk4sT0FBT08sVUFBVSxHQUFHQTtBQUNwQlAsT0FBT1EsU0FBUyxHQUFHQTtBQUNuQlIsT0FBT1MsU0FBUyxHQUFHQTtBQUNuQlQsT0FBT1UsUUFBUSxHQUFHQTtBQUVsQiwrQ0FBK0M7QUFDL0MsdUNBQXVDO0FBRXZDLHlCQUF5QjtBQUN6QkMsT0FBT0MsY0FBYyxDQUFDQyxRQUFRLGNBQWM7SUFDMUNDLFVBQVU7SUFDVkMsT0FBT1osS0FBS2EsRUFBRSxHQUFHQyxrQkFBa0IsQ0FBQ0MsQ0FBQUEsUUFBVSxDQUFBO1lBQzVDQyxTQUFTO1lBQ1RDLE9BQU9GO1lBQ1BHLFVBQVU7WUFDVkMsYUFBYW5CLEtBQUthLEVBQUU7WUFDcEJPLGdCQUFnQnBCLEtBQUthLEVBQUU7WUFDdkJRLGtCQUFrQnJCLEtBQUthLEVBQUU7WUFDekJTLHFCQUFxQnRCLEtBQUthLEVBQUU7WUFDNUJVLGVBQWV2QixLQUFLYSxFQUFFO1FBQ3hCLENBQUE7QUFDRjtBQUVBLDRCQUE0QjtBQUM1QmhCLE9BQU8yQixvQkFBb0IsR0FBRyxNQUFNQTtJQUNsQ0MsYUFBYyxDQUFDO0lBQ2ZDLFVBQVU7UUFDUixPQUFPO0lBQ1Q7SUFDQUMsYUFBYTtRQUNYLE9BQU87SUFDVDtJQUNBQyxZQUFZO1FBQ1YsT0FBTztJQUNUO0FBQ0Y7QUFFQSxzQkFBc0I7QUFDdEIvQixPQUFPZ0MsY0FBYyxHQUFHLE1BQU1BO0lBQzVCSixhQUFjLENBQUM7SUFDZkMsVUFBVTtRQUNSLE9BQU87SUFDVDtJQUNBQyxhQUFhO1FBQ1gsT0FBTztJQUNUO0lBQ0FDLFlBQVk7UUFDVixPQUFPO0lBQ1Q7QUFDRiJ9