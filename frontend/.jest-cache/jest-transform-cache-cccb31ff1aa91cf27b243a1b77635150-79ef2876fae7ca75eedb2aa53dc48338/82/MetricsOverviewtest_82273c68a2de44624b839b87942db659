9d204f27671011078f137247fd712bcf
"use strict";
// Mock the API
jest.mock("@/lib/api", ()=>({
        api: {
            getDashboardMetrics: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _MetricsOverview = require("../../../components/Analytics/MetricsOverview");
const _api = require("../../../lib/api");
const mockApiMetrics = _api.api;
const mockMetrics = {
    realtime: {
        activeTests: 5,
        testsPerSecond: 2.5,
        successRate: 0.85,
        averageResponseTime: 1500,
        errorRate: 0.15
    },
    historical: {
        totalTests: 1250,
        totalExecutions: 450,
        overallSuccessRate: 0.92,
        averageExecutionTime: 1200,
        mostUsedModels: [
            {
                model: "gpt-4",
                count: 500
            },
            {
                model: "claude-3",
                count: 300
            },
            {
                model: "gpt-3.5-turbo",
                count: 200
            }
        ]
    },
    trends: {
        testsOverTime: [],
        successRateOverTime: [],
        performanceOverTime: []
    },
    insights: [
        {
            id: "1",
            type: "trend",
            title: "High Error Rate Detected",
            description: "Error rate has increased to 15% in the last hour",
            severity: "high",
            data: {},
            timestamp: new Date(),
            recommendations: [
                "Check API endpoints",
                "Review model configurations"
            ]
        },
        {
            id: "2",
            type: "performance",
            title: "Slow Response Times",
            description: "Average response time is above normal thresholds",
            severity: "medium",
            data: {},
            timestamp: new Date()
        }
    ]
};
describe("MetricsOverview", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Clear any existing intervals
        jest.clearAllTimers();
        jest.useFakeTimers();
    });
    afterEach(()=>{
        jest.runOnlyPendingTimers();
        jest.useRealTimers();
    });
    it("shows loading state initially", ()=>{
        mockApiMetrics.getDashboardMetrics.mockImplementation(()=>new Promise(()=>{}) // Never resolves
        );
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        expect(_react.screen.getByRole("generic")).toHaveClass("animate-spin");
    });
    it("displays metrics when loaded successfully", async ()=>{
        mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics);
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Real-time Metrics")).toBeInTheDocument();
        });
        // Check real-time metrics
        expect(_react.screen.getByText("Active Tests")).toBeInTheDocument();
        expect(_react.screen.getByText("5")).toBeInTheDocument();
        expect(_react.screen.getByText("Tests/Second")).toBeInTheDocument();
        expect(_react.screen.getByText("2.5")).toBeInTheDocument();
        expect(_react.screen.getByText("Success Rate")).toBeInTheDocument();
        expect(_react.screen.getByText("85.0%")).toBeInTheDocument();
        // Check historical metrics
        expect(_react.screen.getByText("Historical Overview")).toBeInTheDocument();
        expect(_react.screen.getByText("Total Tests")).toBeInTheDocument();
        expect(_react.screen.getByText("1.3K")).toBeInTheDocument() // Formatted number
        ;
        // Check most used models
        expect(_react.screen.getByText("Most Used Models")).toBeInTheDocument();
        expect(_react.screen.getByText("gpt-4")).toBeInTheDocument();
        expect(_react.screen.getByText("500 tests")).toBeInTheDocument();
    });
    it("displays insights when available", async ()=>{
        mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics);
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("System Insights")).toBeInTheDocument();
        });
        expect(_react.screen.getByText("High Error Rate Detected")).toBeInTheDocument();
        expect(_react.screen.getByText("Error rate has increased to 15% in the last hour")).toBeInTheDocument();
        expect(_react.screen.getByText("Slow Response Times")).toBeInTheDocument();
        // Check recommendations
        expect(_react.screen.getByText("Recommendations:")).toBeInTheDocument();
        expect(_react.screen.getByText("Check API endpoints")).toBeInTheDocument();
        expect(_react.screen.getByText("Review model configurations")).toBeInTheDocument();
    });
    it("applies correct severity colors for metrics", async ()=>{
        mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics);
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Success Rate")).toBeInTheDocument();
        });
        // Find the success rate metric card (85% should be warning)
        const successRateCard = _react.screen.getByText("85.0%").closest("div");
        expect(successRateCard).toHaveClass("bg-yellow-50", "border-yellow-200");
        // Error rate (15%) should be error severity
        const errorRateCard = _react.screen.getByText("15.0%").closest("div");
        expect(errorRateCard).toHaveClass("bg-red-50", "border-red-200");
    });
    it("handles API errors gracefully", async ()=>{
        mockApiMetrics.getDashboardMetrics.mockRejectedValue(new Error("API Error"));
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Failed to load metrics")).toBeInTheDocument();
        });
        expect(_react.screen.getByText("Failed to load metrics").closest("div")).toHaveClass("bg-red-50", "border-red-200");
    });
    it("shows no metrics message when data is null", async ()=>{
        mockApiMetrics.getDashboardMetrics.mockResolvedValue(null);
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("No metrics available")).toBeInTheDocument();
        });
    });
    it("refreshes metrics every 30 seconds", async ()=>{
        mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics);
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(mockApiMetrics.getDashboardMetrics).toHaveBeenCalledTimes(1);
        });
        // Fast-forward 30 seconds
        jest.advanceTimersByTime(30000);
        await (0, _react.waitFor)(()=>{
            expect(mockApiMetrics.getDashboardMetrics).toHaveBeenCalledTimes(2);
        });
    });
    it("formats numbers correctly", async ()=>{
        const largeNumberMetrics = {
            ...mockMetrics,
            historical: {
                ...mockMetrics.historical,
                totalTests: 1500000,
                totalExecutions: 2500
            }
        };
        mockApiMetrics.getDashboardMetrics.mockResolvedValue(largeNumberMetrics);
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("1.5M")).toBeInTheDocument();
            expect(_react.screen.getByText("2.5K")).toBeInTheDocument();
        });
    });
    it("formats time correctly", async ()=>{
        mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics);
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        await (0, _react.waitFor)(()=>{
            // 1500ms should be formatted as 1.5s
            expect(_react.screen.getByText("1.5s")).toBeInTheDocument();
            // 1200ms should be formatted as 1.2s
            expect(_react.screen.getByText("1.2s")).toBeInTheDocument();
        });
    });
    it("cleans up interval on unmount", async ()=>{
        mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics);
        const { unmount } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MetricsOverview.MetricsOverview, {}));
        await (0, _react.waitFor)(()=>{
            expect(mockApiMetrics.getDashboardMetrics).toHaveBeenCalledTimes(1);
        });
        unmount();
        // Fast-forward time - should not trigger additional API calls
        jest.advanceTimersByTime(30000);
        expect(mockApiMetrics.getDashboardMetrics).toHaveBeenCalledTimes(1);
    });
});

//# sourceMappingURL=data:application/json;base64,