{"version":3,"sources":["/workspaces/prompt-card-system/frontend/src/__tests__/components/Analytics/MetricsOverview.test.tsx"],"sourcesContent":["import { render, screen, waitFor } from '@testing-library/react'\nimport { MetricsOverview } from '@/components/Analytics/MetricsOverview'\nimport { api } from '@/lib/api'\nimport { DashboardMetrics } from '@/types'\n\n// Mock the API\njest.mock('@/lib/api', () => ({\n  api: {\n    getDashboardMetrics: jest.fn(),\n  },\n}))\n\nconst mockApiMetrics = api as jest.Mocked<typeof api>\n\nconst mockMetrics: DashboardMetrics = {\n  realtime: {\n    activeTests: 5,\n    testsPerSecond: 2.5,\n    successRate: 0.85,\n    averageResponseTime: 1500,\n    errorRate: 0.15,\n  },\n  historical: {\n    totalTests: 1250,\n    totalExecutions: 450,\n    overallSuccessRate: 0.92,\n    averageExecutionTime: 1200,\n    mostUsedModels: [\n      { model: 'gpt-4', count: 500 },\n      { model: 'claude-3', count: 300 },\n      { model: 'gpt-3.5-turbo', count: 200 },\n    ],\n  },\n  trends: {\n    testsOverTime: [],\n    successRateOverTime: [],\n    performanceOverTime: [],\n  },\n  insights: [\n    {\n      id: '1',\n      type: 'trend',\n      title: 'High Error Rate Detected',\n      description: 'Error rate has increased to 15% in the last hour',\n      severity: 'high',\n      data: {},\n      timestamp: new Date(),\n      recommendations: ['Check API endpoints', 'Review model configurations'],\n    },\n    {\n      id: '2',\n      type: 'performance',\n      title: 'Slow Response Times',\n      description: 'Average response time is above normal thresholds',\n      severity: 'medium',\n      data: {},\n      timestamp: new Date(),\n    },\n  ],\n}\n\ndescribe('MetricsOverview', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Clear any existing intervals\n    jest.clearAllTimers()\n    jest.useFakeTimers()\n  })\n\n  afterEach(() => {\n    jest.runOnlyPendingTimers()\n    jest.useRealTimers()\n  })\n\n  it('shows loading state initially', () => {\n    mockApiMetrics.getDashboardMetrics.mockImplementation(() => \n      new Promise(() => {}) // Never resolves\n    )\n\n    render(<MetricsOverview />)\n    \n    expect(screen.getByRole('generic')).toHaveClass('animate-spin')\n  })\n\n  it('displays metrics when loaded successfully', async () => {\n    mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics)\n\n    render(<MetricsOverview />)\n\n    await waitFor(() => {\n      expect(screen.getByText('Real-time Metrics')).toBeInTheDocument()\n    })\n\n    // Check real-time metrics\n    expect(screen.getByText('Active Tests')).toBeInTheDocument()\n    expect(screen.getByText('5')).toBeInTheDocument()\n    expect(screen.getByText('Tests/Second')).toBeInTheDocument()\n    expect(screen.getByText('2.5')).toBeInTheDocument()\n    expect(screen.getByText('Success Rate')).toBeInTheDocument()\n    expect(screen.getByText('85.0%')).toBeInTheDocument()\n\n    // Check historical metrics\n    expect(screen.getByText('Historical Overview')).toBeInTheDocument()\n    expect(screen.getByText('Total Tests')).toBeInTheDocument()\n    expect(screen.getByText('1.3K')).toBeInTheDocument() // Formatted number\n\n    // Check most used models\n    expect(screen.getByText('Most Used Models')).toBeInTheDocument()\n    expect(screen.getByText('gpt-4')).toBeInTheDocument()\n    expect(screen.getByText('500 tests')).toBeInTheDocument()\n  })\n\n  it('displays insights when available', async () => {\n    mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics)\n\n    render(<MetricsOverview />)\n\n    await waitFor(() => {\n      expect(screen.getByText('System Insights')).toBeInTheDocument()\n    })\n\n    expect(screen.getByText('High Error Rate Detected')).toBeInTheDocument()\n    expect(screen.getByText('Error rate has increased to 15% in the last hour')).toBeInTheDocument()\n    expect(screen.getByText('Slow Response Times')).toBeInTheDocument()\n\n    // Check recommendations\n    expect(screen.getByText('Recommendations:')).toBeInTheDocument()\n    expect(screen.getByText('Check API endpoints')).toBeInTheDocument()\n    expect(screen.getByText('Review model configurations')).toBeInTheDocument()\n  })\n\n  it('applies correct severity colors for metrics', async () => {\n    mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics)\n\n    render(<MetricsOverview />)\n\n    await waitFor(() => {\n      expect(screen.getByText('Success Rate')).toBeInTheDocument()\n    })\n\n    // Find the success rate metric card (85% should be warning)\n    const successRateCard = screen.getByText('85.0%').closest('div')\n    expect(successRateCard).toHaveClass('bg-yellow-50', 'border-yellow-200')\n\n    // Error rate (15%) should be error severity\n    const errorRateCard = screen.getByText('15.0%').closest('div')\n    expect(errorRateCard).toHaveClass('bg-red-50', 'border-red-200')\n  })\n\n  it('handles API errors gracefully', async () => {\n    mockApiMetrics.getDashboardMetrics.mockRejectedValue(new Error('API Error'))\n\n    render(<MetricsOverview />)\n\n    await waitFor(() => {\n      expect(screen.getByText('Failed to load metrics')).toBeInTheDocument()\n    })\n\n    expect(screen.getByText('Failed to load metrics').closest('div'))\n      .toHaveClass('bg-red-50', 'border-red-200')\n  })\n\n  it('shows no metrics message when data is null', async () => {\n    mockApiMetrics.getDashboardMetrics.mockResolvedValue(null)\n\n    render(<MetricsOverview />)\n\n    await waitFor(() => {\n      expect(screen.getByText('No metrics available')).toBeInTheDocument()\n    })\n  })\n\n  it('refreshes metrics every 30 seconds', async () => {\n    mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics)\n\n    render(<MetricsOverview />)\n\n    await waitFor(() => {\n      expect(mockApiMetrics.getDashboardMetrics).toHaveBeenCalledTimes(1)\n    })\n\n    // Fast-forward 30 seconds\n    jest.advanceTimersByTime(30000)\n\n    await waitFor(() => {\n      expect(mockApiMetrics.getDashboardMetrics).toHaveBeenCalledTimes(2)\n    })\n  })\n\n  it('formats numbers correctly', async () => {\n    const largeNumberMetrics = {\n      ...mockMetrics,\n      historical: {\n        ...mockMetrics.historical,\n        totalTests: 1500000, // Should format to 1.5M\n        totalExecutions: 2500, // Should format to 2.5K\n      },\n    }\n\n    mockApiMetrics.getDashboardMetrics.mockResolvedValue(largeNumberMetrics)\n\n    render(<MetricsOverview />)\n\n    await waitFor(() => {\n      expect(screen.getByText('1.5M')).toBeInTheDocument()\n      expect(screen.getByText('2.5K')).toBeInTheDocument()\n    })\n  })\n\n  it('formats time correctly', async () => {\n    mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics)\n\n    render(<MetricsOverview />)\n\n    await waitFor(() => {\n      // 1500ms should be formatted as 1.5s\n      expect(screen.getByText('1.5s')).toBeInTheDocument()\n      // 1200ms should be formatted as 1.2s\n      expect(screen.getByText('1.2s')).toBeInTheDocument()\n    })\n  })\n\n  it('cleans up interval on unmount', async () => {\n    mockApiMetrics.getDashboardMetrics.mockResolvedValue(mockMetrics)\n\n    const { unmount } = render(<MetricsOverview />)\n\n    await waitFor(() => {\n      expect(mockApiMetrics.getDashboardMetrics).toHaveBeenCalledTimes(1)\n    })\n\n    unmount()\n\n    // Fast-forward time - should not trigger additional API calls\n    jest.advanceTimersByTime(30000)\n    expect(mockApiMetrics.getDashboardMetrics).toHaveBeenCalledTimes(1)\n  })\n})"],"names":["jest","mock","api","getDashboardMetrics","fn","mockApiMetrics","mockMetrics","realtime","activeTests","testsPerSecond","successRate","averageResponseTime","errorRate","historical","totalTests","totalExecutions","overallSuccessRate","averageExecutionTime","mostUsedModels","model","count","trends","testsOverTime","successRateOverTime","performanceOverTime","insights","id","type","title","description","severity","data","timestamp","Date","recommendations","describe","beforeEach","clearAllMocks","clearAllTimers","useFakeTimers","afterEach","runOnlyPendingTimers","useRealTimers","it","mockImplementation","Promise","render","MetricsOverview","expect","screen","getByRole","toHaveClass","mockResolvedValue","waitFor","getByText","toBeInTheDocument","successRateCard","closest","errorRateCard","mockRejectedValue","Error","toHaveBeenCalledTimes","advanceTimersByTime","largeNumberMetrics","unmount"],"mappings":"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"}