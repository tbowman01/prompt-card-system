{"version":3,"names":["cov_a12sw2jyo","actualCoverage","s","CostTracker","f","default","_default","timeframe","b","costData","setCostData","_react","useState","loading","setLoading","error","setError","selectedTimeframe","setSelectedTimeframe","useEffect","fetchCostData","mockCostData","totalCost","costByModel","costOverTime","Array","from","length","_","i","timestamp","Date","now","cost","Math","random","tokenUsage","totalTokens","promptTokens","completionTokens","err","console","_jsxruntime","jsx","className","_LoadingSpinner","LoadingSpinner","size","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","formatNumber","num","getModelColor","index","colors","jsxs","map","tf","_Button","Button","variant","onClick","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","Object","entries","sort","a","model","percentage","_Badge","Badge","toFixed","point","maxCost","max","p","height","values","min"],"sources":["/workspaces/prompt-card-system/frontend/src/components/Analytics/CostTracker.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { api } from '@/lib/api';\nimport { CostData } from '@/types';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { Badge } from '@/components/ui/Badge';\nimport { Button } from '@/components/ui/Button';\n\ninterface CostTrackerProps {\n  timeframe?: '24h' | '7d' | '30d' | '90d';\n}\n\nexport const CostTracker: React.FC<CostTrackerProps> = ({ timeframe = '24h' }) => {\n  const [costData, setCostData] = useState<CostData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [selectedTimeframe, setSelectedTimeframe] = useState(timeframe);\n\n  useEffect(() => {\n    const fetchCostData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Since we don't have a specific cost endpoint yet, we'll simulate cost data\n        // In a real implementation, this would call api.getCostData(selectedTimeframe)\n        const mockCostData: CostData = {\n          totalCost: 24.67,\n          costByModel: {\n            'llama3.1:8b': 12.34,\n            'llama3.1:70b': 8.45,\n            'mistral:7b': 2.89,\n            'codellama:7b': 0.99,\n          },\n          costOverTime: Array.from({ length: 30 }, (_, i) => ({\n            timestamp: new Date(Date.now() - (29 - i) * 24 * 60 * 60 * 1000),\n            cost: Math.random() * 5 + 0.5,\n          })),\n          tokenUsage: {\n            totalTokens: 1234567,\n            promptTokens: 567890,\n            completionTokens: 666677,\n          },\n        };\n        \n        setCostData(mockCostData);\n      } catch (err) {\n        console.error('Error fetching cost data:', err);\n        setError('Failed to load cost data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchCostData();\n  }, [selectedTimeframe]);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n        <p className=\"text-red-800\">{error}</p>\n      </div>\n    );\n  }\n\n  if (!costData) {\n    return (\n      <div className=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n        <p className=\"text-gray-600\">No cost data available</p>\n      </div>\n    );\n  }\n\n  const formatCurrency = (amount: number): string => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    }).format(amount);\n  };\n\n  const formatNumber = (num: number): string => {\n    return new Intl.NumberFormat('en-US').format(num);\n  };\n\n  const getModelColor = (index: number): string => {\n    const colors = [\n      'bg-blue-500',\n      'bg-green-500',\n      'bg-yellow-500',\n      'bg-purple-500',\n      'bg-red-500',\n      'bg-indigo-500',\n      'bg-pink-500',\n      'bg-gray-500',\n    ];\n    return colors[index % colors.length];\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Timeframe Controls */}\n      <div className=\"flex gap-2\">\n        {(['24h', '7d', '30d', '90d'] as const).map((tf) => (\n          <Button\n            key={tf}\n            variant={selectedTimeframe === tf ? 'primary' : 'outline'}\n            size=\"sm\"\n            onClick={() => setSelectedTimeframe(tf)}\n          >\n            {tf}\n          </Button>\n        ))}\n      </div>\n\n      {/* Cost Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Cost</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{formatCurrency(costData.totalCost)}</p>\n            </div>\n            <div className=\"text-green-600\">\n              <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Tokens</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{formatNumber(costData.tokenUsage.totalTokens)}</p>\n            </div>\n            <div className=\"text-blue-600\">\n              <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Prompt Tokens</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{formatNumber(costData.tokenUsage.promptTokens)}</p>\n            </div>\n            <div className=\"text-purple-600\">\n              <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Completion Tokens</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{formatNumber(costData.tokenUsage.completionTokens)}</p>\n            </div>\n            <div className=\"text-yellow-600\">\n              <svg className=\"w-8 h-8\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Cost by Model */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Cost by Model</h3>\n        <div className=\"space-y-4\">\n          {Object.entries(costData.costByModel)\n            .sort(([, a], [, b]) => b - a)\n            .map(([model, cost], index) => {\n              const percentage = (cost / costData.totalCost) * 100;\n              return (\n                <div key={model} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className={`w-4 h-4 rounded-full ${getModelColor(index)}`}></div>\n                    <span className=\"font-medium text-gray-900\">{model}</span>\n                    <Badge variant=\"secondary\">{percentage.toFixed(1)}%</Badge>\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"font-semibold text-gray-900\">{formatCurrency(cost)}</span>\n                  </div>\n                </div>\n              );\n            })}\n        </div>\n      </div>\n\n      {/* Cost Over Time Chart */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Cost Over Time</h3>\n        <div className=\"h-64 flex items-end space-x-1\">\n          {costData.costOverTime.map((point, index) => {\n            const maxCost = Math.max(...costData.costOverTime.map(p => p.cost));\n            const height = (point.cost / maxCost) * 100;\n            \n            return (\n              <div\n                key={index}\n                className=\"flex-1 bg-blue-500 rounded-t-sm relative group\"\n                style={{ height: `${height}%` }}\n              >\n                <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-2 py-1 bg-gray-900 text-white text-xs rounded opacity-0 group-hover:opacity-100 transition-opacity\">\n                  {formatCurrency(point.cost)}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        <div className=\"mt-4 flex justify-between text-sm text-gray-500\">\n          <span>{costData.costOverTime.length} days ago</span>\n          <span>Today</span>\n        </div>\n      </div>\n\n      {/* Cost Analysis */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Cost Analysis</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-2\">Most Expensive Model</h4>\n            <div className=\"flex items-center justify-between p-3 bg-red-50 rounded-lg\">\n              <span className=\"text-red-800\">\n                {Object.entries(costData.costByModel).sort(([, a], [, b]) => b - a)[0][0]}\n              </span>\n              <span className=\"font-semibold text-red-900\">\n                {formatCurrency(Math.max(...Object.values(costData.costByModel)))}\n              </span>\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"font-medium text-gray-900 mb-2\">Most Efficient Model</h4>\n            <div className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n              <span className=\"text-green-800\">\n                {Object.entries(costData.costByModel).sort(([, a], [, b]) => a - b)[0][0]}\n              </span>\n              <span className=\"font-semibold text-green-900\">\n                {formatCurrency(Math.min(...Object.values(costData.costByModel)))}\n              </span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-4 p-4 bg-yellow-50 rounded-lg\">\n          <h4 className=\"font-medium text-yellow-800 mb-2\">Cost Optimization Tips</h4>\n          <ul className=\"text-sm text-yellow-700 space-y-1\">\n            <li>• Consider using smaller models for simple tasks</li>\n            <li>• Implement caching for frequently used prompts</li>\n            <li>• Monitor token usage to identify inefficient prompts</li>\n            <li>• Use batch processing for multiple similar requests</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CostTracker;"],"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","ignoreList":[]}