{"version":3,"names":["cov_2b5kb1hcyh","actualCoverage","s","PerformanceCharts","f","default","_default","height","b","metrics","setMetrics","_react","useState","loading","setLoading","error","setError","period","setPeriod","selectedChart","setSelectedChart","chartRefs","tests","useRef","success","performance","useEffect","fetchTrends","data","_api","api","getTrends","trends","err","console","drawLineChart","canvas","title","ctx","getContext","clearRect","width","offsetWidth","padding","chartWidth","chartHeight","allData","datasets","flatMap","dataset","minValue","Math","min","maxValue","max","range","strokeStyle","lineWidth","i","y","beginPath","moveTo","lineTo","stroke","stepX","labels","length","x","forEach","datasetIndex","borderColor","value","index","fillStyle","arc","PI","fill","font","textAlign","fillText","toFixed","label","renderChart","chartType","current","chartData","testsOverTime","map","t","Date","timestamp","toLocaleDateString","count","backgroundColor","successRateOverTime","rate","performanceOverTime","avgTime","handleResize","setTimeout","window","addEventListener","removeEventListener","_jsxruntime","jsx","className","_LoadingSpinner","LoadingSpinner","size","jsxs","_Button","Button","variant","onClick","ref","style","Object","entries"],"sources":["/workspaces/prompt-card-system/frontend/src/components/Analytics/PerformanceCharts.tsx"],"sourcesContent":["'use client';\n\nimport { useEffect, useState, useRef } from 'react';\nimport { api } from '@/lib/api';\nimport { DashboardMetrics } from '@/types';\nimport { LoadingSpinner } from '@/components/ui/LoadingSpinner';\nimport { Button } from '@/components/ui/Button';\n\ninterface ChartData {\n  labels: string[];\n  datasets: Array<{\n    label: string;\n    data: number[];\n    borderColor: string;\n    backgroundColor: string;\n    fill?: boolean;\n  }>;\n}\n\ninterface PerformanceChartsProps {\n  height?: number;\n}\n\nexport const PerformanceCharts: React.FC<PerformanceChartsProps> = ({ height = 400 }) => {\n  const [metrics, setMetrics] = useState<DashboardMetrics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [period, setPeriod] = useState<'hour' | 'day' | 'week' | 'month'>('day');\n  const [selectedChart, setSelectedChart] = useState<'tests' | 'success' | 'performance'>('tests');\n  \n  const chartRefs = {\n    tests: useRef<HTMLCanvasElement>(null),\n    success: useRef<HTMLCanvasElement>(null),\n    performance: useRef<HTMLCanvasElement>(null),\n  };\n\n  useEffect(() => {\n    const fetchTrends = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const data = await api.getTrends(period, 30);\n        setMetrics({ ...metrics, trends: data } as DashboardMetrics);\n      } catch (err) {\n        console.error('Error fetching trends:', err);\n        setError('Failed to load chart data');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTrends();\n  }, [period]);\n\n  const drawLineChart = (canvas: HTMLCanvasElement, data: ChartData, title: string) => {\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Set canvas size\n    canvas.width = canvas.offsetWidth;\n    canvas.height = height;\n\n    const padding = 60;\n    const chartWidth = canvas.width - padding * 2;\n    const chartHeight = canvas.height - padding * 2;\n\n    // Find data range\n    const allData = data.datasets.flatMap(dataset => dataset.data);\n    const minValue = Math.min(...allData);\n    const maxValue = Math.max(...allData);\n    const range = maxValue - minValue || 1;\n\n    // Draw grid lines\n    ctx.strokeStyle = '#e5e7eb';\n    ctx.lineWidth = 1;\n    \n    // Horizontal grid lines\n    for (let i = 0; i <= 5; i++) {\n      const y = padding + (chartHeight / 5) * i;\n      ctx.beginPath();\n      ctx.moveTo(padding, y);\n      ctx.lineTo(padding + chartWidth, y);\n      ctx.stroke();\n    }\n\n    // Vertical grid lines\n    const stepX = chartWidth / (data.labels.length - 1 || 1);\n    for (let i = 0; i < data.labels.length; i++) {\n      const x = padding + stepX * i;\n      ctx.beginPath();\n      ctx.moveTo(x, padding);\n      ctx.lineTo(x, padding + chartHeight);\n      ctx.stroke();\n    }\n\n    // Draw data lines\n    data.datasets.forEach((dataset, datasetIndex) => {\n      ctx.strokeStyle = dataset.borderColor;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n\n      dataset.data.forEach((value, index) => {\n        const x = padding + stepX * index;\n        const y = padding + chartHeight - ((value - minValue) / range) * chartHeight;\n        \n        if (index === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      });\n\n      ctx.stroke();\n\n      // Draw data points\n      ctx.fillStyle = dataset.borderColor;\n      dataset.data.forEach((value, index) => {\n        const x = padding + stepX * index;\n        const y = padding + chartHeight - ((value - minValue) / range) * chartHeight;\n        \n        ctx.beginPath();\n        ctx.arc(x, y, 4, 0, 2 * Math.PI);\n        ctx.fill();\n      });\n    });\n\n    // Draw title\n    ctx.fillStyle = '#1f2937';\n    ctx.font = '16px Inter, sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText(title, canvas.width / 2, 30);\n\n    // Draw y-axis labels\n    ctx.font = '12px Inter, sans-serif';\n    ctx.textAlign = 'right';\n    for (let i = 0; i <= 5; i++) {\n      const y = padding + (chartHeight / 5) * i;\n      const value = maxValue - (range / 5) * i;\n      ctx.fillText(value.toFixed(1), padding - 10, y + 4);\n    }\n\n    // Draw x-axis labels\n    ctx.textAlign = 'center';\n    data.labels.forEach((label, index) => {\n      const x = padding + stepX * index;\n      ctx.fillText(label, x, canvas.height - 20);\n    });\n  };\n\n  const renderChart = (chartType: 'tests' | 'success' | 'performance') => {\n    if (!metrics?.trends || !chartRefs[chartType].current) return;\n\n    const canvas = chartRefs[chartType].current;\n    let chartData: ChartData;\n    let title: string;\n\n    switch (chartType) {\n      case 'tests':\n        chartData = {\n          labels: metrics.trends.testsOverTime.map(t => \n            new Date(t.timestamp).toLocaleDateString()\n          ),\n          datasets: [{\n            label: 'Tests Count',\n            data: metrics.trends.testsOverTime.map(t => t.count),\n            borderColor: '#3b82f6',\n            backgroundColor: '#3b82f6',\n          }]\n        };\n        title = 'Tests Over Time';\n        break;\n      case 'success':\n        chartData = {\n          labels: metrics.trends.successRateOverTime.map(t => \n            new Date(t.timestamp).toLocaleDateString()\n          ),\n          datasets: [{\n            label: 'Success Rate',\n            data: metrics.trends.successRateOverTime.map(t => t.rate * 100),\n            borderColor: '#10b981',\n            backgroundColor: '#10b981',\n          }]\n        };\n        title = 'Success Rate Over Time (%)';\n        break;\n      case 'performance':\n        chartData = {\n          labels: metrics.trends.performanceOverTime.map(t => \n            new Date(t.timestamp).toLocaleDateString()\n          ),\n          datasets: [{\n            label: 'Avg Response Time',\n            data: metrics.trends.performanceOverTime.map(t => t.avgTime),\n            borderColor: '#f59e0b',\n            backgroundColor: '#f59e0b',\n          }]\n        };\n        title = 'Average Response Time (ms)';\n        break;\n    }\n\n    drawLineChart(canvas, chartData, title);\n  };\n\n  useEffect(() => {\n    if (metrics?.trends) {\n      // Render all charts\n      renderChart('tests');\n      renderChart('success');\n      renderChart('performance');\n    }\n  }, [metrics?.trends]);\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      if (metrics?.trends) {\n        setTimeout(() => {\n          renderChart('tests');\n          renderChart('success');\n          renderChart('performance');\n        }, 100);\n      }\n    };\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [metrics?.trends]);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center items-center h-64\">\n        <LoadingSpinner size=\"lg\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n        <p className=\"text-red-800\">{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Controls */}\n      <div className=\"flex flex-wrap gap-4 items-center justify-between\">\n        <div className=\"flex gap-2\">\n          <Button\n            variant={period === 'hour' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setPeriod('hour')}\n          >\n            Hourly\n          </Button>\n          <Button\n            variant={period === 'day' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setPeriod('day')}\n          >\n            Daily\n          </Button>\n          <Button\n            variant={period === 'week' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setPeriod('week')}\n          >\n            Weekly\n          </Button>\n          <Button\n            variant={period === 'month' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setPeriod('month')}\n          >\n            Monthly\n          </Button>\n        </div>\n\n        <div className=\"flex gap-2\">\n          <Button\n            variant={selectedChart === 'tests' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setSelectedChart('tests')}\n          >\n            Tests\n          </Button>\n          <Button\n            variant={selectedChart === 'success' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setSelectedChart('success')}\n          >\n            Success Rate\n          </Button>\n          <Button\n            variant={selectedChart === 'performance' ? 'default' : 'outline'}\n            size=\"sm\"\n            onClick={() => setSelectedChart('performance')}\n          >\n            Performance\n          </Button>\n        </div>\n      </div>\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 gap-6\">\n        {/* Selected Chart - Large */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <canvas\n            ref={chartRefs[selectedChart]}\n            className=\"w-full\"\n            style={{ height: `${height}px` }}\n          />\n        </div>\n\n        {/* Other Charts - Small */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          {Object.entries(chartRefs).map(([chartType, ref]) => {\n            if (chartType === selectedChart) return null;\n            \n            return (\n              <div key={chartType} className=\"bg-white rounded-lg border border-gray-200 p-4\">\n                <canvas\n                  ref={ref}\n                  className=\"w-full cursor-pointer\"\n                  style={{ height: `${height / 2}px` }}\n                  onClick={() => setSelectedChart(chartType as 'tests' | 'success' | 'performance')}\n                />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Chart Legend */}\n      <div className=\"bg-gray-50 rounded-lg p-4\">\n        <div className=\"flex flex-wrap gap-6 text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-blue-500 rounded-full\"></div>\n            <span>Tests Volume</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\n            <span>Success Rate</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"w-4 h-4 bg-yellow-500 rounded-full\"></div>\n            <span>Response Time</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PerformanceCharts;"],"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","ignoreList":[]}