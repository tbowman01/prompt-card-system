3c89cfdfb855755c32b9ed4b5d5c5e94
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _TestResults = require("../../../components/TestExecution/TestResults");
const mockTestResults = [
    {
        id: 1,
        test_case_id: 1,
        test_case_name: "Friendly response test",
        status: "passed",
        actual_output: "I apologize for the inconvenience with your damaged product...",
        expected_output: "Professional and empathetic response",
        assertion_results: [
            {
                type: "contains",
                expected: "sorry",
                actual: "apologize",
                passed: true,
                description: "Should apologize"
            },
            {
                type: "not-contains",
                expected: "angry",
                actual: "I apologize for the inconvenience",
                passed: true,
                description: "Should not be angry"
            }
        ],
        execution_time_ms: 1250,
        model_used: "gpt-4",
        created_at: "2024-01-01T00:00:00Z"
    },
    {
        id: 2,
        test_case_id: 2,
        test_case_name: "Professional response test",
        status: "failed",
        actual_output: "Please contact customer service for assistance.",
        expected_output: "Detailed return policy information",
        assertion_results: [
            {
                type: "contains",
                expected: "return",
                actual: "Please contact customer service for assistance.",
                passed: false,
                description: "Should mention returns"
            }
        ],
        execution_time_ms: 950,
        model_used: "gpt-4",
        created_at: "2024-01-01T00:00:00Z",
        error_message: "Response did not contain required terms"
    },
    {
        id: 3,
        test_case_id: 3,
        test_case_name: "Error test case",
        status: "error",
        actual_output: "",
        assertion_results: [],
        execution_time_ms: 0,
        model_used: "gpt-4",
        created_at: "2024-01-01T00:00:00Z",
        error_message: "Network timeout occurred"
    }
];
describe("TestResults", ()=>{
    it("renders test results correctly", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: mockTestResults
        }));
        // Check for all test case names
        expect(_react.screen.getByText("Friendly response test")).toBeInTheDocument();
        expect(_react.screen.getByText("Professional response test")).toBeInTheDocument();
        expect(_react.screen.getByText("Error test case")).toBeInTheDocument();
    });
    it("displays passed test with correct styling", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: [
                mockTestResults[0]
            ]
        }));
        const passedTest = _react.screen.getByText("Friendly response test").closest("div");
        expect(passedTest).toHaveClass("border-green-200");
        expect(_react.screen.getByText("PASSED")).toHaveClass("bg-green-100");
    });
    it("displays failed test with correct styling", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: [
                mockTestResults[1]
            ]
        }));
        const failedTest = _react.screen.getByText("Professional response test").closest("div");
        expect(failedTest).toHaveClass("border-red-200");
        expect(_react.screen.getByText("FAILED")).toHaveClass("bg-red-100");
    });
    it("displays error test with correct styling", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: [
                mockTestResults[2]
            ]
        }));
        const errorTest = _react.screen.getByText("Error test case").closest("div");
        expect(errorTest).toHaveClass("border-yellow-200");
        expect(_react.screen.getByText("ERROR")).toHaveClass("bg-yellow-100");
    });
    it("shows execution times", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: mockTestResults
        }));
        expect(_react.screen.getByText("1.25s")).toBeInTheDocument() // 1250ms formatted
        ;
        expect(_react.screen.getByText("0.95s")).toBeInTheDocument() // 950ms formatted
        ;
    });
    it("displays model information", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: mockTestResults
        }));
        const modelBadges = _react.screen.getAllByText("gpt-4");
        expect(modelBadges).toHaveLength(3) // All tests use gpt-4
        ;
    });
    it("shows assertion results for passed tests", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: [
                mockTestResults[0]
            ]
        }));
        expect(_react.screen.getByText("Should apologize")).toBeInTheDocument();
        expect(_react.screen.getByText("Should not be angry")).toBeInTheDocument();
        // Check for passed assertion styling
        const assertions = _react.screen.getAllByText("✓");
        expect(assertions).toHaveLength(2);
    });
    it("shows assertion results for failed tests", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: [
                mockTestResults[1]
            ]
        }));
        expect(_react.screen.getByText("Should mention returns")).toBeInTheDocument();
        // Check for failed assertion styling
        expect(_react.screen.getByText("✗")).toBeInTheDocument();
    });
    it("displays error messages when present", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: [
                mockTestResults[1],
                mockTestResults[2]
            ]
        }));
        expect(_react.screen.getByText("Response did not contain required terms")).toBeInTheDocument();
        expect(_react.screen.getByText("Network timeout occurred")).toBeInTheDocument();
    });
    it("shows actual and expected output", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: [
                mockTestResults[0]
            ]
        }));
        expect(_react.screen.getByText(/I apologize for the inconvenience/)).toBeInTheDocument();
        expect(_react.screen.getByText("Professional and empathetic response")).toBeInTheDocument();
    });
    it("handles empty results gracefully", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: []
        }));
        expect(_react.screen.getByText("No test results available")).toBeInTheDocument();
    });
    it("formats execution time correctly", ()=>{
        const quickTest = {
            ...mockTestResults[0],
            execution_time_ms: 150
        };
        const slowTest = {
            ...mockTestResults[0],
            execution_time_ms: 5500
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: [
                quickTest,
                slowTest
            ]
        }));
        expect(_react.screen.getByText("150ms")).toBeInTheDocument();
        expect(_react.screen.getByText("5.5s")).toBeInTheDocument();
    });
    it("provides summary statistics", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: mockTestResults
        }));
        // Should show overall statistics
        expect(_react.screen.getByText(/Total: 3/)).toBeInTheDocument();
        expect(_react.screen.getByText(/Passed: 1/)).toBeInTheDocument();
        expect(_react.screen.getByText(/Failed: 1/)).toBeInTheDocument();
        expect(_react.screen.getByText(/Errors: 1/)).toBeInTheDocument();
    });
    it("is accessible with proper ARIA attributes", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: mockTestResults
        }));
        // Check for proper headings
        expect(_react.screen.getByRole("heading", {
            level: 3
        })).toBeInTheDocument();
        // Check for list structure
        expect(_react.screen.getByRole("list")).toBeInTheDocument();
        // Check for proper status indicators
        const statusElements = _react.screen.getAllByText(/PASSED|FAILED|ERROR/);
        statusElements.forEach((element)=>{
            expect(element).toHaveAttribute("aria-label");
        });
    });
    it("allows expanding/collapsing detailed results", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: [
                mockTestResults[0]
            ]
        }));
        // Should have collapsible sections for detailed output
        const detailButtons = _react.screen.getAllByRole("button", {
            name: /details|expand|show/i
        });
        expect(detailButtons.length).toBeGreaterThan(0);
    });
    it("highlights search terms when provided", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: mockTestResults,
            searchTerm: "apologize"
        }));
        // Should highlight the search term in results
        const highlighted = _react.screen.getByText("apologize");
        expect(highlighted).toHaveClass("bg-yellow-200");
    });
    it("sorts results by status correctly", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_TestResults.TestResults, {
            results: mockTestResults,
            sortBy: "status"
        }));
        // Get all test case names in order
        const testNames = _react.screen.getAllByText(/test$/);
        // Should be sorted: errors first, then failed, then passed
        expect(testNames[0]).toHaveTextContent("Error test case");
        expect(testNames[1]).toHaveTextContent("Professional response test");
        expect(testNames[2]).toHaveTextContent("Friendly response test");
    });
});

//# sourceMappingURL=data:application/json;base64,