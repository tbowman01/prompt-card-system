{"version":3,"sources":["/workspaces/prompt-card-system/frontend/src/__tests__/components/TestExecution/TestResults.test.tsx"],"sourcesContent":["import { render, screen } from '@testing-library/react'\nimport { TestResults } from '@/components/TestExecution/TestResults'\nimport { TestResult } from '@/types'\n\nconst mockTestResults: TestResult[] = [\n  {\n    id: 1,\n    test_case_id: 1,\n    test_case_name: 'Friendly response test',\n    status: 'passed',\n    actual_output: 'I apologize for the inconvenience with your damaged product...',\n    expected_output: 'Professional and empathetic response',\n    assertion_results: [\n      {\n        type: 'contains',\n        expected: 'sorry',\n        actual: 'apologize',\n        passed: true,\n        description: 'Should apologize',\n      },\n      {\n        type: 'not-contains',\n        expected: 'angry',\n        actual: 'I apologize for the inconvenience',\n        passed: true,\n        description: 'Should not be angry',\n      },\n    ],\n    execution_time_ms: 1250,\n    model_used: 'gpt-4',\n    created_at: '2024-01-01T00:00:00Z',\n  },\n  {\n    id: 2,\n    test_case_id: 2,\n    test_case_name: 'Professional response test',\n    status: 'failed',\n    actual_output: 'Please contact customer service for assistance.',\n    expected_output: 'Detailed return policy information',\n    assertion_results: [\n      {\n        type: 'contains',\n        expected: 'return',\n        actual: 'Please contact customer service for assistance.',\n        passed: false,\n        description: 'Should mention returns',\n      },\n    ],\n    execution_time_ms: 950,\n    model_used: 'gpt-4',\n    created_at: '2024-01-01T00:00:00Z',\n    error_message: 'Response did not contain required terms',\n  },\n  {\n    id: 3,\n    test_case_id: 3,\n    test_case_name: 'Error test case',\n    status: 'error',\n    actual_output: '',\n    assertion_results: [],\n    execution_time_ms: 0,\n    model_used: 'gpt-4',\n    created_at: '2024-01-01T00:00:00Z',\n    error_message: 'Network timeout occurred',\n  },\n]\n\ndescribe('TestResults', () => {\n  it('renders test results correctly', () => {\n    render(<TestResults results={mockTestResults} />)\n\n    // Check for all test case names\n    expect(screen.getByText('Friendly response test')).toBeInTheDocument()\n    expect(screen.getByText('Professional response test')).toBeInTheDocument()\n    expect(screen.getByText('Error test case')).toBeInTheDocument()\n  })\n\n  it('displays passed test with correct styling', () => {\n    render(<TestResults results={[mockTestResults[0]]} />)\n\n    const passedTest = screen.getByText('Friendly response test').closest('div')\n    expect(passedTest).toHaveClass('border-green-200')\n    expect(screen.getByText('PASSED')).toHaveClass('bg-green-100')\n  })\n\n  it('displays failed test with correct styling', () => {\n    render(<TestResults results={[mockTestResults[1]]} />)\n\n    const failedTest = screen.getByText('Professional response test').closest('div')\n    expect(failedTest).toHaveClass('border-red-200')\n    expect(screen.getByText('FAILED')).toHaveClass('bg-red-100')\n  })\n\n  it('displays error test with correct styling', () => {\n    render(<TestResults results={[mockTestResults[2]]} />)\n\n    const errorTest = screen.getByText('Error test case').closest('div')\n    expect(errorTest).toHaveClass('border-yellow-200')\n    expect(screen.getByText('ERROR')).toHaveClass('bg-yellow-100')\n  })\n\n  it('shows execution times', () => {\n    render(<TestResults results={mockTestResults} />)\n\n    expect(screen.getByText('1.25s')).toBeInTheDocument() // 1250ms formatted\n    expect(screen.getByText('0.95s')).toBeInTheDocument() // 950ms formatted\n  })\n\n  it('displays model information', () => {\n    render(<TestResults results={mockTestResults} />)\n\n    const modelBadges = screen.getAllByText('gpt-4')\n    expect(modelBadges).toHaveLength(3) // All tests use gpt-4\n  })\n\n  it('shows assertion results for passed tests', () => {\n    render(<TestResults results={[mockTestResults[0]]} />)\n\n    expect(screen.getByText('Should apologize')).toBeInTheDocument()\n    expect(screen.getByText('Should not be angry')).toBeInTheDocument()\n    \n    // Check for passed assertion styling\n    const assertions = screen.getAllByText('✓')\n    expect(assertions).toHaveLength(2)\n  })\n\n  it('shows assertion results for failed tests', () => {\n    render(<TestResults results={[mockTestResults[1]]} />)\n\n    expect(screen.getByText('Should mention returns')).toBeInTheDocument()\n    \n    // Check for failed assertion styling\n    expect(screen.getByText('✗')).toBeInTheDocument()\n  })\n\n  it('displays error messages when present', () => {\n    render(<TestResults results={[mockTestResults[1], mockTestResults[2]]} />)\n\n    expect(screen.getByText('Response did not contain required terms')).toBeInTheDocument()\n    expect(screen.getByText('Network timeout occurred')).toBeInTheDocument()\n  })\n\n  it('shows actual and expected output', () => {\n    render(<TestResults results={[mockTestResults[0]]} />)\n\n    expect(screen.getByText(/I apologize for the inconvenience/)).toBeInTheDocument()\n    expect(screen.getByText('Professional and empathetic response')).toBeInTheDocument()\n  })\n\n  it('handles empty results gracefully', () => {\n    render(<TestResults results={[]} />)\n\n    expect(screen.getByText('No test results available')).toBeInTheDocument()\n  })\n\n  it('formats execution time correctly', () => {\n    const quickTest: TestResult = {\n      ...mockTestResults[0],\n      execution_time_ms: 150, // Should show as 150ms\n    }\n\n    const slowTest: TestResult = {\n      ...mockTestResults[0],\n      execution_time_ms: 5500, // Should show as 5.5s\n    }\n\n    render(<TestResults results={[quickTest, slowTest]} />)\n\n    expect(screen.getByText('150ms')).toBeInTheDocument()\n    expect(screen.getByText('5.5s')).toBeInTheDocument()\n  })\n\n  it('provides summary statistics', () => {\n    render(<TestResults results={mockTestResults} />)\n\n    // Should show overall statistics\n    expect(screen.getByText(/Total: 3/)).toBeInTheDocument()\n    expect(screen.getByText(/Passed: 1/)).toBeInTheDocument()\n    expect(screen.getByText(/Failed: 1/)).toBeInTheDocument()\n    expect(screen.getByText(/Errors: 1/)).toBeInTheDocument()\n  })\n\n  it('is accessible with proper ARIA attributes', () => {\n    render(<TestResults results={mockTestResults} />)\n\n    // Check for proper headings\n    expect(screen.getByRole('heading', { level: 3 })).toBeInTheDocument()\n    \n    // Check for list structure\n    expect(screen.getByRole('list')).toBeInTheDocument()\n    \n    // Check for proper status indicators\n    const statusElements = screen.getAllByText(/PASSED|FAILED|ERROR/)\n    statusElements.forEach(element => {\n      expect(element).toHaveAttribute('aria-label')\n    })\n  })\n\n  it('allows expanding/collapsing detailed results', () => {\n    render(<TestResults results={[mockTestResults[0]]} />)\n\n    // Should have collapsible sections for detailed output\n    const detailButtons = screen.getAllByRole('button', { name: /details|expand|show/i })\n    expect(detailButtons.length).toBeGreaterThan(0)\n  })\n\n  it('highlights search terms when provided', () => {\n    render(<TestResults results={mockTestResults} searchTerm=\"apologize\" />)\n\n    // Should highlight the search term in results\n    const highlighted = screen.getByText('apologize')\n    expect(highlighted).toHaveClass('bg-yellow-200')\n  })\n\n  it('sorts results by status correctly', () => {\n    render(<TestResults results={mockTestResults} sortBy=\"status\" />)\n\n    // Get all test case names in order\n    const testNames = screen.getAllByText(/test$/)\n    \n    // Should be sorted: errors first, then failed, then passed\n    expect(testNames[0]).toHaveTextContent('Error test case')\n    expect(testNames[1]).toHaveTextContent('Professional response test')\n    expect(testNames[2]).toHaveTextContent('Friendly response test')\n  })\n})"],"names":["mockTestResults","id","test_case_id","test_case_name","status","actual_output","expected_output","assertion_results","type","expected","actual","passed","description","execution_time_ms","model_used","created_at","error_message","describe","it","render","TestResults","results","expect","screen","getByText","toBeInTheDocument","passedTest","closest","toHaveClass","failedTest","errorTest","modelBadges","getAllByText","toHaveLength","assertions","quickTest","slowTest","getByRole","level","statusElements","forEach","element","toHaveAttribute","detailButtons","getAllByRole","name","length","toBeGreaterThan","searchTerm","highlighted","sortBy","testNames","toHaveTextContent"],"mappings":"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"}