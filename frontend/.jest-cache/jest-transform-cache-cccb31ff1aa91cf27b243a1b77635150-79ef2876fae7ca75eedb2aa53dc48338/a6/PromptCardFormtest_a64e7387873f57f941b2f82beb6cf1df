5bcdad965024dd81af4e91138e71fa71
"use strict";
// Mock Next.js router
jest.mock("next/navigation", ()=>({
        useRouter: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _navigation = require("next/navigation");
const _PromptCardForm = /*#__PURE__*/ _interop_require_default(require("../../../components/PromptCard/PromptCardForm"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockRouter = {
    push: jest.fn(),
    replace: jest.fn(),
    back: jest.fn()
};
const mockUseRouter = _navigation.useRouter;
describe("PromptCardForm", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        mockUseRouter.mockReturnValue(mockRouter);
    });
    it("renders create form correctly", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {}));
        expect(_react.screen.getByText("Create New Prompt Card")).toBeInTheDocument();
        expect(_react.screen.getByText("Create a new prompt template with test cases")).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/title/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/description/i)).toBeInTheDocument();
        expect(_react.screen.getByLabelText(/template/i)).toBeInTheDocument();
        expect(_react.screen.getByRole("button", {
            name: /create card/i
        })).toBeInTheDocument();
    });
    it("renders edit form with initial data", ()=>{
        const initialData = {
            id: 1,
            title: "Test Card",
            description: "Test description",
            prompt_template: "Hello {{name}}",
            variables: [
                "name"
            ],
            created_at: "2024-01-01T00:00:00Z",
            updated_at: "2024-01-01T00:00:00Z"
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {
            cardId: 1,
            initialData: initialData
        }));
        expect(_react.screen.getByText("Edit Prompt Card")).toBeInTheDocument();
        expect(_react.screen.getByDisplayValue("Test Card")).toBeInTheDocument();
        expect(_react.screen.getByDisplayValue("Test description")).toBeInTheDocument();
        expect(_react.screen.getByDisplayValue("Hello {{name}}")).toBeInTheDocument();
        expect(_react.screen.getByText("name")).toBeInTheDocument() // Variable badge
        ;
        expect(_react.screen.getByRole("button", {
            name: /update card/i
        })).toBeInTheDocument();
    });
    it("extracts variables from prompt template", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {}));
        const templateInput = _react.screen.getByLabelText(/template/i);
        _react.fireEvent.change(templateInput, {
            target: {
                value: "Hello {{name}}, you are {{age}} years old. Welcome {{name}}!"
            }
        });
        // Should show unique variables
        expect(_react.screen.getByText("name")).toBeInTheDocument();
        expect(_react.screen.getByText("age")).toBeInTheDocument();
        // Should only show unique variables (name appears twice but should only show once)
        const nameBadges = _react.screen.getAllByText("name");
        expect(nameBadges).toHaveLength(1);
    });
    it("shows validation errors for empty required fields", async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {}));
        const submitButton = _react.screen.getByRole("button", {
            name: /create card/i
        });
        _react.fireEvent.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Title and prompt template are required")).toBeInTheDocument();
        });
    });
    it("submits form successfully for new card", async ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {}));
        // Fill out the form
        _react.fireEvent.change(_react.screen.getByLabelText(/title/i), {
            target: {
                value: "New Test Card"
            }
        });
        _react.fireEvent.change(_react.screen.getByLabelText(/description/i), {
            target: {
                value: "Test description"
            }
        });
        _react.fireEvent.change(_react.screen.getByLabelText(/template/i), {
            target: {
                value: "Hello {{name}}"
            }
        });
        const submitButton = _react.screen.getByRole("button", {
            name: /create card/i
        });
        _react.fireEvent.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(mockRouter.push).toHaveBeenCalledWith("/prompt-cards");
        });
    });
    it("handles form submission errors", async ()=>{
        // Mock fetch to return error
        global.fetch = jest.fn().mockResolvedValueOnce({
            json: async ()=>({
                    success: false,
                    error: "Server error"
                })
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {}));
        // Fill out the form
        _react.fireEvent.change(_react.screen.getByLabelText(/title/i), {
            target: {
                value: "Test Card"
            }
        });
        _react.fireEvent.change(_react.screen.getByLabelText(/template/i), {
            target: {
                value: "Hello {{name}}"
            }
        });
        const submitButton = _react.screen.getByRole("button", {
            name: /create card/i
        });
        _react.fireEvent.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Server error")).toBeInTheDocument();
        });
    });
    it("handles network errors", async ()=>{
        // Mock fetch to throw network error
        global.fetch = jest.fn().mockRejectedValueOnce(new Error("Network error"));
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {}));
        // Fill out the form
        _react.fireEvent.change(_react.screen.getByLabelText(/title/i), {
            target: {
                value: "Test Card"
            }
        });
        _react.fireEvent.change(_react.screen.getByLabelText(/template/i), {
            target: {
                value: "Hello {{name}}"
            }
        });
        const submitButton = _react.screen.getByRole("button", {
            name: /create card/i
        });
        _react.fireEvent.click(submitButton);
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByText("Network error: Failed to save prompt card")).toBeInTheDocument();
        });
    });
    it("navigates back on cancel", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {}));
        const cancelButton = _react.screen.getByRole("button", {
            name: /cancel/i
        });
        _react.fireEvent.click(cancelButton);
        expect(mockRouter.push).toHaveBeenCalledWith("/prompt-cards");
    });
    it("loads existing card data when cardId is provided", async ()=>{
        global.fetch = jest.fn().mockResolvedValueOnce({
            json: async ()=>({
                    success: true,
                    data: {
                        id: 1,
                        title: "Loaded Card",
                        description: "Loaded description",
                        prompt_template: "Hello {{user}}",
                        variables: [
                            "user"
                        ],
                        test_cases: []
                    }
                })
        });
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {
            cardId: 1
        }));
        await (0, _react.waitFor)(()=>{
            expect(_react.screen.getByDisplayValue("Loaded Card")).toBeInTheDocument();
            expect(_react.screen.getByDisplayValue("Loaded description")).toBeInTheDocument();
            expect(_react.screen.getByDisplayValue("Hello {{user}}")).toBeInTheDocument();
        });
    });
    it("shows loading state while submitting", async ()=>{
        // Mock fetch with delay
        global.fetch = jest.fn().mockImplementation(()=>new Promise((resolve)=>setTimeout(()=>resolve({
                        json: async ()=>({
                                success: true,
                                data: {}
                            })
                    }), 100)));
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {}));
        // Fill out form
        _react.fireEvent.change(_react.screen.getByLabelText(/title/i), {
            target: {
                value: "Test Card"
            }
        });
        _react.fireEvent.change(_react.screen.getByLabelText(/template/i), {
            target: {
                value: "Hello {{name}}"
            }
        });
        const submitButton = _react.screen.getByRole("button", {
            name: /create card/i
        });
        _react.fireEvent.click(submitButton);
        // Should show loading spinner in button
        expect(submitButton).toBeDisabled();
        expect(submitButton.querySelector(".animate-spin")).toBeInTheDocument();
    });
    it("shows test runner button for existing cards with test cases", ()=>{
        const initialData = {
            id: 1,
            title: "Test Card",
            prompt_template: "Hello {{name}}",
            variables: [
                "name"
            ],
            created_at: "2024-01-01T00:00:00Z",
            updated_at: "2024-01-01T00:00:00Z",
            test_cases: [
                {
                    id: 1,
                    prompt_card_id: 1,
                    name: "Test case 1",
                    input_variables: {
                        name: "John"
                    },
                    assertions: [],
                    created_at: "2024-01-01T00:00:00Z"
                },
                {
                    id: 2,
                    prompt_card_id: 1,
                    name: "Test case 2",
                    input_variables: {
                        name: "Jane"
                    },
                    assertions: [],
                    created_at: "2024-01-01T00:00:00Z"
                }
            ]
        };
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {
            cardId: 1,
            initialData: initialData
        }));
        const testButton = _react.screen.getByRole("button", {
            name: /run tests \(2\)/i
        });
        expect(testButton).toBeInTheDocument();
        _react.fireEvent.click(testButton);
        expect(mockRouter.push).toHaveBeenCalledWith("/prompt-cards/1/test");
    });
    it("shows helpful tip for new cards", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PromptCardForm.default, {}));
        expect(_react.screen.getByText(/After creating the prompt card/)).toBeInTheDocument();
        expect(_react.screen.getByText(/you'll be able to add test cases/)).toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,