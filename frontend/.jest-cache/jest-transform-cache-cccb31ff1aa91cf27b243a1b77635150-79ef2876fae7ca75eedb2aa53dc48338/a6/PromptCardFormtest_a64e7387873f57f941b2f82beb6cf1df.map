{"version":3,"sources":["/workspaces/prompt-card-system/frontend/src/__tests__/components/PromptCard/PromptCardForm.test.tsx"],"sourcesContent":["import { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { useRouter } from 'next/navigation'\nimport PromptCardForm from '@/components/PromptCard/PromptCardForm'\nimport { PromptCard } from '@/types'\n\n// Mock Next.js router\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(),\n}))\n\nconst mockRouter = {\n  push: jest.fn(),\n  replace: jest.fn(),\n  back: jest.fn(),\n}\n\nconst mockUseRouter = useRouter as jest.MockedFunction<typeof useRouter>\n\ndescribe('PromptCardForm', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockUseRouter.mockReturnValue(mockRouter)\n  })\n\n  it('renders create form correctly', () => {\n    render(<PromptCardForm />)\n\n    expect(screen.getByText('Create New Prompt Card')).toBeInTheDocument()\n    expect(screen.getByText('Create a new prompt template with test cases')).toBeInTheDocument()\n    expect(screen.getByLabelText(/title/i)).toBeInTheDocument()\n    expect(screen.getByLabelText(/description/i)).toBeInTheDocument()\n    expect(screen.getByLabelText(/template/i)).toBeInTheDocument()\n    expect(screen.getByRole('button', { name: /create card/i })).toBeInTheDocument()\n  })\n\n  it('renders edit form with initial data', () => {\n    const initialData: PromptCard = {\n      id: 1,\n      title: 'Test Card',\n      description: 'Test description',\n      prompt_template: 'Hello {{name}}',\n      variables: ['name'],\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z',\n    }\n\n    render(<PromptCardForm cardId={1} initialData={initialData} />)\n\n    expect(screen.getByText('Edit Prompt Card')).toBeInTheDocument()\n    expect(screen.getByDisplayValue('Test Card')).toBeInTheDocument()\n    expect(screen.getByDisplayValue('Test description')).toBeInTheDocument()\n    expect(screen.getByDisplayValue('Hello {{name}}')).toBeInTheDocument()\n    expect(screen.getByText('name')).toBeInTheDocument() // Variable badge\n    expect(screen.getByRole('button', { name: /update card/i })).toBeInTheDocument()\n  })\n\n  it('extracts variables from prompt template', () => {\n    render(<PromptCardForm />)\n\n    const templateInput = screen.getByLabelText(/template/i)\n    fireEvent.change(templateInput, {\n      target: { value: 'Hello {{name}}, you are {{age}} years old. Welcome {{name}}!' }\n    })\n\n    // Should show unique variables\n    expect(screen.getByText('name')).toBeInTheDocument()\n    expect(screen.getByText('age')).toBeInTheDocument()\n    \n    // Should only show unique variables (name appears twice but should only show once)\n    const nameBadges = screen.getAllByText('name')\n    expect(nameBadges).toHaveLength(1)\n  })\n\n  it('shows validation errors for empty required fields', async () => {\n    render(<PromptCardForm />)\n\n    const submitButton = screen.getByRole('button', { name: /create card/i })\n    fireEvent.click(submitButton)\n\n    await waitFor(() => {\n      expect(screen.getByText('Title and prompt template are required')).toBeInTheDocument()\n    })\n  })\n\n  it('submits form successfully for new card', async () => {\n    render(<PromptCardForm />)\n\n    // Fill out the form\n    fireEvent.change(screen.getByLabelText(/title/i), {\n      target: { value: 'New Test Card' }\n    })\n    fireEvent.change(screen.getByLabelText(/description/i), {\n      target: { value: 'Test description' }\n    })\n    fireEvent.change(screen.getByLabelText(/template/i), {\n      target: { value: 'Hello {{name}}' }\n    })\n\n    const submitButton = screen.getByRole('button', { name: /create card/i })\n    fireEvent.click(submitButton)\n\n    await waitFor(() => {\n      expect(mockRouter.push).toHaveBeenCalledWith('/prompt-cards')\n    })\n  })\n\n  it('handles form submission errors', async () => {\n    // Mock fetch to return error\n    global.fetch = jest.fn().mockResolvedValueOnce({\n      json: async () => ({ success: false, error: 'Server error' }),\n    })\n\n    render(<PromptCardForm />)\n\n    // Fill out the form\n    fireEvent.change(screen.getByLabelText(/title/i), {\n      target: { value: 'Test Card' }\n    })\n    fireEvent.change(screen.getByLabelText(/template/i), {\n      target: { value: 'Hello {{name}}' }\n    })\n\n    const submitButton = screen.getByRole('button', { name: /create card/i })\n    fireEvent.click(submitButton)\n\n    await waitFor(() => {\n      expect(screen.getByText('Server error')).toBeInTheDocument()\n    })\n  })\n\n  it('handles network errors', async () => {\n    // Mock fetch to throw network error\n    global.fetch = jest.fn().mockRejectedValueOnce(new Error('Network error'))\n\n    render(<PromptCardForm />)\n\n    // Fill out the form\n    fireEvent.change(screen.getByLabelText(/title/i), {\n      target: { value: 'Test Card' }\n    })\n    fireEvent.change(screen.getByLabelText(/template/i), {\n      target: { value: 'Hello {{name}}' }\n    })\n\n    const submitButton = screen.getByRole('button', { name: /create card/i })\n    fireEvent.click(submitButton)\n\n    await waitFor(() => {\n      expect(screen.getByText('Network error: Failed to save prompt card')).toBeInTheDocument()\n    })\n  })\n\n  it('navigates back on cancel', () => {\n    render(<PromptCardForm />)\n\n    const cancelButton = screen.getByRole('button', { name: /cancel/i })\n    fireEvent.click(cancelButton)\n\n    expect(mockRouter.push).toHaveBeenCalledWith('/prompt-cards')\n  })\n\n  it('loads existing card data when cardId is provided', async () => {\n    global.fetch = jest.fn().mockResolvedValueOnce({\n      json: async () => ({\n        success: true,\n        data: {\n          id: 1,\n          title: 'Loaded Card',\n          description: 'Loaded description',\n          prompt_template: 'Hello {{user}}',\n          variables: ['user'],\n          test_cases: [],\n        },\n      }),\n    })\n\n    render(<PromptCardForm cardId={1} />)\n\n    await waitFor(() => {\n      expect(screen.getByDisplayValue('Loaded Card')).toBeInTheDocument()\n      expect(screen.getByDisplayValue('Loaded description')).toBeInTheDocument()\n      expect(screen.getByDisplayValue('Hello {{user}}')).toBeInTheDocument()\n    })\n  })\n\n  it('shows loading state while submitting', async () => {\n    // Mock fetch with delay\n    global.fetch = jest.fn().mockImplementation(() => \n      new Promise(resolve => \n        setTimeout(() => resolve({\n          json: async () => ({ success: true, data: {} }),\n        }), 100)\n      )\n    )\n\n    render(<PromptCardForm />)\n\n    // Fill out form\n    fireEvent.change(screen.getByLabelText(/title/i), {\n      target: { value: 'Test Card' }\n    })\n    fireEvent.change(screen.getByLabelText(/template/i), {\n      target: { value: 'Hello {{name}}' }\n    })\n\n    const submitButton = screen.getByRole('button', { name: /create card/i })\n    fireEvent.click(submitButton)\n\n    // Should show loading spinner in button\n    expect(submitButton).toBeDisabled()\n    expect(submitButton.querySelector('.animate-spin')).toBeInTheDocument()\n  })\n\n  it('shows test runner button for existing cards with test cases', () => {\n    const initialData: PromptCard = {\n      id: 1,\n      title: 'Test Card',\n      prompt_template: 'Hello {{name}}',\n      variables: ['name'],\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z',\n      test_cases: [\n        {\n          id: 1,\n          prompt_card_id: 1,\n          name: 'Test case 1',\n          input_variables: { name: 'John' },\n          assertions: [],\n          created_at: '2024-01-01T00:00:00Z',\n        },\n        {\n          id: 2,\n          prompt_card_id: 1,\n          name: 'Test case 2',\n          input_variables: { name: 'Jane' },\n          assertions: [],\n          created_at: '2024-01-01T00:00:00Z',\n        },\n      ],\n    }\n\n    render(<PromptCardForm cardId={1} initialData={initialData} />)\n\n    const testButton = screen.getByRole('button', { name: /run tests \\(2\\)/i })\n    expect(testButton).toBeInTheDocument()\n    \n    fireEvent.click(testButton)\n    expect(mockRouter.push).toHaveBeenCalledWith('/prompt-cards/1/test')\n  })\n\n  it('shows helpful tip for new cards', () => {\n    render(<PromptCardForm />)\n\n    expect(screen.getByText(/After creating the prompt card/)).toBeInTheDocument()\n    expect(screen.getByText(/you'll be able to add test cases/)).toBeInTheDocument()\n  })\n})"],"names":["jest","mock","useRouter","fn","mockRouter","push","replace","back","mockUseRouter","describe","beforeEach","clearAllMocks","mockReturnValue","it","render","PromptCardForm","expect","screen","getByText","toBeInTheDocument","getByLabelText","getByRole","name","initialData","id","title","description","prompt_template","variables","created_at","updated_at","cardId","getByDisplayValue","templateInput","fireEvent","change","target","value","nameBadges","getAllByText","toHaveLength","submitButton","click","waitFor","toHaveBeenCalledWith","global","fetch","mockResolvedValueOnce","json","success","error","mockRejectedValueOnce","Error","cancelButton","data","test_cases","mockImplementation","Promise","resolve","setTimeout","toBeDisabled","querySelector","prompt_card_id","input_variables","assertions","testButton"],"mappings":"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"}