{"version":3,"sources":["/workspaces/prompt-card-system/frontend/src/__tests__/integration/api-integration.test.ts"],"sourcesContent":["import { api } from '@/lib/api'\nimport { http, HttpResponse } from 'msw'\nimport { server } from '../mocks/server'\n\ndescribe('API Integration Tests', () => {\n  describe('Prompt Cards API', () => {\n    it('fetches prompt cards with pagination', async () => {\n      const result = await api.getPromptCards({ page: 1, limit: 10 })\n\n      expect(result.prompt_cards).toBeDefined()\n      expect(result.pagination).toBeDefined()\n      expect(result.pagination.page).toBe(1)\n      expect(result.pagination.limit).toBe(10)\n      expect(Array.isArray(result.prompt_cards)).toBe(true)\n    })\n\n    it('searches prompt cards by title', async () => {\n      const result = await api.getPromptCards({ search: 'Customer' })\n\n      expect(result.prompt_cards).toBeDefined()\n      expect(result.prompt_cards.length).toBeGreaterThan(0)\n      expect(result.prompt_cards[0].title).toContain('Customer')\n    })\n\n    it('creates a new prompt card', async () => {\n      const newCard = {\n        title: 'Integration Test Card',\n        description: 'Test description',\n        prompt_template: 'Hello {{name}}',\n        variables: ['name'],\n      }\n\n      const result = await api.createPromptCard(newCard)\n\n      expect(result.id).toBeDefined()\n      expect(result.title).toBe(newCard.title)\n      expect(result.prompt_template).toBe(newCard.prompt_template)\n      expect(result.variables).toEqual(newCard.variables)\n    })\n\n    it('fetches a specific prompt card', async () => {\n      const result = await api.getPromptCard(1)\n\n      expect(result.id).toBe(1)\n      expect(result.title).toBeDefined()\n      expect(result.prompt_template).toBeDefined()\n      expect(result.test_cases).toBeDefined()\n    })\n\n    it('updates an existing prompt card', async () => {\n      const updateData = {\n        title: 'Updated Title',\n        description: 'Updated description',\n      }\n\n      const result = await api.updatePromptCard(1, updateData)\n\n      expect(result.title).toBe(updateData.title)\n      expect(result.description).toBe(updateData.description)\n    })\n\n    it('deletes a prompt card', async () => {\n      const result = await api.deletePromptCard(1)\n      expect(result.message).toContain('deleted successfully')\n    })\n\n    it('handles 404 errors for non-existent cards', async () => {\n      await expect(api.getPromptCard(99999)).rejects.toThrow('Prompt card not found')\n    })\n  })\n\n  describe('Test Cases API', () => {\n    it('fetches test cases for a prompt card', async () => {\n      const result = await api.getTestCases(1)\n\n      expect(Array.isArray(result)).toBe(true)\n      expect(result.length).toBeGreaterThan(0)\n      expect(result[0].prompt_card_id).toBe(1)\n    })\n\n    it('creates a new test case', async () => {\n      const newTestCase = {\n        prompt_card_id: 1,\n        name: 'Integration test case',\n        input_variables: { name: 'John' },\n        expected_output: 'Hello John',\n        assertions: [\n          { type: 'contains', value: 'John', description: 'Should contain name' },\n        ],\n      }\n\n      const result = await api.createTestCase(newTestCase)\n\n      expect(result.id).toBeDefined()\n      expect(result.name).toBe(newTestCase.name)\n      expect(result.input_variables).toEqual(newTestCase.input_variables)\n    })\n  })\n\n  describe('Test Execution API', () => {\n    it('starts test execution', async () => {\n      const testData = {\n        prompt_card_id: 1,\n        test_case_ids: [1, 2],\n        model: 'gpt-4',\n      }\n\n      const result = await api.runTests(testData)\n\n      expect(result.execution_id).toBeDefined()\n      expect(result.status).toBe('started')\n    })\n\n    it('fetches test execution status', async () => {\n      const result = await api.getTestExecution('exec-123')\n\n      expect(result.id).toBe('exec-123')\n      expect(result.status).toBeDefined()\n      expect(result.prompt_card_id).toBeDefined()\n    })\n\n    it('runs a single test case', async () => {\n      const result = await api.runSingleTest(1, { model: 'gpt-4' })\n\n      expect(result).toBeDefined()\n    })\n  })\n\n  describe('Analytics API', () => {\n    it('fetches dashboard metrics', async () => {\n      const result = await api.getDashboardMetrics()\n\n      expect(result.realtime).toBeDefined()\n      expect(result.historical).toBeDefined()\n      expect(result.trends).toBeDefined()\n      expect(result.insights).toBeDefined()\n\n      // Verify realtime metrics structure\n      expect(result.realtime.activeTests).toBeDefined()\n      expect(result.realtime.testsPerSecond).toBeDefined()\n      expect(result.realtime.successRate).toBeDefined()\n\n      // Verify historical metrics\n      expect(result.historical.totalTests).toBeDefined()\n      expect(result.historical.mostUsedModels).toBeDefined()\n      expect(Array.isArray(result.historical.mostUsedModels)).toBe(true)\n    })\n\n    it('records test execution analytics', async () => {\n      const analyticsData = {\n        executionId: 'exec-123',\n        promptCardId: 1,\n        testCaseIds: [1, 2],\n        model: 'gpt-4',\n        duration: 2500,\n        success: true,\n      }\n\n      const result = await api.recordTestExecution(analyticsData)\n      expect(result).toBeDefined()\n    })\n  })\n\n  describe('YAML Operations API', () => {\n    it('validates YAML content', async () => {\n      const yamlContent = `\ntitle: Test Card\ndescription: Test description\nprompt_template: Hello {{name}}\nvariables:\n  - name\ntest_cases:\n  - name: Test case 1\n    input_variables:\n      name: John\n    expected_output: Hello John\n`\n\n      const result = await api.validateYAML(yamlContent)\n      expect(result.valid).toBe(true)\n    })\n\n    it('imports YAML content', async () => {\n      const yamlContent = `\ntitle: Imported Card\ndescription: Imported from YAML\nprompt_template: Hi {{user}}\nvariables:\n  - user\n`\n\n      const result = await api.importYAML(yamlContent)\n      expect(result.imported).toBeDefined()\n    })\n\n    it('exports YAML for a specific card', async () => {\n      const response = await api.exportYAML(1)\n      expect(response).toBeInstanceOf(Response)\n    })\n  })\n\n  describe('Health Check API', () => {\n    it('fetches system health status', async () => {\n      const result = await api.getHealth()\n\n      expect(result.status).toBe('healthy')\n      expect(result.timestamp).toBeDefined()\n      expect(result.services).toBeDefined()\n      expect(result.services.database).toBeDefined()\n      expect(result.services.ollama).toBeDefined()\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('handles server errors gracefully', async () => {\n      // Override handler to return error\n      server.use(\n        http.get('http://localhost:3001/api/error', () => {\n          return HttpResponse.json({ success: false, error: 'Server error' }, { status: 500 })\n        })\n      )\n\n      await expect(api.getHealth()).rejects.toThrow()\n    })\n\n    it('handles network errors', async () => {\n      // Override handler to simulate network error\n      server.use(\n        http.get('http://localhost:3001/api/network-error', () => {\n          return HttpResponse.error()\n        })\n      )\n\n      await expect(\n        fetch('http://localhost:3001/api/network-error')\n      ).rejects.toThrow()\n    })\n\n    it('handles malformed JSON responses', async () => {\n      server.use(\n        http.get('http://localhost:3001/api/malformed', () => {\n          return new Response('invalid json', {\n            headers: { 'Content-Type': 'application/json' }\n          })\n        })\n      )\n\n      await expect(\n        fetch('http://localhost:3001/api/malformed').then(r => r.json())\n      ).rejects.toThrow()\n    })\n  })\n\n  describe('Rate Limiting and Retry Logic', () => {\n    it('handles rate limiting responses', async () => {\n      let callCount = 0\n      server.use(\n        http.get('http://localhost:3001/api/rate-limited', () => {\n          callCount++\n          if (callCount <= 2) {\n            return HttpResponse.json({ success: false, error: 'Rate limited' }, { status: 429 })\n          }\n          return HttpResponse.json({ success: true, data: 'success' })\n        })\n      )\n\n      // This would require implementing retry logic in the API client\n      // For now, we just test that rate limiting is handled\n      try {\n        await fetch('http://localhost:3001/api/rate-limited')\n      } catch (error) {\n        // Expected to fail on first attempts\n      }\n    })\n  })\n\n  describe('Authentication and Authorization', () => {\n    it('includes authorization headers when provided', async () => {\n      // This test would be relevant when auth is implemented\n      const customHeaders = {\n        'Authorization': 'Bearer test-token',\n      }\n\n      // Mock implementation would verify headers are passed through\n      expect(customHeaders['Authorization']).toBe('Bearer test-token')\n    })\n  })\n})"],"names":["describe","it","result","api","getPromptCards","page","limit","expect","prompt_cards","toBeDefined","pagination","toBe","Array","isArray","search","length","toBeGreaterThan","title","toContain","newCard","description","prompt_template","variables","createPromptCard","id","toEqual","getPromptCard","test_cases","updateData","updatePromptCard","deletePromptCard","message","rejects","toThrow","getTestCases","prompt_card_id","newTestCase","name","input_variables","expected_output","assertions","type","value","createTestCase","testData","test_case_ids","model","runTests","execution_id","status","getTestExecution","runSingleTest","getDashboardMetrics","realtime","historical","trends","insights","activeTests","testsPerSecond","successRate","totalTests","mostUsedModels","analyticsData","executionId","promptCardId","testCaseIds","duration","success","recordTestExecution","yamlContent","validateYAML","valid","importYAML","imported","response","exportYAML","toBeInstanceOf","Response","getHealth","timestamp","services","database","ollama","server","use","http","get","HttpResponse","json","error","fetch","headers","then","r","callCount","data","customHeaders"],"mappings":"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"}