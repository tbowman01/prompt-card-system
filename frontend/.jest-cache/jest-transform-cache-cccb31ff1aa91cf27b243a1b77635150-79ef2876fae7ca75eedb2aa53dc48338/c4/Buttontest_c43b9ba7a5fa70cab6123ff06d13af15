68ef8e1b06ef900d990ed85433ee6827
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _Button = require("../../../components/ui/Button");
describe("Button", ()=>{
    it("renders with default props", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            children: "Click me"
        }));
        const button = _react.screen.getByRole("button", {
            name: "Click me"
        });
        expect(button).toBeInTheDocument();
        expect(button).toHaveClass("bg-primary-600") // default primary variant
        ;
        expect(button).toHaveClass("px-4 py-2 text-sm") // default medium size
        ;
    });
    it("applies different variants correctly", ()=>{
        const { rerender } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            variant: "secondary",
            children: "Secondary"
        }));
        expect(_react.screen.getByRole("button")).toHaveClass("bg-secondary-600");
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            variant: "outline",
            children: "Outline"
        }));
        expect(_react.screen.getByRole("button")).toHaveClass("border border-gray-300");
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            variant: "danger",
            children: "Danger"
        }));
        expect(_react.screen.getByRole("button")).toHaveClass("bg-red-600");
    });
    it("applies different sizes correctly", ()=>{
        const { rerender } = (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            size: "sm",
            children: "Small"
        }));
        expect(_react.screen.getByRole("button")).toHaveClass("px-3 py-1.5 text-sm");
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            size: "lg",
            children: "Large"
        }));
        expect(_react.screen.getByRole("button")).toHaveClass("px-6 py-3 text-base");
    });
    it("shows loading state", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            loading: true,
            children: "Loading button"
        }));
        const button = _react.screen.getByRole("button");
        expect(button).toBeDisabled();
        // Check for loading spinner SVG
        const spinner = button.querySelector("svg");
        expect(spinner).toBeInTheDocument();
        expect(spinner).toHaveClass("animate-spin");
    });
    it("handles disabled state", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            disabled: true,
            children: "Disabled button"
        }));
        const button = _react.screen.getByRole("button");
        expect(button).toBeDisabled();
        expect(button).toHaveClass("disabled:opacity-50");
    });
    it("handles click events", ()=>{
        const handleClick = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            onClick: handleClick,
            children: "Clickable"
        }));
        const button = _react.screen.getByRole("button");
        _react.fireEvent.click(button);
        expect(handleClick).toHaveBeenCalledTimes(1);
    });
    it("does not call onClick when disabled", ()=>{
        const handleClick = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            onClick: handleClick,
            disabled: true,
            children: "Disabled"
        }));
        const button = _react.screen.getByRole("button");
        _react.fireEvent.click(button);
        expect(handleClick).not.toHaveBeenCalled();
    });
    it("does not call onClick when loading", ()=>{
        const handleClick = jest.fn();
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            onClick: handleClick,
            loading: true,
            children: "Loading"
        }));
        const button = _react.screen.getByRole("button");
        _react.fireEvent.click(button);
        expect(handleClick).not.toHaveBeenCalled();
    });
    it("applies custom className", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            className: "custom-class",
            children: "Custom"
        }));
        const button = _react.screen.getByRole("button");
        expect(button).toHaveClass("custom-class");
    });
    it("passes through HTML button attributes", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            type: "submit",
            id: "submit-btn",
            children: "Submit"
        }));
        const button = _react.screen.getByRole("button");
        expect(button).toHaveAttribute("type", "submit");
        expect(button).toHaveAttribute("id", "submit-btn");
    });
    it("has proper accessibility attributes", ()=>{
        (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
            children: "Accessible button"
        }));
        const button = _react.screen.getByRole("button");
        expect(button).toHaveClass("focus:outline-none");
        expect(button).toHaveClass("focus:ring-2");
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi93b3Jrc3BhY2VzL3Byb21wdC1jYXJkLXN5c3RlbS9mcm9udGVuZC9zcmMvX190ZXN0c19fL2NvbXBvbmVudHMvdWkvQnV0dG9uLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0J1xuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnQC9jb21wb25lbnRzL3VpL0J1dHRvbidcblxuZGVzY3JpYmUoJ0J1dHRvbicsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgd2l0aCBkZWZhdWx0IHByb3BzJywgKCkgPT4ge1xuICAgIHJlbmRlcig8QnV0dG9uPkNsaWNrIG1lPC9CdXR0b24+KVxuICAgIFxuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogJ0NsaWNrIG1lJyB9KVxuICAgIGV4cGVjdChidXR0b24pLnRvQmVJblRoZURvY3VtZW50KClcbiAgICBleHBlY3QoYnV0dG9uKS50b0hhdmVDbGFzcygnYmctcHJpbWFyeS02MDAnKSAvLyBkZWZhdWx0IHByaW1hcnkgdmFyaWFudFxuICAgIGV4cGVjdChidXR0b24pLnRvSGF2ZUNsYXNzKCdweC00IHB5LTIgdGV4dC1zbScpIC8vIGRlZmF1bHQgbWVkaXVtIHNpemVcbiAgfSlcblxuICBpdCgnYXBwbGllcyBkaWZmZXJlbnQgdmFyaWFudHMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlcig8QnV0dG9uIHZhcmlhbnQ9XCJzZWNvbmRhcnlcIj5TZWNvbmRhcnk8L0J1dHRvbj4pXG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicpKS50b0hhdmVDbGFzcygnYmctc2Vjb25kYXJ5LTYwMCcpXG5cbiAgICByZXJlbmRlcig8QnV0dG9uIHZhcmlhbnQ9XCJvdXRsaW5lXCI+T3V0bGluZTwvQnV0dG9uPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJykpLnRvSGF2ZUNsYXNzKCdib3JkZXIgYm9yZGVyLWdyYXktMzAwJylcblxuICAgIHJlcmVuZGVyKDxCdXR0b24gdmFyaWFudD1cImRhbmdlclwiPkRhbmdlcjwvQnV0dG9uPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJykpLnRvSGF2ZUNsYXNzKCdiZy1yZWQtNjAwJylcbiAgfSlcblxuICBpdCgnYXBwbGllcyBkaWZmZXJlbnQgc2l6ZXMgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IHsgcmVyZW5kZXIgfSA9IHJlbmRlcig8QnV0dG9uIHNpemU9XCJzbVwiPlNtYWxsPC9CdXR0b24+KVxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nKSkudG9IYXZlQ2xhc3MoJ3B4LTMgcHktMS41IHRleHQtc20nKVxuXG4gICAgcmVyZW5kZXIoPEJ1dHRvbiBzaXplPVwibGdcIj5MYXJnZTwvQnV0dG9uPilcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJykpLnRvSGF2ZUNsYXNzKCdweC02IHB5LTMgdGV4dC1iYXNlJylcbiAgfSlcblxuICBpdCgnc2hvd3MgbG9hZGluZyBzdGF0ZScsICgpID0+IHtcbiAgICByZW5kZXIoPEJ1dHRvbiBsb2FkaW5nPkxvYWRpbmcgYnV0dG9uPC9CdXR0b24+KVxuICAgIFxuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicpXG4gICAgZXhwZWN0KGJ1dHRvbikudG9CZURpc2FibGVkKClcbiAgICBcbiAgICAvLyBDaGVjayBmb3IgbG9hZGluZyBzcGlubmVyIFNWR1xuICAgIGNvbnN0IHNwaW5uZXIgPSBidXR0b24ucXVlcnlTZWxlY3Rvcignc3ZnJylcbiAgICBleHBlY3Qoc3Bpbm5lcikudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIGV4cGVjdChzcGlubmVyKS50b0hhdmVDbGFzcygnYW5pbWF0ZS1zcGluJylcbiAgfSlcblxuICBpdCgnaGFuZGxlcyBkaXNhYmxlZCBzdGF0ZScsICgpID0+IHtcbiAgICByZW5kZXIoPEJ1dHRvbiBkaXNhYmxlZD5EaXNhYmxlZCBidXR0b248L0J1dHRvbj4pXG4gICAgXG4gICAgY29uc3QgYnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJylcbiAgICBleHBlY3QoYnV0dG9uKS50b0JlRGlzYWJsZWQoKVxuICAgIGV4cGVjdChidXR0b24pLnRvSGF2ZUNsYXNzKCdkaXNhYmxlZDpvcGFjaXR5LTUwJylcbiAgfSlcblxuICBpdCgnaGFuZGxlcyBjbGljayBldmVudHMnLCAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSBqZXN0LmZuKClcbiAgICByZW5kZXIoPEJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVDbGlja30+Q2xpY2thYmxlPC9CdXR0b24+KVxuICAgIFxuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicpXG4gICAgZmlyZUV2ZW50LmNsaWNrKGJ1dHRvbilcbiAgICBcbiAgICBleHBlY3QoaGFuZGxlQ2xpY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICB9KVxuXG4gIGl0KCdkb2VzIG5vdCBjYWxsIG9uQ2xpY2sgd2hlbiBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBjb25zdCBoYW5kbGVDbGljayA9IGplc3QuZm4oKVxuICAgIHJlbmRlcig8QnV0dG9uIG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSBkaXNhYmxlZD5EaXNhYmxlZDwvQnV0dG9uPilcbiAgICBcbiAgICBjb25zdCBidXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nKVxuICAgIGZpcmVFdmVudC5jbGljayhidXR0b24pXG4gICAgXG4gICAgZXhwZWN0KGhhbmRsZUNsaWNrKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gIH0pXG5cbiAgaXQoJ2RvZXMgbm90IGNhbGwgb25DbGljayB3aGVuIGxvYWRpbmcnLCAoKSA9PiB7XG4gICAgY29uc3QgaGFuZGxlQ2xpY2sgPSBqZXN0LmZuKClcbiAgICByZW5kZXIoPEJ1dHRvbiBvbkNsaWNrPXtoYW5kbGVDbGlja30gbG9hZGluZz5Mb2FkaW5nPC9CdXR0b24+KVxuICAgIFxuICAgIGNvbnN0IGJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicpXG4gICAgZmlyZUV2ZW50LmNsaWNrKGJ1dHRvbilcbiAgICBcbiAgICBleHBlY3QoaGFuZGxlQ2xpY2spLm5vdC50b0hhdmVCZWVuQ2FsbGVkKClcbiAgfSlcblxuICBpdCgnYXBwbGllcyBjdXN0b20gY2xhc3NOYW1lJywgKCkgPT4ge1xuICAgIHJlbmRlcig8QnV0dG9uIGNsYXNzTmFtZT1cImN1c3RvbS1jbGFzc1wiPkN1c3RvbTwvQnV0dG9uPilcbiAgICBcbiAgICBjb25zdCBidXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nKVxuICAgIGV4cGVjdChidXR0b24pLnRvSGF2ZUNsYXNzKCdjdXN0b20tY2xhc3MnKVxuICB9KVxuXG4gIGl0KCdwYXNzZXMgdGhyb3VnaCBIVE1MIGJ1dHRvbiBhdHRyaWJ1dGVzJywgKCkgPT4ge1xuICAgIHJlbmRlcig8QnV0dG9uIHR5cGU9XCJzdWJtaXRcIiBpZD1cInN1Ym1pdC1idG5cIj5TdWJtaXQ8L0J1dHRvbj4pXG4gICAgXG4gICAgY29uc3QgYnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJylcbiAgICBleHBlY3QoYnV0dG9uKS50b0hhdmVBdHRyaWJ1dGUoJ3R5cGUnLCAnc3VibWl0JylcbiAgICBleHBlY3QoYnV0dG9uKS50b0hhdmVBdHRyaWJ1dGUoJ2lkJywgJ3N1Ym1pdC1idG4nKVxuICB9KVxuXG4gIGl0KCdoYXMgcHJvcGVyIGFjY2Vzc2liaWxpdHkgYXR0cmlidXRlcycsICgpID0+IHtcbiAgICByZW5kZXIoPEJ1dHRvbj5BY2Nlc3NpYmxlIGJ1dHRvbjwvQnV0dG9uPilcbiAgICBcbiAgICBjb25zdCBidXR0b24gPSBzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nKVxuICAgIGV4cGVjdChidXR0b24pLnRvSGF2ZUNsYXNzKCdmb2N1czpvdXRsaW5lLW5vbmUnKVxuICAgIGV4cGVjdChidXR0b24pLnRvSGF2ZUNsYXNzKCdmb2N1czpyaW5nLTInKVxuICB9KVxufSkiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsInJlbmRlciIsIkJ1dHRvbiIsImJ1dHRvbiIsInNjcmVlbiIsImdldEJ5Um9sZSIsIm5hbWUiLCJleHBlY3QiLCJ0b0JlSW5UaGVEb2N1bWVudCIsInRvSGF2ZUNsYXNzIiwicmVyZW5kZXIiLCJ2YXJpYW50Iiwic2l6ZSIsImxvYWRpbmciLCJ0b0JlRGlzYWJsZWQiLCJzcGlubmVyIiwicXVlcnlTZWxlY3RvciIsImRpc2FibGVkIiwiaGFuZGxlQ2xpY2siLCJqZXN0IiwiZm4iLCJvbkNsaWNrIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJub3QiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiY2xhc3NOYW1lIiwidHlwZSIsImlkIiwidG9IYXZlQXR0cmlidXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozt1QkFBMEM7d0JBQ25CO0FBRXZCQSxTQUFTLFVBQVU7SUFDakJDLEdBQUcsOEJBQThCO1FBQy9CQyxJQUFBQSxhQUFNLGdCQUFDLHFCQUFDQyxjQUFNO3NCQUFDOztRQUVmLE1BQU1DLFNBQVNDLGFBQU0sQ0FBQ0MsU0FBUyxDQUFDLFVBQVU7WUFBRUMsTUFBTTtRQUFXO1FBQzdEQyxPQUFPSixRQUFRSyxpQkFBaUI7UUFDaENELE9BQU9KLFFBQVFNLFdBQVcsQ0FBQyxrQkFBa0IsMEJBQTBCOztRQUN2RUYsT0FBT0osUUFBUU0sV0FBVyxDQUFDLHFCQUFxQixzQkFBc0I7O0lBQ3hFO0lBRUFULEdBQUcsd0NBQXdDO1FBQ3pDLE1BQU0sRUFBRVUsUUFBUSxFQUFFLEdBQUdULElBQUFBLGFBQU0sZ0JBQUMscUJBQUNDLGNBQU07WUFBQ1MsU0FBUTtzQkFBWTs7UUFDeERKLE9BQU9ILGFBQU0sQ0FBQ0MsU0FB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