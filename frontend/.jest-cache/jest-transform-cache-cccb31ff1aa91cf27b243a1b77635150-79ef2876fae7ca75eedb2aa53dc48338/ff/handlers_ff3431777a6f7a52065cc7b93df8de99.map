{"version":3,"sources":["/workspaces/prompt-card-system/frontend/src/__tests__/mocks/handlers.ts"],"sourcesContent":["const { http, HttpResponse } = require('msw')\n\nconst API_BASE_URL = 'http://localhost:3001/api'\n\n// Mock data\nconst mockPromptCards: PromptCard[] = [\n  {\n    id: 1,\n    title: 'Customer Service Response',\n    description: 'Generate professional customer service responses',\n    prompt_template: 'Respond to this customer inquiry: {{inquiry}}\\nTone: {{tone}}',\n    variables: ['inquiry', 'tone'],\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n    test_case_count: 2,\n  },\n  {\n    id: 2,\n    title: 'Code Review',\n    description: 'Generate code review comments',\n    prompt_template: 'Review this code and provide feedback:\\n{{code}}',\n    variables: ['code'],\n    created_at: '2024-01-02T00:00:00Z',\n    updated_at: '2024-01-02T00:00:00Z',\n    test_case_count: 1,\n  },\n]\n\nconst mockTestCases: TestCase[] = [\n  {\n    id: 1,\n    prompt_card_id: 1,\n    name: 'Friendly response test',\n    input_variables: {\n      inquiry: 'I received a damaged product',\n      tone: 'friendly',\n    },\n    expected_output: 'Professional and empathetic response',\n    assertions: [\n      { type: 'contains', value: 'sorry', description: 'Should apologize' },\n      { type: 'not-contains', value: 'angry', description: 'Should not be angry' },\n    ],\n    created_at: '2024-01-01T00:00:00Z',\n  },\n  {\n    id: 2,\n    prompt_card_id: 1,\n    name: 'Professional response test',\n    input_variables: {\n      inquiry: 'What is your return policy?',\n      tone: 'professional',\n    },\n    assertions: [\n      { type: 'contains', value: 'return', description: 'Should mention returns' },\n    ],\n    created_at: '2024-01-01T00:00:00Z',\n  },\n]\n\nconst mockDashboardMetrics: DashboardMetrics = {\n  realtime: {\n    activeTests: 3,\n    testsPerSecond: 1.5,\n    successRate: 0.85,\n    averageResponseTime: 1200,\n    errorRate: 0.15,\n  },\n  historical: {\n    totalTests: 850,\n    totalExecutions: 120,\n    overallSuccessRate: 0.88,\n    averageExecutionTime: 1100,\n    mostUsedModels: [\n      { model: 'gpt-4', count: 400 },\n      { model: 'claude-3', count: 250 },\n      { model: 'gpt-3.5-turbo', count: 200 },\n    ],\n  },\n  trends: {\n    testsOverTime: [],\n    successRateOverTime: [],\n    performanceOverTime: [],\n  },\n  insights: [\n    {\n      id: '1',\n      type: 'trend',\n      title: 'Performance Improvement',\n      description: 'Response times have improved by 20% this week',\n      severity: 'low',\n      data: {},\n      timestamp: new Date(),\n      recommendations: ['Continue current optimizations'],\n    },\n  ],\n}\n\nconst handlers = [\n  // Prompt Cards endpoints\n  http.get(`${API_BASE_URL}/prompt-cards`, ({ request }) => {\n    const url = new URL(request.url)\n    const page = Number(url.searchParams.get('page')) || 1\n    const limit = Number(url.searchParams.get('limit')) || 10\n    const search = url.searchParams.get('search')\n\n    let filteredCards = mockPromptCards\n    if (search) {\n      filteredCards = mockPromptCards.filter(card =>\n        card.title.toLowerCase().includes(search.toLowerCase()) ||\n        card.description?.toLowerCase().includes(search.toLowerCase())\n      )\n    }\n\n    const start = (page - 1) * limit\n    const end = start + limit\n    const paginatedCards = filteredCards.slice(start, end)\n\n    return HttpResponse.json({\n      success: true,\n      data: {\n        prompt_cards: paginatedCards,\n        pagination: {\n          page,\n          limit,\n          total: filteredCards.length,\n          pages: Math.ceil(filteredCards.length / limit),\n        },\n      },\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/prompt-cards/:id`, ({ params }) => {\n    const id = Number(params.id)\n    const card = mockPromptCards.find(c => c.id === id)\n\n    if (!card) {\n      return HttpResponse.json(\n        {\n          success: false,\n          error: 'Prompt card not found',\n        },\n        { status: 404 }\n      )\n    }\n\n    const cardWithTestCases = {\n      ...card,\n      test_cases: mockTestCases.filter(tc => tc.prompt_card_id === id),\n    }\n\n    return HttpResponse.json({\n      success: true,\n      data: cardWithTestCases,\n    })\n  }),\n\n  http.post(`${API_BASE_URL}/prompt-cards`, async ({ request }) => {\n    const body = await request.json()\n    return HttpResponse.json(\n      {\n        success: true,\n        data: {\n          id: 3,\n          ...body,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        },\n      },\n      { status: 201 }\n    )\n  }),\n\n  http.put(`${API_BASE_URL}/prompt-cards/:id`, async ({ params, request }) => {\n    const id = Number(params.id)\n    const card = mockPromptCards.find(c => c.id === id)\n\n    if (!card) {\n      return HttpResponse.json(\n        {\n          success: false,\n          error: 'Prompt card not found',\n        },\n        { status: 404 }\n      )\n    }\n\n    const body = await request.json()\n    return HttpResponse.json({\n      success: true,\n      data: {\n        ...card,\n        ...body,\n        updated_at: new Date().toISOString(),\n      },\n    })\n  }),\n\n  http.delete(`${API_BASE_URL}/prompt-cards/:id`, ({ params }) => {\n    const id = Number(params.id)\n    const cardExists = mockPromptCards.some(c => c.id === id)\n\n    if (!cardExists) {\n      return HttpResponse.json(\n        {\n          success: false,\n          error: 'Prompt card not found',\n        },\n        { status: 404 }\n      )\n    }\n\n    return HttpResponse.json({\n      success: true,\n      message: 'Prompt card deleted successfully',\n    })\n  }),\n\n  // Test Cases endpoints\n  http.get(`${API_BASE_URL}/test-cases/prompt-cards/:id/test-cases`, ({ params }) => {\n    const promptCardId = Number(params.id)\n    const testCases = mockTestCases.filter(tc => tc.prompt_card_id === promptCardId)\n\n    return HttpResponse.json({\n      success: true,\n      data: testCases,\n    })\n  }),\n\n  http.post(`${API_BASE_URL}/test-cases`, async ({ request }) => {\n    const body = await request.json()\n    return HttpResponse.json(\n      {\n        success: true,\n        data: {\n          id: 3,\n          ...body,\n          created_at: new Date().toISOString(),\n        },\n      },\n      { status: 201 }\n    )\n  }),\n\n  // Test Execution endpoints\n  http.post(`${API_BASE_URL}/test-execution/run`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        execution_id: 'exec-' + Date.now(),\n        status: 'started',\n      },\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/test-execution/:id`, ({ params }) => {\n    const execution: TestExecution = {\n      id: params.id as string,\n      prompt_card_id: 1,\n      status: 'completed',\n      test_results: [],\n      total_tests: 2,\n      passed_tests: 1,\n      failed_tests: 1,\n      execution_time_ms: 2500,\n      model_used: 'gpt-4',\n      created_at: new Date().toISOString(),\n    }\n\n    return HttpResponse.json({\n      success: true,\n      data: execution,\n    })\n  }),\n\n  // Analytics endpoints\n  http.get(`${API_BASE_URL}/analytics/dashboard`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: mockDashboardMetrics,\n    })\n  }),\n\n  // Health endpoint\n  http.get(`${API_BASE_URL}/health`, () => {\n    return HttpResponse.json({\n      success: true,\n      data: {\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        services: {\n          database: 'connected',\n          ollama: {\n            url: 'http://localhost:11434',\n            status: 'connected',\n          },\n        },\n        environment: 'test',\n      },\n    })\n  }),\n\n  // Error simulation endpoints\n  http.get(`${API_BASE_URL}/error`, () => {\n    return HttpResponse.json(\n      {\n        success: false,\n        error: 'Internal server error',\n      },\n      { status: 500 }\n    )\n  }),\n\n  http.get(`${API_BASE_URL}/network-error`, () => {\n    return HttpResponse.error()\n  }),\n]\n\nmodule.exports = { handlers }"],"names":["http","HttpResponse","require","API_BASE_URL","mockPromptCards","id","title","description","prompt_template","variables","created_at","updated_at","test_case_count","mockTestCases","prompt_card_id","name","input_variables","inquiry","tone","expected_output","assertions","type","value","mockDashboardMetrics","realtime","activeTests","testsPerSecond","successRate","averageResponseTime","errorRate","historical","totalTests","totalExecutions","overallSuccessRate","averageExecutionTime","mostUsedModels","model","count","trends","testsOverTime","successRateOverTime","performanceOverTime","insights","severity","data","timestamp","Date","recommendations","handlers","get","request","url","URL","page","Number","searchParams","limit","search","filteredCards","filter","card","toLowerCase","includes","start","end","paginatedCards","slice","json","success","prompt_cards","pagination","total","length","pages","Math","ceil","params","find","c","error","status","cardWithTestCases","test_cases","tc","post","body","toISOString","put","delete","cardExists","some","message","promptCardId","testCases","execution_id","now","execution","test_results","total_tests","passed_tests","failed_tests","execution_time_ms","model_used","services","database","ollama","environment","module","exports"],"mappings":"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"}