'use client';

import React, { useState, useMemo } from 'react';
import { Card } from '../ui/card';
import { Badge } from '../ui/Badge';
import { LoadingSpinner } from '../ui/LoadingSpinner';
import { 
  Shield, 
  AlertTriangle, 
  AlertCircle, 
  Info, 
  ExternalLink, 
  Calendar,
  Eye,
  Download,
  RefreshCw,
  Filter,
  Search,
  TrendingUp,
  Clock,
  CheckCircle,
  XCircle
} from 'lucide-react';
import {
  VulnerabilityInfo,
  DependencyInfo,
  SeverityLevel
} from '../../types/dependency';

interface VulnerabilityTrackerProps {
  vulnerabilities: VulnerabilityInfo[];
  dependencies: DependencyInfo[];
  onRefresh: () => void;
}

const VulnerabilityTracker: React.FC<VulnerabilityTrackerProps> = ({
  vulnerabilities,
  dependencies,
  onRefresh
}) => {
  const [selectedSeverity, setSelectedSeverity] = useState<SeverityLevel[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState<'severity' | 'published' | 'cvss'>('severity');
  const [showExploitable, setShowExploitable] = useState(false);
  const [selectedVuln, setSelectedVuln] = useState<VulnerabilityInfo | null>(null);
  const [scanning, setScanning] = useState(false);

  // Vulnerability statistics
  const stats = useMemo(() => {
    const total = vulnerabilities.length;
    const critical = vulnerabilities.filter(v => v.severity === 'critical').length;
    const high = vulnerabilities.filter(v => v.severity === 'high').length;
    const moderate = vulnerabilities.filter(v => v.severity === 'moderate').length;
    const low = vulnerabilities.filter(v => v.severity === 'low').length;
    const exploitable = vulnerabilities.filter(v => v.exploitAvailable).length;
    const withPatches = vulnerabilities.filter(v => v.patchedVersions && v.patchedVersions.length > 0).length;

    return {
      total,
      critical,
      high,
      moderate,
      low,
      exploitable,
      withPatches,
      patchedPercentage: total > 0 ? Math.round((withPatches / total) * 100) : 0
    };
  }, [vulnerabilities]);

  // Filter vulnerabilities
  const filteredVulnerabilities = useMemo(() => {
    return vulnerabilities.filter(vuln => {
      // Search filter
      if (searchTerm && !vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) &&
          !vuln.cveId?.toLowerCase().includes(searchTerm.toLowerCase())) {
        return false;
      }

      // Severity filter
      if (selectedSeverity.length > 0 && !selectedSeverity.includes(vuln.severity)) {
        return false;
      }

      // Exploitable filter
      if (showExploitable && !vuln.exploitAvailable) {
        return false;
      }

      return true;
    }).sort((a, b) => {
      switch (sortBy) {
        case 'severity':
          const severityOrder = { critical: 0, high: 1, moderate: 2, low: 3, info: 4 };
          return severityOrder[a.severity] - severityOrder[b.severity];
        case 'published':
          return new Date(b.publishedDate).getTime() - new Date(a.publishedDate).getTime();
        case 'cvss':
          return (b.cvssScore || 0) - (a.cvssScore || 0);
        default:
          return 0;
      }
    });
  }, [vulnerabilities, searchTerm, selectedSeverity, showExploitable, sortBy]);

  // Get severity styling
  const getSeverityColor = (severity: SeverityLevel): string => {
    switch (severity) {
      case 'critical': return 'bg-red-600 text-white';
      case 'high': return 'bg-red-500 text-white';
      case 'moderate': return 'bg-yellow-500 text-white';
      case 'low': return 'bg-blue-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getSeverityIcon = (severity: SeverityLevel) => {
    switch (severity) {
      case 'critical': return <AlertTriangle className="w-4 h-4" />;
      case 'high': return <AlertCircle className="w-4 h-4" />;
      case 'moderate': return <AlertTriangle className="w-4 h-4" />;
      case 'low': return <Info className="w-4 h-4" />;
      default: return <Info className="w-4 h-4" />;
    }
  };

  // Get dependency name for vulnerability
  const getDependencyName = (dependencyId: string): string => {
    const dep = dependencies.find(d => d.id === dependencyId);
    return dep?.name || 'Unknown';
  };

  // Handle vulnerability scan
  const handleScan = async () => {
    setScanning(true);
    try {
      const response = await fetch('/api/dependencies/scan', {
        method: 'POST'
      });
      
      if (!response.ok) {
        throw new Error('Scan failed');
      }
      
      // Refresh data after scan
      setTimeout(() => {
        onRefresh();
        setScanning(false);
      }, 3000);
    } catch (error) {
      console.error('Vulnerability scan failed:', error);
      setScanning(false);
    }
  };

  return (
    <div className="space-y-6">
      {/* Statistics */}
      <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Total</p>
              <p className="text-xl font-bold text-gray-900">{stats.total}</p>
            </div>
            <Shield className="w-6 h-6 text-gray-600" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Critical</p>
              <p className="text-xl font-bold text-red-600">{stats.critical}</p>
            </div>
            <AlertTriangle className="w-6 h-6 text-red-600" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">High</p>
              <p className="text-xl font-bold text-red-500">{stats.high}</p>
            </div>
            <AlertCircle className="w-6 h-6 text-red-500" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Moderate</p>
              <p className="text-xl font-bold text-yellow-600">{stats.moderate}</p>
            </div>
            <AlertTriangle className="w-6 h-6 text-yellow-600" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Exploitable</p>
              <p className="text-xl font-bold text-purple-600">{stats.exploitable}</p>
            </div>
            <Eye className="w-6 h-6 text-purple-600" />
          </div>
        </Card>

        <Card className="p-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Patched</p>
              <p className="text-xl font-bold text-green-600">
                {stats.withPatches} ({stats.patchedPercentage}%)
              </p>
            </div>
            <CheckCircle className="w-6 h-6 text-green-600" />
          </div>
        </Card>
      </div>

      {/* Controls */}
      <Card className="p-4">
        <div className="flex flex-wrap items-center justify-between gap-4">
          <div className="flex flex-wrap items-center gap-4">
            {/* Search */}
            <div className="relative">
              <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
              <input
                type="text"
                placeholder="Search vulnerabilities..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            {/* Severity Filter */}
            <div className="flex items-center space-x-2">
              <span className="text-sm font-medium text-gray-700">Severity:</span>
              {(['critical', 'high', 'moderate', 'low'] as SeverityLevel[]).map(severity => (
                <button
                  key={severity}
                  onClick={() => {
                    const newSeverities = selectedSeverity.includes(severity)
                      ? selectedSeverity.filter(s => s !== severity)
                      : [...selectedSeverity, severity];
                    setSelectedSeverity(newSeverities);
                  }}
                  className={`px-3 py-1 rounded-full text-xs font-medium transition-colors ${
                    selectedSeverity.includes(severity)
                      ? getSeverityColor(severity)
                      : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
                  }`}
                >
                  {severity}
                </button>
              ))}
            </div>

            {/* Exploitable Filter */}
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={showExploitable}
                onChange={(e) => setShowExploitable(e.target.checked)}
                className="rounded border-gray-300 text-purple-600 focus:ring-purple-500"
              />
              <span className="text-sm font-medium text-gray-700">Show exploitable only</span>
            </label>
          </div>

          <div className="flex items-center space-x-2">
            {/* Sort */}
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value as typeof sortBy)}
              className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
            >
              <option value="severity">Sort by Severity</option>
              <option value="published">Sort by Date</option>
              <option value="cvss">Sort by CVSS Score</option>
            </select>

            {/* Actions */}
            <button
              onClick={handleScan}
              disabled={scanning}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
            >
              <RefreshCw className={`w-4 h-4 ${scanning ? 'animate-spin' : ''}`} />
              <span>{scanning ? 'Scanning...' : 'Scan Now'}</span>
            </button>

            <button className="flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
              <Download className="w-4 h-4" />
              <span>Export</span>
            </button>
          </div>
        </div>
      </Card>

      {/* Vulnerabilities List */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="space-y-4">
          {filteredVulnerabilities.length > 0 ? (
            filteredVulnerabilities.map((vuln) => (
              <Card 
                key={vuln.id} 
                className={`p-4 cursor-pointer transition-all hover:shadow-lg ${
                  selectedVuln?.id === vuln.id ? 'ring-2 ring-blue-500 bg-blue-50' : ''
                }`}
                onClick={() => setSelectedVuln(vuln)}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center space-x-2 mb-2">
                      <Badge className={getSeverityColor(vuln.severity)}>
                        {getSeverityIcon(vuln.severity)}
                        <span className="ml-1">{vuln.severity.toUpperCase()}</span>
                      </Badge>
                      {vuln.cveId && (
                        <Badge variant="outline" className="text-xs">
                          {vuln.cveId}
                        </Badge>
                      )}
                      {vuln.exploitAvailable && (
                        <Badge className="bg-purple-600 text-white text-xs">
                          <Eye className="w-3 h-3 mr-1" />
                          Exploit Available
                        </Badge>
                      )}
                    </div>

                    <h3 className="font-semibold text-gray-900 mb-1 line-clamp-2">{vuln.title}</h3>
                    <p className="text-sm text-gray-600 mb-2">
                      in <span className="font-medium">{getDependencyName(vuln.dependencyId)}</span>
                    </p>
                    <p className="text-sm text-gray-500 line-clamp-2">{vuln.description}</p>
                  </div>

                  <div className="flex-shrink-0 text-right">
                    {vuln.cvssScore && (
                      <div className="text-lg font-bold text-gray-900">{vuln.cvssScore}</div>
                    )}
                    <div className="text-xs text-gray-500 mt-1">
                      {new Date(vuln.publishedDate).toLocaleDateString()}
                    </div>
                  </div>
                </div>

                {vuln.patchedVersions && vuln.patchedVersions.length > 0 && (
                  <div className="mt-3 pt-3 border-t border-gray-200">
                    <div className="flex items-center space-x-2">
                      <CheckCircle className="w-4 h-4 text-green-600" />
                      <span className="text-sm text-green-700 font-medium">
                        Patches available: {vuln.patchedVersions.join(', ')}
                      </span>
                    </div>
                  </div>
                )}
              </Card>
            ))
          ) : (
            <Card className="p-8 text-center">
              <Shield className="w-12 h-12 text-green-600 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">No Vulnerabilities Found</h3>
              <p className="text-gray-600 mb-4">
                {vulnerabilities.length === 0 
                  ? "Great! No security vulnerabilities detected in your dependencies."
                  : "No vulnerabilities match your current filters."
                }
              </p>
              {vulnerabilities.length === 0 && (
                <button
                  onClick={handleScan}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                >
                  Run Security Scan
                </button>
              )}
            </Card>
          )}
        </div>

        {/* Vulnerability Details Panel */}
        <div className="lg:sticky lg:top-4">
          {selectedVuln ? (
            <Card className="p-6">
              <div className="flex items-start justify-between mb-4">
                <div>
                  <h2 className="text-lg font-semibold text-gray-900 mb-2">
                    {selectedVuln.title}
                  </h2>
                  <div className="flex items-center space-x-2 mb-2">
                    <Badge className={getSeverityColor(selectedVuln.severity)}>
                      {getSeverityIcon(selectedVuln.severity)}
                      <span className="ml-1">{selectedVuln.severity.toUpperCase()}</span>
                    </Badge>
                    {selectedVuln.cveId && (
                      <Badge variant="outline">{selectedVuln.cveId}</Badge>
                    )}
                  </div>
                </div>
                <button
                  onClick={() => setSelectedVuln(null)}
                  className="p-1 hover:bg-gray-100 rounded"
                >
                  <XCircle className="w-5 h-5 text-gray-400" />
                </button>
              </div>

              <div className="space-y-4">
                {/* Basic Info */}
                <div>
                  <h3 className="font-medium text-gray-900 mb-2">Details</h3>
                  <p className="text-sm text-gray-600 mb-2">{selectedVuln.description}</p>
                  <div className="text-sm text-gray-500">
                    <p>Dependency: <span className="font-medium">{getDependencyName(selectedVuln.dependencyId)}</span></p>
                    <p>Published: <span className="font-medium">{new Date(selectedVuln.publishedDate).toLocaleDateString()}</span></p>
                    {selectedVuln.cvssScore && (
                      <p>CVSS Score: <span className="font-medium">{selectedVuln.cvssScore}</span></p>
                    )}
                  </div>
                </div>

                {/* Exploit Information */}
                {selectedVuln.exploitAvailable && (
                  <div className="p-3 bg-purple-50 border border-purple-200 rounded-lg">
                    <div className="flex items-center space-x-2 mb-1">
                      <Eye className="w-4 h-4 text-purple-600" />
                      <span className="font-medium text-purple-800">Exploit Available</span>
                    </div>
                    <p className="text-sm text-purple-700">
                      Active exploits exist for this vulnerability. Immediate patching is recommended.
                    </p>
                  </div>
                )}

                {/* Patches */}
                {selectedVuln.patchedVersions && selectedVuln.patchedVersions.length > 0 && (
                  <div>
                    <h3 className="font-medium text-gray-900 mb-2">Patched Versions</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedVuln.patchedVersions.map((version, index) => (
                        <Badge key={index} className="bg-green-100 text-green-800">
                          {version}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                {/* Recommendations */}
                {selectedVuln.recommendations.length > 0 && (
                  <div>
                    <h3 className="font-medium text-gray-900 mb-2">Recommendations</h3>
                    <ul className="space-y-1">
                      {selectedVuln.recommendations.map((rec, index) => (
                        <li key={index} className="text-sm text-gray-600 flex items-start space-x-2">
                          <CheckCircle className="w-4 h-4 text-green-600 mt-0.5 flex-shrink-0" />
                          <span>{rec}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* References */}
                {selectedVuln.references.length > 0 && (
                  <div>
                    <h3 className="font-medium text-gray-900 mb-2">References</h3>
                    <div className="space-y-2">
                      {selectedVuln.references.map((ref, index) => (
                        <a
                          key={index}
                          href={ref}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center space-x-2 text-sm text-blue-600 hover:text-blue-800"
                        >
                          <ExternalLink className="w-3 h-3" />
                          <span className="truncate">{ref}</span>
                        </a>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </Card>
          ) : (
            <Card className="p-8 text-center">
              <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Select a Vulnerability</h3>
              <p className="text-gray-600">
                Click on a vulnerability from the list to see detailed information and recommendations.
              </p>
            </Card>
          )}
        </div>
      </div>

      {/* Summary */}
      <div className="flex items-center justify-between text-sm text-gray-600">
        <span>
          Showing {filteredVulnerabilities.length} of {vulnerabilities.length} vulnerabilities
        </span>
        {filteredVulnerabilities.length !== vulnerabilities.length && (
          <span className="text-blue-600">
            {vulnerabilities.length - filteredVulnerabilities.length} filtered out
          </span>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityTracker;