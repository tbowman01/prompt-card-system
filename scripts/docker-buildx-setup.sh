#!/bin/bash
# Docker BuildX Setup Script - Modern Docker Build Configuration
# Prompt Card System - BuildKit Migration

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}🐳 Setting up Modern Docker BuildX for Prompt Card System${NC}"
echo "=============================================================="

# Function to print status
print_status() {
    echo -e "${GREEN}✓${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}⚠️${NC} $1"
}

print_error() {
    echo -e "${RED}✗${NC} $1"
}

# Check if Docker is installed and running
if ! command -v docker &> /dev/null; then
    print_error "Docker is not installed or not in PATH"
    exit 1
fi

if ! docker info &> /dev/null; then
    print_error "Docker daemon is not running"
    exit 1
fi

print_status "Docker is installed and running"

# Check if buildx is available
if ! docker buildx version &> /dev/null; then
    print_warning "Docker Buildx not found, installing..."
    
    # Install buildx plugin if not available
    if [[ "$OSTYPE" == "linux-gnu"* ]]; then
        # Linux installation
        mkdir -p ~/.docker/cli-plugins/
        curl -L "https://github.com/docker/buildx/releases/latest/download/buildx-v0.12.0.linux-amd64" -o ~/.docker/cli-plugins/docker-buildx
        chmod +x ~/.docker/cli-plugins/docker-buildx
        print_status "Installed Docker Buildx on Linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS installation
        mkdir -p ~/.docker/cli-plugins/
        curl -L "https://github.com/docker/buildx/releases/latest/download/buildx-v0.12.0.darwin-amd64" -o ~/.docker/cli-plugins/docker-buildx
        chmod +x ~/.docker/cli-plugins/docker-buildx
        print_status "Installed Docker Buildx on macOS"
    else
        print_warning "Please install Docker Desktop which includes Buildx by default"
    fi
else
    print_status "Docker Buildx is available"
    docker buildx version
fi

# Remove legacy builder if it exists and create new one
echo -e "\n${GREEN}🔧 Configuring Modern BuildKit Builder${NC}"

# Check if our builder exists
BUILDER_NAME="prompt-card-builder"

if docker buildx ls | grep -q "$BUILDER_NAME"; then
    print_warning "Removing existing builder: $BUILDER_NAME"
    docker buildx rm "$BUILDER_NAME" || true
fi

# Create new builder with modern features
print_status "Creating new BuildKit builder with advanced features..."
docker buildx create \
    --name "$BUILDER_NAME" \
    --driver docker-container \
    --driver-opt network=host \
    --driver-opt image=moby/buildkit:latest \
    --buildkitd-flags '--allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host' \
    --platform linux/amd64,linux/arm64 \
    --bootstrap \
    --use

print_status "Builder '$BUILDER_NAME' created and activated"

# Verify builder is working
echo -e "\n${GREEN}🔍 Verifying Builder Configuration${NC}"
docker buildx inspect --bootstrap

# Set environment variables for BuildKit
echo -e "\n${GREEN}🌍 Setting BuildKit Environment Variables${NC}"

# Create or update .env file with BuildKit configuration
ENV_FILE=".env.docker"
cat > "$ENV_FILE" << EOF
# Modern Docker BuildKit Configuration
# Generated by docker-buildx-setup.sh

# Enable BuildKit
DOCKER_BUILDKIT=1
COMPOSE_DOCKER_CLI_BUILD=1

# BuildKit Features
BUILDKIT_PROGRESS=plain
BUILDKIT_COLORS=1

# Cache Configuration
BUILDKIT_INLINE_CACHE=1

# Multi-platform builds
DOCKER_CLI_EXPERIMENTAL=enabled

# Builder Name
BUILDX_BUILDER=$BUILDER_NAME
EOF

print_status "Created $ENV_FILE with BuildKit configuration"

# Update package.json scripts to use modern BuildKit
echo -e "\n${GREEN}📦 Updating Package.json Scripts${NC}"

# Create modern Docker scripts
if [ -f "package.json" ]; then
    # Backup original package.json
    cp package.json package.json.backup
    
    # Update scripts to use buildx
    npm pkg set scripts.docker:build:modern="docker buildx build --platform linux/amd64,linux/arm64 --push"
    npm pkg set scripts.docker:build:cache="docker buildx build --cache-from type=gha --cache-to type=gha,mode=max"
    npm pkg set scripts.docker:build:multi="docker buildx build --platform linux/amd64,linux/arm64"
    npm pkg set scripts.docker:setup="./scripts/docker-buildx-setup.sh"
    
    print_status "Updated package.json with modern Docker scripts"
else
    print_warning "package.json not found in current directory"
fi

# Create docker-compose override for BuildKit
echo -e "\n${GREEN}📝 Creating Docker Compose BuildKit Override${NC}"

cat > "docker-compose.buildkit.yml" << EOF
# Docker Compose BuildKit Override
# Use with: docker-compose -f docker-compose.yml -f docker-compose.buildkit.yml

version: '3.8'

services:
  frontend:
    build:
      x-bake-target: frontend
      cache_from:
        - type=gha,scope=frontend
      cache_to:
        - type=gha,mode=max,scope=frontend
      platforms:
        - linux/amd64
        - linux/arm64

  backend:
    build:
      x-bake-target: backend  
      cache_from:
        - type=gha,scope=backend
      cache_to:
        - type=gha,mode=max,scope=backend
      platforms:
        - linux/amd64
        - linux/arm64
EOF

print_status "Created docker-compose.buildkit.yml override file"

# Create build script with modern features
cat > "scripts/docker-build-modern.sh" << 'EOF'
#!/bin/bash
# Modern Docker Build Script with BuildKit
# Prompt Card System

set -euo pipefail

# Load BuildKit environment
if [ -f ".env.docker" ]; then
    export $(grep -v '^#' .env.docker | xargs)
fi

# Build arguments
PLATFORM="${PLATFORM:-linux/amd64,linux/arm64}"
CACHE_TYPE="${CACHE_TYPE:-gha}"
PUSH="${PUSH:-false}"

echo "🚀 Building with Modern BuildKit"
echo "Platform: $PLATFORM"
echo "Cache: $CACHE_TYPE"
echo "Push: $PUSH"

# Build frontend
echo "📱 Building Frontend..."
docker buildx build \
    --platform "$PLATFORM" \
    --cache-from "type=$CACHE_TYPE,scope=frontend" \
    --cache-to "type=$CACHE_TYPE,mode=max,scope=frontend" \
    --target production \
    --tag prompt-card-frontend:latest \
    $([ "$PUSH" = "true" ] && echo "--push" || echo "--load") \
    ./frontend

# Build backend  
echo "🖥️ Building Backend..."
docker buildx build \
    --platform "$PLATFORM" \
    --cache-from "type=$CACHE_TYPE,scope=backend" \
    --cache-to "type=$CACHE_TYPE,mode=max,scope=backend" \
    --target production \
    --tag prompt-card-backend:latest \
    $([ "$PUSH" = "true" ] && echo "--push" || echo "--load") \
    ./backend

echo "✅ Modern BuildKit build completed successfully!"
EOF

chmod +x "scripts/docker-build-modern.sh"
print_status "Created modern build script: scripts/docker-build-modern.sh"

# Test the builder
echo -e "\n${GREEN}🧪 Testing BuildKit Builder${NC}"
echo "Testing with a simple build..."

# Create a simple test Dockerfile
mkdir -p .docker-test
cat > .docker-test/Dockerfile << 'EOF'
FROM alpine:latest
RUN echo "BuildKit test successful!"
CMD echo "Modern Docker BuildKit is working!"
EOF

# Test build
if docker buildx build \
    --platform linux/amd64 \
    --cache-from type=local,src=/tmp/.buildx-cache \
    --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
    --tag buildkit-test:latest \
    --load \
    .docker-test; then
    
    print_status "BuildKit test build successful!"
    
    # Run test container
    if docker run --rm buildkit-test:latest; then
        print_status "BuildKit test container executed successfully!"
    fi
    
    # Cleanup
    docker rmi buildkit-test:latest || true
    rm -rf .docker-test
else
    print_error "BuildKit test build failed"
fi

# Final summary
echo -e "\n${GREEN}🎉 Docker BuildX Setup Complete!${NC}"
echo "=============================================================="
echo -e "${GREEN}✓${NC} Modern BuildKit builder created: $BUILDER_NAME"
echo -e "${GREEN}✓${NC} Multi-platform support enabled (linux/amd64, linux/arm64)"
echo -e "${GREEN}✓${NC} Advanced caching configured"
echo -e "${GREEN}✓${NC} Environment variables set in .env.docker"
echo -e "${GREEN}✓${NC} Package.json scripts updated"
echo -e "${GREEN}✓${NC} Docker Compose override created"
echo -e "${GREEN}✓${NC} Modern build script created"
echo ""
echo -e "${YELLOW}Next Steps:${NC}"
echo "1. Source environment: source .env.docker"
echo "2. Test builds: ./scripts/docker-build-modern.sh"
echo "3. Use modern compose: docker-compose -f docker-compose.yml -f docker-compose.buildkit.yml up"
echo ""
echo -e "${GREEN}🚀 You're now using modern Docker BuildKit instead of the deprecated legacy builder!${NC}"
EOF