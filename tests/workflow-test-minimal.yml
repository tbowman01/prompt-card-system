# Minimal Workflow Test for Diagnostic Purposes
name: 🧪 Workflow Diagnostic Test

on:
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test type to run'
        required: false
        default: 'basic'
        type: choice
        options:
          - basic
          - docker
          - buildx

env:
  REGISTRY: ghcr.io
  DOCKER_BUILDKIT: 1

jobs:
  diagnostic-basic:
    name: 🔍 Basic Diagnostic
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'basic' || github.event.inputs.test_type == ''
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🔍 Environment Check
      run: |
        echo "=== ENVIRONMENT DIAGNOSTIC ==="
        echo "Runner OS: ${{ runner.os }}"
        echo "Runner Arch: ${{ runner.arch }}"
        echo "Node Version: $(node --version 2>/dev/null || echo 'Not available')"
        echo "NPM Version: $(npm --version 2>/dev/null || echo 'Not available')"
        echo "Docker Version: $(docker --version 2>/dev/null || echo 'Not available')"
        echo "BuildKit Version: $(docker buildx version 2>/dev/null || echo 'Not available')"
        echo "Available disk space: $(df -h / | tail -1)"
        echo "Memory info: $(free -h || echo 'free command not available')"
        echo "Git Status: $(git status --porcelain | wc -l) files changed"
        
    - name: 🔍 Repository Structure Check
      run: |
        echo "=== REPOSITORY STRUCTURE ==="
        echo "Root files:"
        ls -la
        echo ""
        echo "Backend structure:"
        ls -la backend/ 2>/dev/null || echo "Backend directory not found"
        echo ""
        echo "Frontend structure:"
        ls -la frontend/ 2>/dev/null || echo "Frontend directory not found"
        echo ""
        echo "Auth structure:"
        ls -la auth/ 2>/dev/null || echo "Auth directory not found"
        echo ""
        echo "Docker files:"
        find . -name "Dockerfile*" -type f

  diagnostic-docker:
    name: 🐳 Docker Diagnostic
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'docker'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Docker System Check
      run: |
        echo "=== DOCKER SYSTEM DIAGNOSTIC ==="
        docker --version
        docker info
        echo ""
        echo "Available disk space:"
        df -h
        echo ""
        echo "Docker images:"
        docker images
        echo ""
        echo "Docker processes:"
        docker ps -a

    - name: 🔍 Dockerfile Validation
      run: |
        echo "=== DOCKERFILE VALIDATION ==="
        echo "Checking backend Dockerfile..."
        if [ -f "backend/Dockerfile" ]; then
          echo "✅ Backend Dockerfile exists"
          echo "First 20 lines:"
          head -20 backend/Dockerfile
        else
          echo "❌ Backend Dockerfile not found"
        fi
        echo ""
        echo "Checking frontend Dockerfile..."
        if [ -f "frontend/Dockerfile" ]; then
          echo "✅ Frontend Dockerfile exists"
          echo "First 20 lines:"
          head -20 frontend/Dockerfile
        else
          echo "❌ Frontend Dockerfile not found"
        fi

  diagnostic-buildx:
    name: 🏗️ BuildX Diagnostic
    runs-on: ubuntu-latest
    if: github.event.inputs.test_type == 'buildx'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🏗️ Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64
        
    - name: 🔍 BuildX Status Check
      run: |
        echo "=== BUILDX DIAGNOSTIC ==="
        docker buildx version
        docker buildx ls
        docker buildx inspect
        echo ""
        echo "Available builders:"
        docker buildx ls --format table
        
    - name: 🧪 Test Simple Build
      run: |
        echo "=== SIMPLE BUILD TEST ==="
        echo "Creating test Dockerfile..."
        cat > Dockerfile.test << 'EOF'
        FROM node:20-alpine
        WORKDIR /app
        RUN echo "Hello from test build"
        CMD ["echo", "Test successful"]
        EOF
        
        echo "Testing build..."
        docker buildx build --platform linux/amd64 -t test:latest -f Dockerfile.test .
        
        echo "Testing run..."
        docker run --rm test:latest
        
        echo "Cleanup..."
        rm Dockerfile.test

  diagnostic-package-check:
    name: 📦 Package Structure Check
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Package.json Validation
      run: |
        echo "=== PACKAGE.JSON VALIDATION ==="
        echo "Root package.json:"
        if [ -f "package.json" ]; then
          echo "✅ Found"
          jq '.name, .version, .scripts' package.json 2>/dev/null || echo "❌ Invalid JSON"
        else
          echo "❌ Not found"
        fi
        echo ""
        echo "Backend package.json:"
        if [ -f "backend/package.json" ]; then
          echo "✅ Found"
          jq '.name, .version, .scripts' backend/package.json 2>/dev/null || echo "❌ Invalid JSON"
        else
          echo "❌ Not found"
        fi
        echo ""
        echo "Frontend package.json:"
        if [ -f "frontend/package.json" ]; then
          echo "✅ Found"
          jq '.name, .version, .scripts' frontend/package.json 2>/dev/null || echo "❌ Invalid JSON"
        else
          echo "❌ Not found"
        fi